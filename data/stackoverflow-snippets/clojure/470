(ns clj.core
  (:require
    [tupelo.core      :as t]  ))
(t/refer-tupelo)

(defmacro foo 
  [arg]
  `(def ~(symbol arg) ~arg))

(foo "aa")
(spyx aa)

(defn map-foo-fn
  [coll]
  (cons 'do
    (forv [elem coll]
      (list 'foo elem))))
(newline)
(prn  (map-foo-fn ["bb"] ))
(eval (map-foo-fn ["bb"] ))
(spyx bb)

(defmacro map-foo-mcr
  [coll]
  `(do
     ~@(forv [elem coll]
        (list 'foo elem))))
(newline)
(println (macroexpand-1 '(map-foo-mcr ["cc" "dd"] )))
(map-foo-mcr ["cc" "dd"] )
(spyx cc)
(spyx dd)
