;apply to the 'or' macro
(some identity [nil false 1 2 3])
=> 1

;apply to the 'case' macro.
(some
  (fn [[case value]]
    (and (= case 2) value))
  (partition 2 [1 ""one"" 2 ""two"" 3 ""three""]))
=> ""two""

;apply to the 'cond' macro
(some
  (fn [[case value]]
    (and case value))
  (partition 2 [false ""one"" true ""two"" false ""three"" :else ""four""]))
=> ""two""

;apply to the 'condp' macro
(let [[f v & args] [= 2 1 ""one"" 2 ""two"" 3 ""three""]]
  (some
    (fn [[case value]]
      (and (f case v) value))
    (partition 2 args)))
