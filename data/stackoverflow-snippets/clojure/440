(defn capitalize [s]
  (if (> (count s) 0)
    (str (Character/toUpperCase (.charAt s 0))
         (subs s 1))
    s))

(defn myfunc [m] (assoc m :name (capitalize (get m :name))))

(defn- emit-class!
  [[class fields]]
  (let [vals {:view?   (:view? class)
      :type    (if (:view? class) "View" "Object")
      :package (:package class)
      :name    (str (:dollar-name class) Icepick/SUFFIX)
      :target  (:dotted-name class)
      :parent  (if-let [parent (:qualified-parent-name class)]
                 (str parent Icepick/SUFFIX)
                 (if (:view? class) "View" "Object"))
      :fields  fields
      :cap     (map myfunc fields)}

    file-name (str (:package class) "." (:dollar-name class) Icepick/SUFFIX)
    file-object (file-object file-name (:element class))]

     (doto (.openWriter file-object)
          (.write (mustache/render-string template vals))
          (.flush)
          (.close))))
