(ns test
  (:require  [clojure.string :as s]
             [clojure.java.io :as io]))

(defn line-filter [include exclude line]
  (and (not (s/includes? line exclude))
       (s/includes? line include)))

(defn process-line [line]
  (let [line-parts (s/split line #";")
        code (nth line-parts 3)
        instructor (nth line-parts 19)]
    {:code code :instructor instructor}))

(defn read-file [file-name]
  (s/split (slurp (io/resource file-name)) #"\n"))

(defn parse-lines [lines] 
  (map process-line lines))


(defn read-file-and-parse
  "This function will read a file, process the lines, and output a collection of maps"
  [filename search-for exclude]
  (parse-lines
   (filter #(line-filter search-for exclude %)
    (read-file filename))))
