(defn unique [coll1 coll2]
  (let [items (concat coll1 coll2)]
    (loop [res #{}
           seen #{}
           [x & xs :as items] items]
      (cond ;; if there are no items left to check, returning result
            (empty? items) res
            ;; if we've already seen the first item of a coll, remove it from the resulting set
            (seen x) (recur (disj res x) seen xs)
            ;; otherwise mark it as seen, and add it to the result set
            :else (recur (conj res x) (conj seen x) xs)))))
