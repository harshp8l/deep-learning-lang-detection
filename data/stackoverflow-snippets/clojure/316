(defn make-print-expression [env]
  (if (contains? env 'color)
    `(prn (str ~'color "-colored " ~'to-print))
    (if-let [color (resolve 'color)]
      `(prn (str @~color "-colored " ~'to-print))
      `(prn ~'to-print))))

(defmacro def-color-printer [name pattern]
  (list `defn name [pattern]
        (make-print-expression &env)))

(def-color-printer print-limes {to-print :limes})

(let [color "green"]
  (def-color-printer print-limes-color-with-local {to-print :limes}))

(def color "greyish")
(def-color-printer print-limes-color-with-var {to-print :limes})

(print-limes {:limes "limes!"})
;=> "limes!"

(print-limes-color-with-local {:limes "limes!"})
;=> "green-colored limes!"

(print-limes-color-with-var {:limes "limes!"})
;=> "greyish-colored limes!"
