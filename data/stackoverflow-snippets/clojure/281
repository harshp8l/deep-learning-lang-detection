(ns tst.clj.core
  (:use clj.core tupelo.test)
  (:require [tupelo.core :as t] ))
(t/refer-tupelo)

(defn index-impl
  [idxs data tgt]
  (apply glue
    (for [[idx val] (zip (range (count data)) data)]
      (let [idxs-curr (append idxs idx)]
           (if (sequential? val)
             (index-impl idxs-curr val tgt)
             (if (= val tgt)
               [{:idxs idxs-curr :val val}]
               [nil]))))))

(defn index [data tgt]
  (keep-if not-nil? (index-impl [] data tgt)))

(dotest
  (let [data-1 [1 2 3]
        data-2 [[1 2 3]
                [10 11]
                []]
        data-3 [[[1 2 3]
                 [4 5 6]
                 [7 8 9]]
                [[10 11]
                 [12 13]]
                [[20]
                 [21]]
                [[30]]
                [[]]]
  ]
    (spyx (index data-1 2))
    (spyx (index data-2 10))
    (spyx (index data-3 13))
    (spyx (index data-3 21))
    (spyx (index data-3 99))
  ))
