(defmacro assoc-if-nil
  "Takes a map as the first argument and a succession of key value pairs that
  are used to set the key to value if the key of the map is nil. The value part
  is only evaluated if the key is nil (thus different semantics to (merge)).
  Example:
  (assoc-if-nil {:a {:b :set}}
    [:a :b] :non-def
    [:a :c] :non-def
    :d :non-def)
  ;; =>{:a {:b :set, :c :non-def}, :d :non-def}"
  [m & clauses]
  (assert (even? (count clauses)))
  (let [g (gensym)
        get-fn   (fn[kork] (if (vector? kork) `get-in   `get))
        assoc-fn (fn[kork] (if (vector? kork) `assoc-in `assoc))
        pstep (fn [[kork v]] `(if-not (~(get-fn kork) ~g ~kork)
                                (~(assoc-fn kork) ~g ~kork ~v)
                                ~g))]
    `(let [~g ~m ;; avoid double evaluation
           ~@(interleave (repeat g) (map pstep (partition 2 clauses)))]
       ~g)))
