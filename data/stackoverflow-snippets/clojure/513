(ns xyz
  (:require  [tupelo.core :as t] ))
(t/refer-tupelo)

(def data
 '[ (1,2,3,4)
    (2,3,4,5)
    (3,4,5,6) ] )

(newline)
(println "forv demo")
(spyx (forv [i [1 2 3]]
  (spyx i )))

(newline)
(println "doseq demo")
(spyx (doseq [i [1 2 3]]
  (spyx i )))

(println "-----------------------------------------------------------------------------")
(newline)
(println "for 1d")
(println "final result ="
  (forv [sub-list data]
    (spyx sub-list )))

(newline)
(println "for 2d")
(println "final result ="
  (forv [sub-list  data
         int-val   sub-list]
    (spyx int-val )))
(newline)

(newline)
(println "for 2d-2")
(println "final result ="
  (forv [sub-list  data]
    (forv [int-val   sub-list]
      (spyx int-val ))))
(newline)

(println "-----------------------------------------------------------------------------")
(newline)
(println "doseq 1d")
(doseq [sub-list data]
  (println  "sub-list =" sub-list ))

(newline)
(println "doseq 2d")
(doseq [sub-list  data]
  (doseq [int-val sub-list]
    (spyx int-val )))

(newline)
(println "doseq 2d-2")
(doseq [sub-list  data
        int-val   sub-list]
    (spyx int-val ))
