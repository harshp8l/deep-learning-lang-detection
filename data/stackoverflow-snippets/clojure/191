(defn char->sym [c]
  (symbol (string c))

user> (char->sym \a)
;;=> a

user> (map char->sym ""asd"")
;;=> (a s d)
;; in my example i use the functional composition: (comp symbol str)
;; that creates the function that works exactly like char->sym

;; let's wrap this mapping to a function:
(defn word->syms [w]
   (map char->sym w))

user> (word->syms ""asd"")
;;=> (a s d)

;; and now we just have to transform the whole list of words:
user> (map word->syms [""asd"" ""fgh""])
;;=> ((a s d) (f g h))
