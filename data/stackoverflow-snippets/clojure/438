user=> (filter (fn [x] (/ 100 x)) [100 50 0])
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
user=> (pst *e)
ArithmeticException Divide by zero
    clojure.lang.Numbers.divide (Numbers.java:158)
    clojure.lang.Numbers.divide (Numbers.java:3784)
    user/eval8/fn--9 (NO_SOURCE_FILE:3)
    clojure.core/filter/fn--6908 (core.clj:2790)
    ...
nil

user=> (filter (fn hundred-div [x] (/ 100 x)) [100 50 0])
ArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:158)
user=> (pst *e)
ArithmeticException Divide by zero
    clojure.lang.Numbers.divide (Numbers.java:158)
    clojure.lang.Numbers.divide (Numbers.java:3784)
    user/eval14/hundred-div--15 (NO_SOURCE_FILE:5)        ;; <---
    clojure.core/filter/fn--6908 (core.clj:2790)
    ...
