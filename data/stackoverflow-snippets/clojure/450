(defnz z y
  [{:keys [value] :as args}]
  (println ""Z ARGS"" args)
  (println ""Z VALUE"" value))

;;(defn z [{:keys [value], :as args}]
;;  (do (y args) (println ""Z ARGS"" args) (println ""Z VALUE"" value)))


(defnz z y
  [{:keys [value] :as all-args}]
  (println ""Z ARGS"" all-args)
  (println ""Z VALUE"" value))

;;(defn z [{:keys [value], :as all-args}]
;;  (do
;;    (y all-args)
;;    (println ""Z ARGS"" all-args)
;;    (println ""Z VALUE"" value)))

(defnz z y
  [{:keys [value]}]
  (println ""Z ARGS"" everything)
  (println ""Z VALUE"" value))

;;(defn z [{:keys [value], :as everything}]
;;  (do
;;    (y everything)
;;    (println ""Z ARGS"" everything)
;;    (println ""Z VALUE"" value)))
