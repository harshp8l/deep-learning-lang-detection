;; the bindings are pairs of names and initial values
(loop [product-cities {} ; This is the accumulator that we're gonna build up.
       rows table] ; and these are the rows, we're gonna go through them one by one.

  ;; Here's the base case, if there are no rows left we return the accumulator.
  (if (empty? rows)
    product-cities

    ;; If there are rows left, we need to add to the accumulator.
    (let [row (first rows)
          city (:city row)
          product (:product row)
          new-accumulator (update product-cities product (fnil conj []) city)]

      ;; recur takes as many arguments as the pairs we defined
      ;;  and ""jumps"" back to the loop
      (recur new-accumulator (rest rows)))))
;;=> {""Pencil"" [""Toronto"" ""Oshawa""], ""Bread"" [""Toronto"" ""Oshawa"" ""Ottawa""]}
