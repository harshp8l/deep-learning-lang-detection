;; -----------------------------------------
;; begin Point class
;; -----------------------------------------
(defrecord Point [x y methods] )

(def someMethods

  {
   :getX (fn [this] (:x this)  )    
   :getY (fn [this] (:y this)  )   
   :distance (fn [this other] 
                (def dx (- (:x this) (:x other)))
                (def dy (- (:y this) (:y other)))
                (Math/sqrt (+ (* dx dx) (* dy dy) ))
                 )
  }  

  )

;;
;; Point constructor
;; 
(defn newPoint [x y]
  (Point. x y someMethods)
  )

;; -----------------------------------------
;; end Point class
;; -----------------------------------------

;; -----------------------------------------
;; helper to call methods
;; -----------------------------------------
(defn call 
  ([obj meth] ((meth (:methods obj)) obj))
  ([obj meth param1] ((meth (:methods obj)) obj param1))
  ([obj meth param1 param2] ((meth (:methods obj)) obj param1 param2))
  )

;; -----------------------------------------
;; main()
;; -----------------------------------------
(def p1 (newPoint 3 4))
(def p2 (newPoint 0 0))

(call p1 :getY) ;; == ((:getX (:methods p1)) p1)

(call p1 :distance p2) ;; == ((:distance (:methods p1)) p1 p2)
