(ns clj.core
  (:use tupelo.core)
  (:require [tupelo.schema :as ts]
            [schema.core :as s] ))

(s/defn gather-keys
  [list-of-maps :- [ts/KeyMap]]
  (newline)
  (let [keys-vec (keys (first list-of-maps))]
    (s/validate [s/Keyword] keys-vec) ; verify it is a vector of keywords
    (apply glue
      (for [curr-key keys-vec]
        {curr-key (forv [curr-map list-of-maps]
                    (get curr-map curr-key))} ))))
(deftest t-maps
  (spyx
    (gather-keys [{:a 1 :b 2}
                  {:a 3 :b 4} ] )))

(gather-keys [{:a 1, :b 2} {:a 3, :b 4}]) ;=> {:a [1 3], :b [2 4]}
