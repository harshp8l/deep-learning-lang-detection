(defn validate [data]
  (letfn [(not-nil-v [data field msg errs]
            (if (nil? (data field))
              (conj errs msg)
              errs))]
    (if-let [val-res (seq (->> []
                               (not-nil-v data "foo" "foo is required")
                               (not-nil-v data "bar" "bar is required")))]
      (println val-res)
      (println "everything is ok"))))
#'user/validate

user> (validate {"foo" 1})
(bar is required)
nil

user> (validate {})
(foo is required bar is required)
nil

user> (validate {"foo" 1 "bar" 2})
everything is ok
nil
