user=> (def m (into {} (let [r #(- (rand-int 10) (rand-int 10))] (for [a (range -1 2) b (range -1 2)] [[(r) (r)] (str a b)]))))
#'user/m
user=> (>pprint m)
{[-7 -4] ""10"",
 [-3 5] ""01"",
 [-5 -7] ""00"",
 [5 2] ""11"",
 [-3 1] ""-10"",
 [7 -4] ""-11"",
 [0 -6] ""0-1"",
 [3 1] ""-1-1"",
 [-8 -1] ""1-1""}
nil
user=> (>pprint (into (sorted-map-by compare) m))
{[-8 -1] ""1-1"",
 [-7 -4] ""10"",
 [-5 -7] ""00"",
 [-3 1] ""-10"",
 [-3 5] ""01"",
 [0 -6] ""0-1"",
 [3 1] ""-1-1"",
 [5 2] ""11"",
 [7 -4] ""-11""}
nil
user=> (>pprint (into (sorted-map) m))
{[-8 -1] ""1-1"",
 [-7 -4] ""10"",
 [-5 -7] ""00"",
 [-3 1] ""-10"",
 [-3 5] ""01"",
 [0 -6] ""0-1"",
 [3 1] ""-1-1"",
 [5 2] ""11"",
 [7 -4] ""-11""}
nil
user=> (assert (= (into (sorted-map-by compare) m) (into (sorted-map) m)))
nil
