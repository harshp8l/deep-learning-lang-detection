(require '[clojure.string :as s])

(defn key-and-index
  "Given a string like 'foo_bar_7' return ['foo_bar' 7]"
  [s]
  (let [segments (s/split s #"_")
        k (s/join "_" (drop-last segments))
        index (read-string (last segments))]
      [k index]))

(defn item-map
  "Reducing fn: given an accumulated nested map of index:key:val,
  and a current item, parse the current item into the same shape
  and add it to the map."
  [m [old-key v]]
  (let [[k i] (key-and-index (name old-key))]
    (if (not (empty? k)) ; drop extraneous input data
      (assoc-in m [i k] v)
      m)))

(vals (reduce item-map {} items))
