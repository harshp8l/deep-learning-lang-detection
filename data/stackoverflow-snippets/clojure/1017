(defn map-not-nth 
  ""Transform all elements of coll except the one corresponding to idx (zero-based).""
  [func coll idx]   
  {:pre  [ (<= 0 idx (count coll)) ]
   :post [ (= (count %) (count coll)) 
           (= (nth coll idx) (nth % idx) ) ] }
  (let [coll-tx (map func coll)   ; transform all data
        result  (flatten  [ (take idx coll-tx)        ; [0..idx-1]
                            (nth coll idx)            ; idx
                            (drop (inc idx) coll-tx)  ; [idx+1..N-1]
                          ] ) ]
    result ))

(def xx [ 0 1 2 3 4 ] )

(prn (map-not-nth str xx 0))
(prn (map-not-nth str xx 1))
(prn (map-not-nth str xx 2))
(prn (map-not-nth str xx 3))
(prn (map-not-nth str xx 4))
