(let [divisors (fn [n] (into #{n} (into #{1} (filter (comp zero? (partial rem n)) (range 1 n)))))
      str->ints (fn [string]
                  (map #(Integer/parseInt %)
                       (clojure.string/split string #" ")))
                       ;lines (line-seq (java.io.BufferedReader. *in*))
      get-counts (fn [pair] (let [d1 (divisors (first pair))
                                  d2 (divisors (second pair))]
                              (count (clojure.set/intersection d1 d2))))
      lines ["3"
             "10 4"
             "1 100"
             "288 240"
             ]
      counts (map (comp get-counts str->ints) (rest lines))]
  (doseq [v counts]
    (println (str v))))
