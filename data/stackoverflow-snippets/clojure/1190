(defn transform [input]
  (-> (fn [acc [[x y z] _]]      ;; take the acc, [k, v], destructure k discard v
        (let [key [x y]]         ;; construct key into accumulator
          (if-let [v (acc key)]  ;; if the key is set
            (if (greater? z v)   ;;   and z (the new val) is greater
              (assoc acc key z)  ;;   then update
              acc)               ;;   else do nothing
            (assoc acc key z)))) ;; else update
      (reduce {} input)))        ;; do that over all [k, v]s from empty acc
