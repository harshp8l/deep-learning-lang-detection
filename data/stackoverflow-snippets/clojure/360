(ns ...
  (:require [clojure.string :as str]
            [clojure.zip :as zip]
            [clygments.core :as cly]
            [hickory.core :as hkc]
            [hickory.render :as hkr]
            [hickory.zip :as hkz]))

(defn is-highlightable?
  ""Return true if the node is of a type that this program can
  highlight. Specifically, is the node wrapped in a :pre tag,
  tagged as :code and does it include a language name.""
  [node]
  (let [is-pre (= (:tag node) :pre)
        fc (first (:content node))  ; Get inside the <pre> tag.
        has-code (= (:tag fc) :code)
        has-class (get-in fc [:attrs :class])
        has-language (when has-class
                       (.startsWith has-class ""language-""))]
    (and is-pre has-code has-class has-language)))

    (defn hilight-node
      ""Return a highlighted version of the source code in the node.""
      [node]
      (let [fc (first (:content node))        ; Get inside the <pre> tag.
            lang (get-in fc [:attrs :class])
            language (str/replace lang ""language-"" """")
            cntnt (first (:content fc))
            hili (cly/highlight cntnt (keyword language) :html)
            frag (hkc/parse-fragment hili)
            hck-hili (hkc/as-hickory (first frag))
            new-node {:type :element :attrs {:class (str ""lang-"" language)}
                      :tag  :div :content [hck-hili]}]
        new-node))

      (defn edit-html-tree
        ""Take a zipper, a function that matches a pattern in the tree,
         and a function that edits the current location in the tree.  Examine the tree
         nodes in depth-first order, determine whether the matcher matches, and if so
         apply the editor.""
        [zipper matcher editor]
        (loop [loc zipper]
          (if (zip/end? loc)
            (zip/root loc)
            (if-let [matched (matcher (zip/node loc))]
              (let [new-loc (zip/edit loc editor)]
                (if (not= (zip/node new-loc) (zip/node loc))
                  (recur (zip/next new-loc))))
              (recur (zip/next loc))))))

      (defn hilight-syntax
        ""Return a version of the input HTML where the code listings have
        been syntax highlighted.""
        [html-in]
        (hkr/hickory-to-html (edit-html-tree
                               (hkz/hickory-zip (hkc/as-hickory (hkc/parse html-in)))
                               is-highlightable?
                               hilight-node)))
