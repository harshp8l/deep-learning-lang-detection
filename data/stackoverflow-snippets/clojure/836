(defn read-from-middle [data f-type start-idx]
  (let [tmp-buf (Unpooled/wrappedBuffer data start-idx (- (alength data) start-idx))
        buffy-buffer (dynamic-buffer f-type)
        total-size (decoding-size f-type tmp-buf 0)]
    [(decompose buffy-buffer tmp-buf) (+ start-idx total-size)]))

(def f-type
  (let [string-encoder (frame-encoder [value]
                                      length (short-type) (count value)
                                      string (string-type (count value)) value)
        string-decoder (frame-decoder [buffer offset]
                                      length (short-type)
                                      string (string-type (read length buffer offset)))]
    (frame-type string-encoder string-decoder second)))

(let [my-data (byte-array [0 1 0x61 0 2 0x62 0x63 0 1 0x64])
      idx 0
      [i1 idx] (read-from-middle my-data f-type idx)
      [i2 idx] (read-from-middle my-data f-type idx)
      [i3 idx] (read-from-middle my-data f-type idx)]
  [i1 i2 i3])
