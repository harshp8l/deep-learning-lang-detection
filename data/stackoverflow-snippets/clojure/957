(defn read-input [f]
  (let [[n-str & node-str] (-> (slurp f)
                               clojure.string/split-lines)
        n (Integer/parseInt n-str)]
    (->> (map vector (range 1 n) node-str)
         (map (fn [[k v]]
                (->> (clojure.string/split v #" ")
                     (mapv #(Integer/parseInt %))
                     (vector k))))
         (into {}))))

(defrecord TreeNode [val left right])

(defn make-tree [i m]
  (when-let [[l r] (get m i)]
    (->TreeNode i (make-tree l m) (make-tree r m))))

(->> (clojure-scratch.core/read-input (clojure.java.io/resource "sample.txt"))
     (clojure-scratch.core/make-tree 1))

=> #clojure_scratch.core.TreeNode{:val 1, :left #clojure_scratch.core.TreeNode{:val 2, :left #clojure_scratch.core.TreeNode{:val 4, :left #clojure_scratch.core.TreeNode{:val 6, :left nil, :right #clojure_scratch.core.TreeNode{:val 9, :left nil, :right nil}}, :right nil}, :right nil}, :right #clojure_scratch.core.TreeNode{:val 3, :left #clojure_scratch.core.TreeNode{:val 5, :left #clojure_scratch.core.TreeNode{:val 7, :left nil, :right nil}, :right #clojure_scratch.core.TreeNode{:val 8, :left #clojure_scratch.core.TreeNode{:val 10, :left nil, :right nil}, :right nil}}, :right nil}}
