(defn code-with-context                                                         
  [body sq t else]                                                              
  (let [f (eval (list 'fn '[sequ on-true on-false] body))]                      
    (f sq t else)))                                                             



(code-with-context (read-string ""(if (apply < sequ) on-true on-false)"")         
                   [1 3 5]                                                      
                   ""sequence is sorted in ascending order""                      
                   ""sequence is NOT sorted"")
