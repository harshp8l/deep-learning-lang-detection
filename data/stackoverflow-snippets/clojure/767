; I am using your literal data as DATA, just removed the , and ;
(def DATA [{...

(group-by #(get % ""a"") DATA) ; groups by ""a"" as keys
; so I get a map {""X"":[{},...] ""Y"":[{},{},{},...]}

; then I map over each [k v] pair where
; k is the map key and
; vs are the grouped maps in a vector
(fn [ [k vs] ] 
      ; here `k` is e.g. ""Y"" and `vs` are the maps {a _, b, _, c _}

      ; now `(map #(get % ""b"") vs)` gets me all the b values
      ; `into set` makes them uniqe
      ; `count` counts them
      ; finally I return a vector with the same name `k`,
      ;   but the value is the counted `b`s
      [k (count (into #{} (map #(get % ""b"") vs)))]) 

; at the end I just put the result `[ [""Y"" 2] [""X"" 1] ]` `into` a map {}
; so you get a map
