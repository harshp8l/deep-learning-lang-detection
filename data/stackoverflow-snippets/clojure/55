(def json-str "{\n  \"foo\": {\n    \"id\": 1,\n    \"name\": \"foo1\"\n  },\n  \"bar\": {\n    \"id\": 1,\n    \"name\": \"bar1\"\n  },\n  \"foo\": {\n    \"id\": 2,\n    \"name\": \"foo2\"\n  },\n  \"bar\": {\n    \"id\": 2,\n    \"name\": \"bar2\"\n  }\n}")

(def parsed (cheshire.core/parse-string json-str true))
;; {:foo {:id 2, :name "foo2"}, :bar {:id 2, :name "bar2"}}

;; handle with case:

(defn handle-data
  [data]
  (doseq [[k v] data]
    (case k
      :foo (println "this is a foo!" v)
      :bar (println "this is a bar!" v)
      (throw (ex-info (str "Did not recognize key "
                           key)
                      {:key k
                       :map v})))))

;; handle with multimethods:

(defmulti do-thing-depending-on-key first)

(defmethod do-thing-depending-on-key :foo [[k v]]
  (println "this is a foo!" v))

(defmethod do-thing-depending-on-key :bar [[k v]]
  (println "this is a bar!" k))

(defmethod do-thing-depending-on-key :default [[k v]]
  (throw (ex-info (str "Did not recognize key "
                       key)
                  {:key k
                   :map v})))

(run! do-thing-depending-on-key parsed)
;; this is a foo! {:id 2, :name foo2}
;; this is a bar! {:id 2, :name bar2}
;; => nil

(run! do-thing-depending-on-key {:unknown {:id 3 :name "Unknown"}})
;; => 
;; clojure.lang.ExceptionInfo:
;; Did not recognize key :unknown {:key :unknown, :map {:id 3, :name "Unknown"}}
