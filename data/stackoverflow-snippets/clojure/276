(defn first-calculation
  [ctx               ; first arg is the context (vec here, usually a map)
   some-other-arg]
  (let [[val1 val2] ctx]  ; destructure the context into locals
       ...
    [val1-new val2-new] ))   ; return new context

(defn second-calculation
  [ctx               ; first arg is the context (vec here, usually a map)
   some-other-arg]
  (let [[val1 val2] ctx]  ; destructure the context into locals
    ...
    [val1-new val2-new] ))   ; return new context

(let [ctx [some-value some-other-value]
   (cond-> ctx
      something-true       (first-calculation  some-other-arg)
      something-else-true  (second-calculation some-other-arg)
      ...etc... ))
