(def data [
    [:h2 {} "Foo"]
    [:h3 {} "Child1"]
    [:h2 {} "Bar"]
    [:h3 {} "Child2"]
    [:h3 {} "Child3"]
    [:h2 {} "Baz"] ] )

(defn h2? [elem]
  (= :h2 (first elem)))

(defn ->li [elem]
  [:li (last elem)])

(defn fmt [data]
  (let [h2 (filter h2? data)
        h3 (filter #(not (h2? %)) data)
        result  (conj (mapv ->li h2)
                  (apply vector :ul (mapv ->li h3))) ]
        result ))

(newline) (println :data data)
(newline) (println :result (fmt data))
