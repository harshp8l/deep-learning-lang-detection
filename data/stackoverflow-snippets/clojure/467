(use 'clojure.java.io)
(defn log-info
  "" Places a newline so every time is on a different line ""
  [file-name s]
  (spit file-name (format ""%s %n"" (str s)) :append true)) ; %n places
                                 ; platform independent newline after each time

(defmacro bench
  "" Times the execution of your function,
    discarding the output and returning the elapsed time in seconds
    (you can modify this by changing the divisor from 1e9 (i.e. for milliseconds it would be 1e6.""
  ([& forms]
   `(let [start# (System/nanoTime)]
      ~@forms
      (double (/ (- (System/nanoTime) start#) 1e9)))))   ; Time in seconds

(defn display-huffman-encode  [x]
  "" Test example of your display function--just sleeps for 100 ms each time its called to simulate processing ""
  (Thread/sleep 100))   ; Sleeps 100 ms

; Example code using the above elements
; Reading and writing to the working directory with input from ""input.txt"" and logging output times to ""times.txt"" as the logged times
(dotimes [i 3]
  (with-open [rdr (reader ""input.txt"")]
    (doseq [line (line-seq rdr)]
  (log-info ""times.txt"" (bench (display-huffman-encode line))))))
