(defn thread-name []
  (.getName (Thread/currentThread)))

(require '[clojure.core.async :as async :refer [chan <! >! >!! go]])

(defn p [& args]
  (locking *out*
          (apply println (thread-name) ":" args)))

(defn log [v]
  (p "Transforming" v)
  v)

(def tx (map log))

(def c (chan 1 tx))
(def c2 (chan 1 tx))

(go
  (loop []
    (when-let [v (<! c)]
      (p "Getting from c1" v)
      (<! (async/timeout 100))
      (recur))))

(go
  (loop []
    (when-let [v (<! c2)]
      (p "Getting from c2" v)
      (<! (async/timeout 100))
      (recur))))

(dotimes [_ 5]
  (p "Putting in c1" 1)
  (>!! c 1)
  (p "Putting in c2" 100)
  (>!! c2 100))
