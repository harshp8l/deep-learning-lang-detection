(defn children-depths [parents]
  (let [children ; let's first build an inverted index
        (reduce-kv (fn [children node {parent :root}]
                     (update children parent conj node))
          {} parents)
        depths (fn depths [node]
                 (if-some [nodes (children node)]
                   (into [(count nodes)]
                     ; pads and sums
                     (reduce #(map + (concat %1 (repeat 0)) (depths %2))
                       nil nodes))
                   []))] ; no descendants -> empty 
    (into {} (for [node (keys parents)] [node (depths node)]))))

=> (children-depths {1 {:root nil} 2 {:root 1} 3 {:root 1} 4 {:root 2} 5 {:root 1} 6 {:root 4}})
{1 [3 1 1], 2 [1 1], 3 [], 4 [1], 5 [], 6 []}
