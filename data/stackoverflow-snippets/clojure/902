(require '[clojure.data.zip.xml :as zf])
(require '[clojure.zip :as z])

(def ex
""<table>
  <column name=\""col1\"" type=\""varchar\""  length=\""8\""/>
  <column name=\""col2\"" type=\""varchar\""  length=\""16\""/>
  <column name=\""col3\"" type=\""int\""  length=\""16\""/>
</table>"")

(let [x (z/xml-zip (clojure.data.xml/parse-str ex))]
  (->> (zf/xml-> x :column) ;;equivalent to (->> treeseq ... filter)
         flatten
        (keep :attrs)
        (map vals)))
;>>> ((""col1"" ""varchar"" ""8"") (""col2"" ""varchar"" ""16"") (""col3"" ""int"" ""16""))
