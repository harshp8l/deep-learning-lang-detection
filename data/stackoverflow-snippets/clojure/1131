(defn work [rank-of-primes]
  (letfn [(is-prime? [n]
                     (not-any? #(= 0 (mod n %)) 
                               (cons 2 (range 3 (inc (Math/sqrt n)) 2))))
          (parse-primes []
                        (cons 2 (filter #(is-prime? %) 
                                (cons 2 (iterate (partial + 2) 3)))))
          (nth-prime [n]
                     (nth (parse-primes) n))]
    (map nth-prime rank-of-primes)))

(let [input "2\n3\n6\n10000"
      ranks-of-primes (map read-string (str/split-lines input))]
  (work ranks-of-primes))
