(defn adjacency-list [coll]
  (reduce (fn [r {p ""parent"" c ""child""}]
            (-> r
              (update-in [:counts p] #(or % 0))
              (update-in [:counts c] #(if % (inc %) 1))
              (update-in [:adjacency p] #(if % (conj % c) [c]))))
          {}
          coll))

(defn root-nodes [counts]
  (mapv key
        (filter (comp zero? val) counts)))

(defn traverse [m al roots]
  (reduce (fn [r k]
            (assoc r k
                   (if-let [v (get al k)]
                     (traverse {} al v)
                     {})))
          m
          roots))

(def data '({""child"" ""1.1"", ""parent"" ""1""} {""child"" ""1.2"", ""parent"" ""1""} {""child"" ""1.3"", ""parent"" ""1""} {""child"" ""1.4"", ""parent"" ""1""} {""child"" ""1.1.1"", ""parent"" ""1.1""} {""child"" ""1.1.2"", ""parent"" ""1.1""} {""child"" ""2.1"", ""parent"" ""2""} {""child"" ""2.2"", ""parent"" ""2""} {""child"" ""2.3"", ""parent"" ""2""}))

(let [{:keys [counts adjacency]} (adjacency-list data)]
  (clojure.pprint/pprint (traverse {} adjacency (root-nodes counts))))

;=> {""2"" {""2.3"" {}, ""2.2"" {}, ""2.1"" {}},
;    ""1"" {""1.4"" {}, ""1.3"" {}, ""1.2"" {}, ""1.1"" {""1.1.2"" {}, ""1.1.1"" {}}}}
