(defn my-tran [rf]
  (fn
    ([]
     (println ""Arity 0!"")
     (rf))
    ([res]
     (println ""Arity 1!"")
     (rf res))
    ([result input]
     (println ""Arity 2!"")
     (rf result input))))

> (def a (transduce my-tran conj '(1 2 3)))
Arity 2!
Arity 2!
Arity 2!
Arity 1!
#'test.core/a ;a is already finished

> (def r (eduction my-tran '(1 2 3)))
#'test.core/r ;nothing was done
> r 
Arity 2!
Arity 2!
Arity 2!
Arity 1!
(1 2 3) ;now it's done. Next call with calculate it again. Check it.
> (sequential? r)
true
