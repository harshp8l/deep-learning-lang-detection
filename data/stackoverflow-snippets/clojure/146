(ns tst.demo.core
  (:require [tupelo.core :as t] ))

(defrecord Order [fplate splate])

(def orders-queue (atom []))

(defn add-order [order]
  (swap! orders-queue conj order))

(defn cook [order] (println ""cooking: "" (pr-str order)))

(add-order (->Order ""Soup"" ""Fish&Chips"")) ; order1
(t/spyx-pretty orders-queue)

(add-order (->Order ""Salad"" ""Hamburger"")) ; order2
(t/spyx-pretty orders-queue)

(add-order (->Order ""Rice"" ""Steak"")) ; order3
(t/spyx-pretty orders-queue)

; cook orders
(newline)
(doseq [order @orders-queue]
  (cook order))
