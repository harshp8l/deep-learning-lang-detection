Clojure 1.8.0
(defn mk-state [value width height]
  (let [v (transient (vector))
        row (vec (repeat height value))] ; only create 1 row
    (doseq [n (range 0 width)] 
      (conj! v row)) ; mutate (add rows)
    (persistent! v)))
#'user/mk-state
user=> (get-in (mk-state :t 1000 1000) [99 99])
:t
user=> (pprint (mk-state :t 10 10))
[[:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]
 [:t :t :t :t :t :t :t :t :t :t]]
nil
