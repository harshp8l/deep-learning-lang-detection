(let [pattern [""a"" ""b""]
      source [""a"" ""b"" ""c"" ""a"" ""a"" ""b""]]
    (loop [source source
           pattern-length (count pattern)
           result []]
        (if (< (count source) pattern-length)
            (into [] (concat result source))
            (if (= pattern (subvec source 0 pattern-length))
              ; skip matched part of source
              (recur (subvec source pattern-length) pattern-length result)
              ; otherwise move ahead one element and save it as result
              (recur (subvec source 1) pattern-length 
                     (conj result (first source)))))))
