(ns foo.bar
  (:require
    [clojure.core.async :refer [go go-loop <!]]
    [clojure.core.async.impl.protocols :as p]))

(def m
  {:a (go ""a"")
   :b ""b""
   :c ""c""
   :d (go ""d"")
   :e ""e""
   :f ""f""
   :g ""g""
   :h ""h""
   :i ""i""
   :j ""j""
   :k ""k""
   :l ""l""
   :m ""m""})

(defn readable? [x]
  (satisfies? p/ReadPort x))

(defn cleanse-map
  ""Takes from each channel value in m,
   returns a single channel which will supply the fully realized m.""
  [m]
  (go-loop [acc {}
            [[k v :as kv] & remaining] (seq m)]
    (if kv
      (recur (assoc acc k (if (readable? v) (<! v) v)) remaining)
      acc)))

(go (prn ""***"" (<! (cleanse-map m))))
