;; dfs = depth first search

(defn dfs-factory [pred]
  ;; You can name anonymous functions so that you can recursively
  ;; refer to them from within themselves
  (fn dfs
    ([tree]
     (dfs [] tree))

    ;; Instead of having a helper fn, here we have an extra arity.
    ([acc tree]
     (cond
       (coll? tree) (reduce dfs acc tree)
       (pred tree) (conj acc tree)
       :else acc))))

(def tree-nums
  (dfs-factory number?))

(tree-nums my-tree) ;=> [3 -2 50 9]

(def tree-syms
  (dfs-factory symbol?))

(tree-syms my-tree) ;=> [apple orange banana]
