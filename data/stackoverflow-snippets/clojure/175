(defn winner [moves]
  (let [pattern-of-end {[1 1 1]:1 [2 2 2]:2}]
    (->> moves          #_""I use threading macro to explain""
         (partition 3)  #_""group by each three symbols. 
                           1 line of 9 elements -> 3 lines of 3 elements""
         (keep pattern-of-end) #_""If there is some lines that matches 
                                  the pattern-of-end ,that will return [1] or [2]""
         first          #_""Because the previous expression returns lazy-seq 
                        we can get the scalar by calling first""
)))
