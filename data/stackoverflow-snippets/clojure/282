(defn indexed [coll]
  (map-indexed vector coll))

(defn nested-index-of [coll target]
  (letfn [(step [indices coll]
            (reduce (fn [_ [i x]]
                      (if (sequential? x)
                        (when-let [result (step (conj indices i) x)]
                          (reduced result))
                        (when (= x target)
                          (reduced (conj indices i)))))
                    nil, (indexed coll)))]
    (step [] coll)))

(def x [[[1 2 3] [4 5 6] [7 8 9]] [[10 11] [12 13]] [[14] [15]]])

(nested-index-of x 2) ;=> [0 0 1]

(nested-index-of x 15) ;=> [2 1 0]
