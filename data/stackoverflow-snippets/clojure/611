;; any of these will work, I'd probably use tuple here
(s/def ::two-strings (s/tuple string? string?))
(s/def ::two-strings (s/coll-of string? :count 2))
(s/def ::two-strings (s/coll-of string? :count 2 :into ())) ;; for lists in conformed value

(s/fdef print-two-strings
  :args (s/cat :ss ::two-strings :rst (s/? string?))
  :ret string?)

(pprint (s/exercise-fn `print-two-strings))

;;=> ([(["" ""] "") "{:ss [\"\" \"\"], :rst (\"\")}\n"]
 [(["H" "4"]) "{:ss [\"H\" \"4\"], :rst nil}\n"]
 [(["yZ" "7"] "OU") "{:ss [\"yZ\" \"7\"], :rst (\"OU\")}\n"]
 [(["" "FFt"]) "{:ss [\"\" \"FFt\"], :rst nil}\n"]
 [(["9" "Q0"]) "{:ss [\"9\" \"Q0\"], :rst nil}\n"]
 [(["o" "OuSA"]) "{:ss [\"o\" \"OuSA\"], :rst nil}\n"]
 [(["1JN" "bT"]) "{:ss [\"1JN\" \"bT\"], :rst nil}\n"]
 [(["IUY" ""]) "{:ss [\"IUY\" \"\"], :rst nil}\n"]
 [(["8G" "71H3r3d"]) "{:ss [\"8G\" \"71H3r3d\"], :rst nil}\n"]
 [(["qL" "zK3ZXA"] "9PV5X1")
  "{:ss [\"qL\" \"zK3ZXA\"], :rst (\"9PV5X1\")}\n"])
