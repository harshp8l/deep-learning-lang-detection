(defn ->r [hand]
  (let [ranks (zipmap "23456789TJKQA" (range 2 15)) ; creates a map like {\2 2, .... \A 14}
        count-then-rank
          (fn [x y] (compare 
                      [(second y) (first y)] 
                      [(second x) (first x)]))]
    (->> hand
         (map (comp ranks first)) ; returns the rank for each card eg: '(5 14 5 7 14)
         frequencies              ; returns a map of rank vs count eg: {5 2, 14 2, 7 1}
         (sort count-then-rank)   ; becomes a sorted list of tuples eg: '([14 2] [5 2] [7 1])
         (map first))))           ; extract the first value each time eg: '(14 5 7)
