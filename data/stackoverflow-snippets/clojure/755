(defn remove-subseq-at-start
  [subseq xs]
  (loop [xs xs]
    (if (= (seq subseq) (take (count subseq) xs))
      (recur (drop (count subseq) xs))
      xs)))

(defn remove-subseq-all [subseq xs]
  (if-let [xs (seq (remove-subseq-at-start subseq xs))]
    (lazy-seq (cons (first xs) (remove-subseq subseq (rest xs))))
    ()))

(deftest remove-subseq-all-test
  (is (= [""c"" ""a""] (remove-subseq-all [""a"" ""b""] [""a"" ""b"" ""a"" ""b"" ""c"" ""a"" ""a"" ""b""])))
  (is (= [""a""] (remove-subseq-all [""a"" ""b""] [""a""])))
  (is (= [""a"" ""b""] (remove-subseq-all [] [""a"" ""b""])))
  (is (= [] (remove-subseq-all [""a"" ""b""] [""a"" ""b"" ""a"" ""b""])))
  (is (= [] (remove-subseq-all [""a"" ""b""] nil)))
  (is (= [] (remove-subseq-all [] [])))
  (is (= [""a"" ""b"" ""a"" ""b""] (->> (remove-subseq-all [""c"" ""d""] (cycle [""a"" ""b"" ""c"" ""d""]))
                                (drop 2000000)
                                (take 4))))

  (is (= (seq ""ca"") (remove-subseq-all ""ab"" ""ababcaab""))))
