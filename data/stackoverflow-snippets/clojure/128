(defn select
  ""Takes a set of keys as input, returns a transducer
   which will select only the given keys for each item""
  [& keys]
  (map #(select-keys % keys)))

(defn filter-by [field predicate]
  (filter #(-> % field predicate)))

(defn filter-by-name [user-name]
  ""Filters by users with the given name""
  (filter-by :name #(= % user-name)))

(defn filter-by-age [user-age]
  ""Filters by users with the given age""
  (filter-by :age #(= % user-age))

(defn filter-by-age-over [user-age]
  ""Filters by users with the age strictly above user-age""
  (filter-by :age #(> % user-age))

(defn filter-by-age-below [user-age]
  ""Filters by users with the age strictly below user-age""
  (filter-by :age #(< % user-age))

(defn filter-by-id-over [id-val]
  (filter-by :id #(> % id-val))

(defn filter-by-gender [gender]
  (filter-by :gender #(= % gender))
