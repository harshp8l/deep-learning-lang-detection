(defn why-not-prime [n]
  (let[checker (fn [divisor] ;; A local function under the name checker, with one argument
                 (if (= 0 (mod n divisor));; If that argument is a divisor of n
                   divisor ;;then return it
                   false)) ;; otherwise return false - this value wasn't "appropriate"
       witness (some checker (range 2 n))] ;; witness will be the first value that satisfies checker
              ;if there isn't such a value, witness is nil
    (if witness
      (str n " is composite because it can be divided by " witness)
      (str n " is prime."))))
