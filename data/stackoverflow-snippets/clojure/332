(ns tst.clj.core
  (:use clj.core )
  (:require [tupelo.core :as t] ))
(t/refer-tupelo)

(def foo
  {:able    ""Adelicious!""
   :baker   ""Barbrallicious!""
   :charlie ""Charlizable""})
(def bar
  {:able    ""Apple""
   :baker   ""Berry""
   :charlie ""Kumquat""})

(defn generate-event-fn
  [event-kw]
  (spy-let [
    event-str (name event-kw)
    event-sym (symbol event-str)
    fn-name   (symbol (str ""my-"" event-str))
    new-fn    (fn fn-name [item]
                (let [the-var (intern 'tst.clj.core event-sym) ; get the var the symbol 'event-sym' points to
                      the-map (var-get the-var) ; get the map the var is pointing to
                      the-str (get the-map item)] ; get the string from the map
                  (spyx the-var)
                  (spyx the-map)
                  (spyx the-str)))
  ]
    (intern 'tst.clj.core fn-name new-fn) ; create a var 'fn-name' pointing to 'new-fn'
  ))

(newline)  (println ""*** generating functions ***"")
(newline)  (generate-event-fn :foo) ; creates and interns a function 'my-foo'
(newline)  (generate-event-fn :bar) ; creates and interns a function 'my-bar'

(newline)  (println ""*** calling function ***"")
(newline)  (spyx (my-foo :able))
(newline)  (spyx (my-bar :charlie))
