user> (def tree {:start_date "2014-12-07"
                 :data {:people [{:id 1
                                  :projects [{:id 1} {:id 2}]}
                                 {:id 2
                                  :projects [{:id 1} {:id 3}]}]}})
#'user/tree
user> (def people {1 "Susan" 2 "John"})
#'user/people
user> (def projects {1 "Foo" 2 "Bar" 3 "Qux"})
#'user/projects
user> 
(defn integrate-tree
  [tree people projects]
  ;; letfn is like let, but it creates fn, and allows forward references
  (letfn [(update-person [person]
             ;; -> is the "thread first" macro, the result of each expression
             ;; becomes the first arg to the next
             (-> person
                 (assoc :name (people (:id person)))
                 (update-in [:projects] update-projects)))
          (update-projects [all-projects]
            (mapv
             #(assoc % :name (projects (:id %)))
             all-projects))]
    (update-in tree [:data :people] #(mapv update-person %))))
#'user/integrate-tree
user> (pprint (integrate-tree tree people projects))
{:start_date "2014-12-07",
 :data
 {:people
  [{:projects [{:name "Foo", :id 1} {:name "Bar", :id 2}],
    :name "Susan",
    :id 1}
   {:projects [{:name "Foo", :id 1} {:name "Qux", :id 3}],
    :name "John",
    :id 2}]}}
nil
