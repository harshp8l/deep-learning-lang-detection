(defn not-bit [x]
  (* -1 (- x 1)))

(defn inc-bit-seq [x]
  (when (seq x)
    (if (zero? (not-bit (first x)))
      (cons 0 (inc-bit-seq (rest x)))
      (cons 1 (rest x)))))

(defn pow [x, y]
  (if-not (zero? y)
    (* x (pow x (- y 1)))
    1))

(defn rest-bit-seqs [n, x, lst]
  (when-not (== x (pow 2 n))
    (cons lst (rest-bit-seqs n (+ 1 x) (inc-bit-seq lst)))))

(defn zero-seq [n]
  (when-not (zero? n)
    (cons 0 (zero-seq (- n 1)))))

(defn all-bit-seqs [n]
  (rest-bit-seqs n 0 (zero-seq n)))
