(def obj-data
              '((apple#3 apple fruit kitchen)
                 (mango#5 mango fruit kitchen)
                 (tom cat agent hallway)
                 (jerry mouse agent bedroom)
                 (matthew JavaStudentMatthew student livesAtHome)
                 (tom NetworkStudentTom student newcastleHome)
                 (Nathan NetworkStudentNathan student middlesbroughHome)
                 (Jack NetworkStudentJack student kexgillHome)
                 ))

(defn returnLoc [obj-data super-cat]
  ;If the list passed through is not empty
  (if-not (empty? obj-data)
    ;If the super-category passed in (i.e. Fruit/Agent) is equal
    ;to the Super-Category (the second object in the first row)
    (if (= super-cat (nth (first obj-data) 2))
      ;Recurvisely goes through the same process as above,
      ;To see if there is any other records in the list with the same super-cat
      ;then finds the location of the object and conj[oin]'s that to the returned values
      (cons (list (nth (first obj-data) 1) "" is in "" (nth (first obj-data) 3))
      (returnLoc (rest obj-data) super-cat))
      ;If the super-cat passed through is not equal, it does not add it to the list
      ;And recursively goes back through to check if there are any other possible items to add to
      ;the list.
      (returnLoc (rest obj-data) super-cat)
      )
    ())
  )
