(defn start-proc-once-only
  [state i]
  (let [curr-proc (get state i) ]
    (if (= :running (:state curr-proc))
      (do
        (println ""skipping restart of"" i)
        state)
      (let [delay (int (* 2000 (rand)))]
        (println (format ""starting %d"" i))
        (Thread/sleep delay)
        (println (format ""finished %d"" i))
        (assoc state i {:delay delay :state :running})))))

(def procs (agent {}))
(dotimes [i 3]
  (println :starting i)
  (send procs start-proc-once-only i))
(dotimes [i 3]
  (println :starting i)
  (send procs start-proc-once-only i))

(println ""all dispatched..."")
(println :procs) (pprint @procs)
(Thread/sleep 5000)
(println :procs) (pprint @procs)
