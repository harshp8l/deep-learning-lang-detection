(def tree
     '[SYMB1 ""a""
             [SYMB2 {:k1 [SYMB1 ""b"" ""c""]}
                    ""x""]
                    {:k2 [""b"" ""c""]}])

(defn get-new-keys
  ""Determines next keys vector for tree navigation, can backtrack.""
  [source-tree current-keys current-node]
  (if (and (vector? current-node) (symbol? (first current-node)))
      (conj current-keys 0)
      (let [last-index (->> current-keys count dec)]
        (let [forward-keys (update-in current-keys [last-index] inc)
              forward-node (get-in source-tree forward-keys)]
              (if forward-node
                  forward-keys
                  (if (= 1 (count current-keys))
                      current-keys
                      (recur source-tree (subvec current-keys 0 last-index) current-node)))))))

(defn convert-tree
      ""Converts nested vector source tree to target tree.""
      ([source-tree] (convert-tree source-tree [0] []))
      ([source-tree keys target-tree]
        (let [init-node       (get-in source-tree keys)
              node            (if (map? init-node)
                                  (first (vals init-node))
                                  (if (vector? init-node)
                                      []
                                      init-node))
              new-target-tree (update-in target-tree keys (constantly node))
              new-keys        (get-new-keys source-tree keys init-node)]
      (if (= new-keys keys)
          new-target-tree
          (recur source-tree new-keys new-target-tree)))))

user=> (convert-tree tree)
[SYMB1 ""a"" [SYMB2 [SYMB1 ""b"" ""c""] ""x""] [""b"" ""c""]]
