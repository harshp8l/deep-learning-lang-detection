(ns tst.demo.core
  (:use demo.core
        tupelo.test)
  (:require [tupelo.core :as t]
            [clojure.string :as str] ))
(t/refer-tupelo)

(def table
  [{:product "Pencil" :city "Toronto" :year "2010" :sales "2653.00"}
   {:product "Pencil" :city "Oshawa" :year "2010" :sales "525.00"}
   {:product "Bread" :city "Toronto" :year "2010" :sales "136,264.00"}
   {:product "Bread" :city "Oshawa" :year "nil" :sales "242,634.00"}
   {:product "Bread" :city "Ottawa" :year "2011" :sales "426,164.00"}])

(defn str->double
  "Convert a string like '2,123.97' to a double like 2123.97 "
  [str-val]
  (let [no-commas (str/replace str-val #"," "")
        dbl-val   (Double/parseDouble no-commas)]
    dbl-val))

(dotest
  (let [table-num (forv [item table]
                    (update item :sales str->double))
        grouped   (group-by :product table-num)
        >>        (spyx-pretty grouped)
        group-max (forv [group grouped]
                    (do
                      (spyx-pretty group)
                      (let [records        (xsecond group)
                            >>             (spyx-pretty records)
                            records-sorted (sort-by :sales > records)
                            >>             (spyx-pretty records-sorted)
                            max-rec        (xfirst records-sorted)
                            ]
                        (spyx max-rec))))]
    (spyx-pretty group-max)))
