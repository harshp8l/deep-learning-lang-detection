(def my-tree
  '(3 (apple) -2 ( 50 orange ) 9 banana))

(defn tree-nums-helper
  [acc tree]
  (cond
    ;; If tree is a collection, reduce tree-nums-helper over it using the
    ;; current acc as the initial value.
    (coll? tree) (reduce tree-nums-helper acc tree)

    ;; So, tree is not a collection, it's a leaf.
    ;; If it's a number, add it to the accumulator.
    (number? tree) (conj acc tree)

    ;; Else, just return the accumulator untouched.
    :else acc))

(defn tree-nums
  "Takes a tree and returns a vector of the numbers it contains
   in depth first order."
  [tree]
  ;; Just calls the helper with an empty accumulator.
  (tree-nums-helper [] tree))


(tree-nums my-tree) ;=> [3 -2 50 9]
