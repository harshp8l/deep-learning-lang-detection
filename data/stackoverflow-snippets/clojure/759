(ns clj.core
  (:require [clojure.string :as str] )
  (:use tupelo.core))

(def data   (flatten [ (range 5 10) (range 5) ] ))
(spyx data)

(def result (reduce   (fn [cum-result curr-val]                         ; reducing (accumulator) fn
                        (it-> cum-result 
                              (update it :min-val min curr-val)
                              (update it :max-val max curr-val)))
                      { :min-val (first data) :max-val (first data) }   ; inital value
                      data))                                            ; seq to reduce
(spyx result)
(defn -main [] )

;=> data => (5 6 7 8 9 0 1 2 3 4)
;=> result => {:min-val 0, :max-val 9}
