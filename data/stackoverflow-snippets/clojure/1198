;; idiomatic naming
;; no need to rewrite count and filter for this code
;; putting item and collection in idiomatic argument order
(defn count-of [elem a-seq]
  (count (filter #(= elem %) a-seq)))

;; idiomatic naming
;; putting item and collection in idiomatic argument order
;; actually used the elem-to-remove argument
(defn filtered-seq [elem-to-remove a-seq]
  (remove #(= elem-to-remove %) a-seq))

;; idiomatic naming
;; if you want a set, use a set from the beginning
;; destructuring rather than repeated usage of first
;; use rest to recur when the first item is guaranteed to be dropped
(defn idiomatic-parity [a-seq]
  (loop [result-set #{}
         [elem & others :as current-seq] a-seq]
    (cond (empty? current-seq)
          result-set
          (odd? (count-of elem current-seq))
          (recur (conj result-set elem) (filtered-seq elem others))
          :else
          (recur result-set (filtered-seq elem others)))))
