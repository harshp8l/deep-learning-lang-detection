
user=> (source future)
(defmacro future
  "Takes a body of expressions and yields a future object that will
  invoke the body in another thread, and will cache the result and
  return it on all subsequent calls to deref/@. If the computation has
  not yet finished, calls to deref/@ will block, unless the variant of
  deref with timeout is used. See also - realized?."
  {:added "1.1"}
  [& body] `(future-call (^{:once true} fn* [] ~@body)))
nil
user=> (source future-call)
(defn future-call 
  "Takes a function of no args and yields a future object that will
  invoke the function in another thread, and will cache the result and
  return it on all subsequent calls to deref/@. If the computation has
  not yet finished, calls to deref/@ will block, unless the variant
  of deref with timeout is used. See also - realized?."
  {:added "1.1"
   :static true}
  [f]
  (let [f (binding-conveyor-fn f)
        fut (.submit clojure.lang.Agent/soloExecutor ^Callable f)]
    (reify 
     clojure.lang.IDeref 
     (deref [<em>] (deref-future fut))
     clojure.lang.IBlockingDeref
     (deref
      [</em> timeout-ms timeout-val]
      (deref-future fut timeout-ms timeout-val))
     clojure.lang.IPending
     (isRealized [<em>] (.isDone fut))
     java.util.concurrent.Future
      (get [</em>] (.get fut))
      (get [_ timeout unit] (.get fut timeout unit))
      (isCancelled [<em>] (.isCancelled fut))
      (isDone [</em>] (.isDone fut))
      (cancel [_ interrupt?] (.cancel fut interrupt?)))))
nil
user=>
</pre></code></p>

<p>So testing for failure is no different than in java: you catch an <code>ExecutionException</code>, see java doc for Future:</p>

<p><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html#get()" rel="nofollow">http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html#get()</a></p>

<p>So the solution is to catch the exception from the <code>deref</code>, as shown in other answers.</p>
","<scala><clojure>"
"<p>Datomic uses <a href="http://docs.datomic.com/query.html" rel="nofollow">rules</a> to solve this problem.</p>

<blockquote>
  <p>Datomic datalog allows you to package up sets of :where clauses into
  named rules. These rules make query logic reusable, and also
  composable, meaning that you can bind portions of a query's logic at
  query time.</p>
</blockquote>

<p>Rulesets are defined as a list of lists, then used as an additional input with datomic.api/q bound to the % character.</p>

<pre><code>(def rules [[(name-for-id restaurant-id?)
             [restaurant-id? :restaurant/name name?]]])

(datomic.api/q '[:find ?name . :in $ % ?restaurant-id :where
                 (name-for-id restaurant-id?)] db rules 42)

=> "Milliways"
