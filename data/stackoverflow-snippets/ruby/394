describe Engine do

  describe "#push_action play" do

    it "should do the play action" do
      # Construct the Engine with a mock thread
      mock_thread = double("Useless Thread")
      allow(mock_thread).to receive(:run)
      expect(Thread).to receive(:new).and_return(mock_thread)
      engine = Engine.new

      allow(engine).to receive(:sleep)

      # Expect that the actual play action will be processed
      expect(engine).to receive(:play)

      # push the action in the actions' list
      engine.push_action(:play)

      # Stop the thread loop when the stop() method is called
      expect(Thread).to receive(:stop).and_raise(StandardError)


      # Manually call again the start_thread() protected method with a yielded thread
      # in order to process the action
      expect(Thread).to receive(:new).and_yield
      expect {engine.send(:start_thread)}.to raise_error(StandardError)  
    end

  end
end
