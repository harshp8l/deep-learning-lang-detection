def define_proxy_call(include_private, mod, name, send, *extra)
  defn = if NAME_COMPILABLE_REGEXP.match?(name)
     ""def #{name}(*args)""
  else
     ""define_method(:'#{name}') do |*args|""
  end

  extra = (extra.map!(&:inspect) << ""*args"").join("", "".freeze)

  target = if CALL_COMPILABLE_REGEXP.match?(send)
    ""#{""self."" unless include_private}#{send}(#{extra})""
  else
    ""send(:'#{send}', #{extra})""
  end

  mod.module_eval <<-RUBY, __FILE__, __LINE__ + 1
    #{defn}
      #{target}
    end
    RUBY
end
