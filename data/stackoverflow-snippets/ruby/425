require 'observer'

# Create aliases for #changed and changed? methods from 
# Observable - basically, renaming them.
# And then call top-level methods of the first includer when
# receiving #changed / changed?
module TryingToRewriteChanged
  include ::Observable

  alias triggable_changed changed
  alias triggable_changed? changed?

  [:changed, :changed].each do |method|
    define_method(method) do |*args|
      return super(*args) unless origin_method_present?(method)
      call_origin_method(method, *args)
    end
  end

  private

  def call_origin_method(name, *args)
    method(name).super_method.super_method.call(*args)
  end

  def origin_method_present?(name)
    method(name).super_method&.super_method&.name == name
  end
end

# Custom module which has some logic in .included
module Triggerable
  def self.included(obj)
    obj.class_eval do
      include TryingToRewriteChanged
    end
  end
end

# Mock for some ActiveRecord module with 
# #changed and changed? definitions
module ActiveRecord
  module SomeActiveRecordModule
    def changed
      puts 'original changed'
    end

    def changed?
      puts 'original changed?'
    end
  end
end

# Mock for ActiveRecord::Base class
module ActiveRecord
  class Base
    include SomeActiveRecordModule
  end
end

# Example model, which need to include Triggerable module
class SomeModel < ActiveRecord::Base
  include Triggerable
end

# ActiveRecord's #changed is no more available
SomeModel.new.changed
