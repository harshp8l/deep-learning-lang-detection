 class ServicePaymentsController < ApplicationController
   before_action :authenticate_user!
   def index
     @service_payments = current_user.company.service_payments.all( :limit => 10, :order => ""id DESC"" )
   end

   def subscribe_month
     @service_payment = ServicePayment.new
     @service_payment.amount = ClienteEspecial::MONTHLY_PRICE
     @service_payment.description = t(""helpers.links.subscribe_month"") 
     @service_payment.period = 'month'  
     @service_payment.method = 'Mercado Pago'
     @service_payment.state = params[:state]  
     @service_payment.payment_id = params[:payment_id]           
     subscribe(@service_payment)
   end  

  def subscribe_year
    @service_payment = ServicePayment.new
    @service_payment.amount = ClienteEspecial::YEARLY_PRICE
    @service_payment.description = t(""helpers.links.subscribe_year"") 
    @service_payment.period = 'year'  
    @service_payment.method = 'Mercado Pago'  
    @service_payment.state = params[:state]   
    @service_payment.payment_id = params[:payment_id]      
    subscribe(@service_payment)
  end

  def subscribe(service_payment)
    service_payment.domain = current_user.domain
    if service_payment.save
      if service_payment.state =='approved' 
        execute(service_payment)
        redirect_to company_path(:id => current_user.company.id), :notice => t('helpers.labels.service_payments')+"" ""+t('helpers.labels.approved')
      else
        redirect_to company_path(:id => current_user.company.id), :notice => t('helpers.labels.service_payments')+"" ""+t('helpers.labels.cancelled')+"" (""+service_payment.state.to_s+"")""
      end
    else
      render company_path(:id => current_user.company.id), :alert  => service_payment.errors.to_a.join("", "")
    end
  end

  def execute(service_payment)
   if service_payment.period == ""month""
     @company = current_user.company
     @company.plan = ""PAGO""
     @company.initial_cycle = Time.new
     @company.final_cycle = Time.now.months_since(1)
     @company.counter = 0
     @company.limit = 1000000
     @company.save
   elsif service_payment.period == ""year""
     @company = current_user.company
     @company.plan = ""PAGO""
     @company.initial_cycle = Time.new
     @company.final_cycle = Time.now.years_since(1)
     @company.counter = 0
     @company.limit = 1000000
     @company.save
   end           
 end

 private
    # Use callbacks to share common setup or constraints between actions.
    def set_service_payment
      @service_payment = ServicePayments.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def service_payment_params
      params.require(:service_payment).permit(:amount, :description, :payment_id, :state, :period, :method, :domain)
    end

end
