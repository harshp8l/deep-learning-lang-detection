class SinglyLinkedList
  class Node
    attr_reader :value
    attr_accessor :pointer

    def initialize(value, pointer = nil)
      @value = value
      @pointer = pointer
      @count = 0
    end
  end

  attr_reader :head, :tail

  def initialize
    @head = nil
    @tail = nil
  end

  def insert(value)
    node = Node.new(value)
    @count += 1

    if @head.nil?
      @head = node
      @tail = node
    else
      @tail.pointer = node
      @tail = node
    end
  end

  def inspect
    return [] unless @head

    values = []
    node = @head

    begin
      values << node.value
      node = node.pointer
    end while node != nil

    values
  end

  def exists?(value)
    return false unless @head

    node = @head

    begin
      node = node.pointer
    end while node != nil && node.value != value

    node.nil?
  end
end
