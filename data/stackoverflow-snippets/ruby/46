require 'rubygems'
require 'zip' # rubyzip gem

class WordMailMerge
  def self.open(path, &block)
    self.new(path, &block)
  end

  def initialize(path, &block)
    @replace = {}
    if block_given?
      @zip = Zip::File.open(path)
      yield(self)
      @zip.close
    else
      @zip = Zip::File.open(path)
    end
  end

  def force_settings
    @replace[""word/settings.xml""] = %{<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<w:settings xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:r=""http://schemas.openxmlformats.org/officeDocument/2006/relationships"" xmlns:m=""http://schemas.openxmlformats.org/officeDocument/2006/math"" xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:w10=""urn:schemas-microsoft-com:office:word"" xmlns:w=""http://schemas.openxmlformats.org/wordprocessingml/2006/main"" xmlns:sl=""http://schemas.openxmlformats.org/schemaLibrary/2006/main""><w:zoom w:percent=""100""/></w:settings>}
  end

  def merge(rec)
    xml = @zip.read(""word/document.xml"")

    # replace tags with correct content

    @replace[""word/document.xml""] = xml.gsub(""{name}"", ""Tarun lalwani"")
  end

  def save(path)
    Zip::File.open(path, Zip::File::CREATE) do |out|
      @zip.each do |entry|

        if @replace[entry.name]
          # this line creates the error
          out.get_output_stream(entry.name){ |f| f.puts @replace[entry.name] }
        else
          # this line also will do it.
          # out.get_output_stream(entry.name).write(@zip.read(entry.name))
          out.get_output_stream(entry.name){ |f|  f.puts @zip.read(entry.name) }
        end
      end
    end
  end

  def close
    @zip.close
  end
end

w = WordMailMerge.open(""Option_2.docx"")
w.force_settings
w.merge({})
w.save(""Option_2_new.docx"")
