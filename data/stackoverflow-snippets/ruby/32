require ""net/http""
require 'uri'

module FetchUtil
  # Fetch a URL, with a given max bytes, and a given timeout
  def self.fetch_url url, timeout_sec=5, max_bytes=5*1024*1024
    uri = URI.parse(url)

    t0 = Time.now.to_f
    body = ''
    Net::HTTP.start(uri.host, uri.port, :use_ssl => (uri.scheme == 'https')) { |http|
      http.open_timeout = timeout_sec
      http.read_timeout = timeout_sec

      # First make a HEAD request and check the content-length
      check_res = http.request_head(uri.path)
      raise ""File too big"" if check_res['content-length'].to_i > max_bytes

      # Then fetch in chunks and bail on either timeout or max_bytes
      # (Note: timeout won't work unless bytes are streaming in...)
      http.request_get(uri.path) do |res|
        res.read_body do |chunk|
          raise ""Timeout error"" if (Time.now().to_f-t0 > timeout_sec)
          raise ""Filesize exceeded"" if (body.length+chunk.length > max_bytes)
          body += chunk
        end
      end
    }
    return body
  end
end
