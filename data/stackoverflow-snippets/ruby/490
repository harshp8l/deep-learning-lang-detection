require 'fruity'

np = 100
nl = 120

p (arr = [*["portrait"]*np, *["landscape"]*nl].shuffle).size

def sebastian(arr)
  landscapes, portraits =  arr.sort.slice_when { |a, b| a != b }.to_a
  portraits.each_slice(4).flat_map.with_index { |e, i| e << landscapes[i] }.compact
end

def keith(arr)
  ps, ls = arr.partition { |element| element == 'portrait' }
  result = []    
  loop do
    portrait_count = [4, ps.size].min
    portrait_count.times { result << ps.shift }
    landscape_count = [1, ls.size].min
    landscape_count.times { result << ls.shift }
    break if ps.empty? && ls.empty?
  end
  result
end

compare(
  Sebastian: -> { sebastian arr },
  Keith:     -> { keith arr },
  Cary:      -> { rearrange arr }
)

Running each test 64 times. Test will take about 1 second.
Cary is faster than Keith by 5x Â± 1.0
Keith is similar to Sebastian
