a = {'name' => 200, 'segment' => 'alpha',  'dc' => 'nyc', 'designation' => 'web'}
b = {'name' => 201, 'segment' => 'shared', 'dc' => 'nyc', 'designation' => 'generic'}
c = {'name' => 202, 'segment' => 'alpha', 'dc' => 'nyc', 'designation' => 'app'}
d = {'name' => 400, 'segment' => 'alpha',  'dc' => 'sfc', 'designation' => 'web'}
e = {'name' => 401, 'segment' => 'shared', 'dc' => 'sfc', 'designation' => 'web'}
f = {'name' => 402, 'segment' => 'shared', 'dc' => 'sfc', 'designation' => 'app'}
g = {'name' => 403, 'segment' => 'alpha', 'dc' => 'sfc', 'designation' => 'app'}

members = [a,b,c,d,e,f,g]

puts '=== should work in Ruby 1.8 ==='

class Array # reopen class Array
    def groupedByKey(p_key)
        new_h = {}

        self.each do | el | # el must be a hash
            key = el[p_key]
            unless new_h[key]
            then # the key does not exist, create a key - value pair
                new_h[key] = [el] # the value is an array with the whole element
            else # a key and value already exist ...
                new_h[key] << el # ... push the new value onto the array
            end
        end

        new_h
    end
end # class Array

class Hash
    def transformValues
        Hash[self.collect { | k, v | [ k, yield(v) ] } ]
    end
end

# Step by step
h1 = members.groupedByKey('segment')
puts '--- grouped by segment'
p h1
h2 = h1.transformValues { | v1 | v1.groupedByKey('dc') }
puts '--- grouped by dc'
p h2
h2 = members.groupedByKey('segment').
     transformValues { | v1 | v1.groupedByKey('dc').
        transformValues { | val | val.groupedByKey('designation') } }
puts '--- grouped by designation'
p h2

# One step.
# Note that the hash returned by each groupedByKey is immediately transformed
# (watch the dot after groupedByKey('xxx')).
h2 = members.groupedByKey('segment').
     transformValues { | v1 | v1.groupedByKey('dc').
        transformValues { | v2 | v2.groupedByKey('designation').
            transformValues { | v3 | v3.collect { | el | el['name'] } } } }
puts '--- final result ---'
p h2
