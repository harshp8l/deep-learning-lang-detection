module VirtusOverride
  def self.included(base)
    raise ""#{base.name} must include Virtus.model prior to including VirtusOverride"" unless base.included_modules.include?(Virtus::InstanceMethods)
  end

  def initialize(*attributes)
    super(construct(attributes))
  end

  private
    def construct(attributes)
      return attributes.first if valid_constructor?(attributes)
      build_attributes_from_array(attributes) 
    end 
    def valid_constructor?(attributes)
      return false unless attributes.count == 1 
      constructor = attributes.first
      constructor.is_a?(Hash) &&  
      !(attribute_set.flat_map {|a| [a.name,a.name.to_s]} & constructor.keys).empty?
    end
    def build_attributes_from_array(attributes)
      attribute_set.map(&:name).zip(attributes).to_h
    end
end 
