class DepthAccessor
  class AccessFailure < StandardError
    def initialize(val,current=nil,full=nil,depth=nil)
      super(
        if full && depth
          "Failed to find #{val.inspect} for #{current.inspect}:#{current.class} in #{full.inspect} at depth #{depth}"
        else
          val
        end
      )
    end
  end

  def initialize(target)
    raise ArgumentError, "#{target.inspect}:#{target.class} must respond_to :each_with_object" unless target.respond_to?(:each_with_object)
    @target = homogenize(target) 
  end

  def path_search(path,sep: '.',raise_on_fail: true)
    split_path = path.split(sep) 
    split_path.each_with_index.inject(@target) do |acc,(val,idx)|
      begin
        acc.is_a?(Hash) ? acc[val] : raise
      rescue StandardError
        if raise_on_fail
          raise AccessFailure.new(val,acc,@target,split_path[0..idx].join(sep)) 
        else
          nil 
        end
      end
    end
  end


  private 

    def homogenize(val)
      case val
        when Array
          val.each_with_index.with_object({}) {|(v,idx),obj| obj[idx.to_s] = homogenize(v) }
        when Hash 
          val.each_with_object({}) { |(k,v),obj| obj[k.to_s] = homogenize(v) }
        else
          val
      end
    end
end
