class Calculator
  attr_reader :report
  def initialize(parameter_1, reporting=false)
    @parameter_1 = parameter_1
    @report = Report.new(reporting)
  end
  def output 
    op1 = operation_1(report.capture(:param1,@parameter_1))
    report.capture(:op1,op1)
    op2 = report.capture(:op2) { operation_2(op1) }
    operation_3(op2)
  end
  def operation_1(param);
    param + 7
  end
  def operation_2(param); 
    param - 3
  end
  def operation_3(param); 
    param * 2
  end
end

class Report
  attr_reader :reporting, :reportables
  def initialize(reporting)
    @reporting = reporting
    @reportables = {}
  end
  def capture(key, val=nil,&block)
    warn ""Block supercedes value"" if val && block_given?
    result = block_given? ? block.call : val  
    @reportables[key] = result if reporting
    result
  end 
  def [](key)
    return 'No Reporting' unless reporting
    @reportables[key]
  end
end
