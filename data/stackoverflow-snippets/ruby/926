def print_indented(p_file, p_indent, p_text)
    p_file.print p_indent
    p_file.puts  p_text
end

    # recursively split the line at semicolon, as long as the rest is not empty
def partition_on_semicolon(p_line, p_answer, p_level)
    puts ""in partition_on_semicolon for level #{p_level} p_line=#{p_line} / p_answer=#{p_answer}""
    first_segment, semi, rest = p_line.partition(';')
    p_answer << first_segment + semi
    partition_on_semicolon(rest.lstrip, p_answer, p_level + 1) unless rest.empty?
end

lines = IO.readlines('input.txt')

# Compute initial indentation, the indentation of the first line.
# This is to preserve the spaces which are in the input.
m = lines.first.match(/^( *)(.*)/)
initial_indent = ' ' * m[1].length
# initial_indent = '' # uncomment if the initial indentation needs not to be preserved
puts ""initial_indent=<#{initial_indent}> length=#{initial_indent.length}""
level       = 1
indentation = '  '

File.open('newtext.txt', 'w') do | output_file |
    lines.each do | line |
        line        = line.chomp
        line        = line.lstrip # remove trailing spaces
        puts ""---<#{line}>""
        next_indent = initial_indent + indentation * (level - 1)

        case
        when line =~ /^file/ && line.count(';') > 1
            level = 1 # restore, remove this if files can be indented
            next_indent = initial_indent + indentation * (level - 1)
            # split in count fragments
            fragments = []
            partition_on_semicolon(line, fragments, 1)
            puts '---fragments :'
            puts fragments.join('/')
            print_indented(output_file, next_indent, fragments.first)

            fragments[1..-1].each do | fragment |
                print_indented(output_file, next_indent + indentation, fragment)
            end

            level += 1
        when line.include?(' do ')
            fragment1, _fdo, fragment2 = line.partition(' do ')
            print_indented(output_file, next_indent, ""#{fragment1} do"")
            print_indented(output_file, next_indent + indentation, fragment2)
            level += 1
        else
            level -= 1 if line =~ /end;/
            print_indented(output_file, next_indent, line)
        end
    end
end
