require 'date'

directories = {
  ""directory1"" => 'dir1',
  ""directory2"" => 'dir2'
}

exclude_folder         = 'sample'
@file_output           = '.'
@date_today            = Date.today.to_s
@output_file_name      = 'directory_list'
@output_file_extension = '.csv'

# stores subdirectory contents into an array
def store_directories(directory, folder_to_exclude)
  puts ""in store_directories directory=#{directory.inspect} folder_to_exclude=#{folder_to_exclude}""
  current_directory = Dir.getwd
  puts Time.now.to_s + ""  >  "" +  ""Updating search directory...""

  # changes working directory to the directory variable
  Dir.chdir(directory)

  # outputs only subdirectories with a creation date of older than 24 hours, except for folders names 'test'

  puts Time.now.to_s + ""  >  "" +  ""Gathering subdirectories...""

  subdir_list = Dir.glob(""*"").map { | file | File.realpath(file) }
  puts ""all files : subdir_list=#{subdir_list}""
  puts ""directory + folder_to_exclude=#{directory + folder_to_exclude}"" # nonsense

  subdir_list = subdir_list.reject do | file |
         not File.directory?(file) \
      && File.mtime(file) < Time.now - 86400 \
      && (not file == folder_to_exclude)
  end
  puts ""after reject : subdir_list=#{subdir_list}""

    # Restore the directory that was current when entering the method.
    # Without it, the next chdir will start from the directory left by the previous chdir.
  Dir.chdir(current_directory)
  puts ""subdir_list=#{subdir_list.inspect}""
  subdir_list
end

# checks to see if there are any directories in the array
def directory_check(directory_list, save_to_file, today_date, output_file, output_extension)

  if directory_list.empty? == false

    # changes the working directory to the file output directory for the file
    Dir.chdir(save_to_file) # <----------------- problem !!!!

    # writes the array contents into a new file
    file_name = output_file + ""_"" + today_date + output_extension
    puts Time.now.to_s + ""  >  "" +  ""Saving contents to:  "" + file_name
    File.open(file_name, ""a+"") do |f| 
      directory_list.each { |element| f.puts(element) }
    end
  else
    puts Time.now.to_s + ""  >  "" +  ""This directory does not contain any subdirectories that are older than 24 hours""
  end
end 

def repeat(directory, exclude_folder)
  puts ""in repeat directory=#{directory} exclude_folder=#{exclude_folder}""
  subdir_list_contents = store_directories(directory, exclude_folder)
  directory_check(subdir_list_contents, @file_output, @date_today, @output_file_name, @output_file_extension)
end

directories.each { | _key, directory | repeat(directory, exclude_folder) }
