require_relative 'trips1' # contains $G={""TRIP-10122""=>...

def dfs(vertex, original_visited_arr, frequency)
  puts ""enters dfs with vertex=#{vertex}, vis arr=#{original_visited_arr}, frequency=#{frequency}""
  return nil unless $G[vertex] # <--------------------
  #original_visited_arr is passed as reference
  visited_arr = original_visited_arr.clone
  #sorting colors frequency for evenly distribution
  frequency = frequency.sort_by {|k, v| v}.to_h
  used_colors = []

#  puts $G.keys.sort
  $G[vertex].each do |adj_vertex|
    puts ""adj_vertex 1=#{adj_vertex}""
    used_colors << visited_arr[adj_vertex]
  end
  puts ""used_colors=#{used_colors}""

  #checking the colors which can be used (total colors-colors used by adjacent nodes)
  available_colors = frequency.keys - used_colors
  puts ""available_colors=#{available_colors}""
  #if there is no color available to be filled in the node, backtrack!
  if available_colors.length==0
    return nil
  end

  #iterate through the available colors to check which one solves the problem
  available_colors.each do |color|
    puts ""color=#{color}, visited_arr[vertex]=#{visited_arr[vertex].inspect}, vertex=#{vertex}""
    visited_arr[vertex] = color
    frequency[color]+=1
    res = true

    #use recursion over each node that is adjacent to the current node
    $G[vertex].each do |adj_vertex|
      puts ""adj_vertex 2=#{adj_vertex}, visited_arr[adj_vertex]=#{visited_arr[adj_vertex].inspect}""
      unless visited_arr[adj_vertex] # <--------------------
        adj_vertex_visited_arr = dfs(adj_vertex, visited_arr, frequency)
        puts ""dfs returned #{adj_vertex_visited_arr.inspect}""
        if ! adj_vertex_visited_arr
          res=false
          break
        end
        visited_arr = adj_vertex_visited_arr
      end
    end
    puts ""res=#{res}""
    if res
      puts ""about to return #{visited_arr}""
      return visited_arr
    end
    frequency[color] -= 1
    visited_arr[vertex] = ""0""
  end
  return nil
end

vertex=""TRIP-10065""

visited_arr = {}
frequency = {""1"" => 0, ""2"" => 0, ""3"" => 0, ""4"" => 0, ""5"" => 0, ""6"" => 0}
visited_arr =  dfs(vertex, visited_arr, frequency)
