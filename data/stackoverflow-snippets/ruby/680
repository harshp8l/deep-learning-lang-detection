#navid
def sequence(n)
  [true, false].repeated_permutation(n).to_a
end

def breakdown4(string)
  guide = sequence(string.length-1)
  arr = []
  guide.each do |i|
    s = string.dup
    counter = 0
    i.each do |j|
      if j
        s.insert(counter+1, "" "")
        #p counter
        counter += 2
      else
        counter += 1
      end
    end
    arr.push(s)
  end
  arr
end


#tom
def powerset(arr)
  a = [[]] 
  for i in 0...arr.size do
    len = a.size; j = 0;
    while j < len
      a << (a[j] + [arr[i]])
      j+=1
    end
  end
  a
end

def breakdown(string)
  indexes_lists = powerset((1..string.length-1).to_a)
  indexes_lists.map(&:reverse).map do |indexes_list|
    result = string.dup
    indexes_list.each { |i| result.insert(i, "" "")}
    result
  end
end

#stefan
def stefan1 s
  [s[0]].product(*s[1..-1].chars.flat_map { |c| [[' ', ''], [c]] }).map(&:join)
end

def stefan2 s
  s[1..-1].chars.reduce([s[0]]) { |m, c| m.product([' ', ''], [c]) }.map(&:join)
end

def stefan3 s
  [''].product(*([[' ', '']] * s.size.pred)).map { |j| s.gsub('') { j.shift } }
end

def stefan4 s
  (0...2**s.size).step(2).map { |i| s.gsub(/(?!^)/) { ' ' * (1 & i /= 2) } }
end

def stefan5 s
  [' ', ''].repeated_permutation(s.size - 1).map { |j| s.chars.zip(j).join }
end

#cary
def cary s
  s[1..-1].each_char.reduce([s[0]]) do |arr, c|
    space_c = ' ' + c 
    arr.flat_map { |str| [str + c, str + space_c] }
  end
end

#cary2
def cary2 s
  arr = (1..s.size-1).to_a
    #=> [1, 2, 3]
  s.size.times.flat_map do |n|
    arr.combination(n).map do |locs|
      scopy = s.dup
      locs.reverse_each { |idx| scopy.insert(idx, ' ') }
      scopy
    end
end  
end
