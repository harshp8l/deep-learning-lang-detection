class ThreadsPool
  attr_accessor :threads, :limit
  def initialize(limit = 1, sleep_time = 0.1)
    @limit      = limit
    @threads    = []
    @sleep_time = sleep_time
  end

  def can_add_thread?
    @threads.size < @limit
  end

  def wait_for_spot
    until can_add_thread?
      clean_threads
      sleep @sleep_time
    end
  end

  def add_thread(thread)
    thread.abort_on_exception = true
    @threads << thread
  end

  def clean_threads
    @threads.delete_if { |t| !t.alive? }
  end

  def join_all
    @threads.each(&:join)
  end
end

stack_asgs = [5,6,7]

thread_pool = ThreadsPool.new(2)
stack_asgs.each do |this_asg|
  thread_pool.wait_for_spot
  puts "this_asg -> #{this_asg}"
  thread = Thread.new { sleep this_asg ; puts "end of sleep #{this_asg} | #{DateTime.now}" }
  thread_pool.add_thread(thread)
end
thread_pool.join_all
