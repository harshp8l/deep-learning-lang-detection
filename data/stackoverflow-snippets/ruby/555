    def recursiveFunction(array, row, col, original_path)
        current = array[row][col]
        row-1 >= 0  ? up = array[row-1][col] : up = nil 
        row+1 < array.length ? down = array[row+1][col] : down = nil 
        col-1 >= 0 ? left = array[row][col-1] : left = nil 
        col+1 < array[row].length ? right = array[row][col+1] : right = 
        nil 

        path = original_path.dup
        if !path.include?(current) && current.to_i > path[-1].to_i 
        path.push(current)
        # p path
        options = []
        if up && up.to_i > current.to_i 
            options << recursiveFunction(array, (row-1), col, path)
        end
        if down && down.to_i > current.to_i 
            options << recursiveFunction(array, (row+1), col, path)
        end
        if left && left.to_i > current.to_i 
            options << recursiveFunction(array, row, (col-1), path)
        end
        if right && right.to_i > current.to_i 
            options << recursiveFunction(array, row, (col+1), path)
        end

        best_path = options.sort_by{ |p| p.length }.last
        path += best_path.drop(path.length) if best_path
        end

        path 
    end
