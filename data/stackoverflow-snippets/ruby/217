# Overriding getters and setters to handle multiple primary key types on
  # this polymorphic association ( String and Integer )

  # Setters
  def likeable=(value)
    if !value.nil? && value.id.is_a?(String)
      self[:likeable_id] = nil
      self[:likeable_id_string] = value.id
      self[:likeable_type] = value.class.name
    else
      self[:likeable_id_string] = nil
      super(value)
    end
  end

  # in case likeable_type and likeable_id are updated seperately. I believe
  # this is done in FE (rather than passing an object to .likeable)
  def likeable_id=(value)
    if !value.nil? && value.is_a?(String)
      self[:likeable_id] = nil
      self[:likeable_id_string] = value
    else
      self[:likeable_id_string] = nil
      super(value)
    end
  end

  # Getters
  def likeable
    if self.likeable_id
      return super
    elsif !self.likeable_type.nil?
      return self.likeable_type.constantize.find(likeable_id_string)
    else
      return nil
    end
  end
