class Message < ApplicationRecord
  belongs_to :conversation, touch: true
end

class Conversation < ApplicationRecord
  has_many :messages, -> { order(created_at: :desc) }
  belongs_to :sender, foreign_key: :sender_id, class_name: 'User'
  belongs_to :recipient, foreign_key: :recipient_id, class_name: 'User'
end

class User < ApplicationRecord
  has_many :conversations, -> (user) { unscope(where: :user_id).where('conversations.sender_id = ? OR conversations.recipient_id = ?', user.id, user.id) }
end

class ConversationsController < ApplicationController
  def index
    @user = User.find_by(email: params[:email])

    # "joins(:messages)" allows only retrieving conversations having at least one message, and does not include conversation with 0 message
    # now ordering by `updated_at: :asc` because `Message belongs_to :conversation, touch: true`, in which Conversation's updated_at will be automatically "touched"/updated whenever the associated Messages are updated/created.
    @conversations = @user.conversations.joins(:messages).order(updated_at: :asc).distinct

    json_response = @conversations.as_json(
      only: [:id, :updated_at],
      include: {
        sender: {
          only: [:id, :first_name, :last_name, :email]
        },
        recipient: {
          only: [:id, :first_name, :last_name, :email]
        },
        messages: {
          only: [:body, :created_at]
        }
      }
    )

    render json: json_response
  end
end
