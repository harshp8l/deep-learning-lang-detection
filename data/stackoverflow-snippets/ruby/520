 class ExpectWrapper
  def initialize(_expect, _recorder, _description)
    @expect = _expect
    @recorder = _recorder
    @description = _description
  end

  def to(matcher, failure_message=nil)
    begin
      expect_ret = @expect.to(matcher, failure_message) # test

      # for tests that aggregate failures
      if expect_ret.instance_of?(TrueClass)
        @recorder.record(matcher.actual, matcher.description, @description)
      else
        @recorder.record_error(matcher.actual, matcher.description, failure_message, @description)
      end
      expect_ret
    rescue RSpec::Expectations::ExpectationNotMetError => e
      # for test that do not aggregate failures
      @recorder.record_error(matcher.actual, matcher.description, failure_message, @description)
      raise e
    end

  end
end

class Recorder
  def self.start
    @@data = []
    return Recorder.new
  end

  def record(expect, data, description)
    @@data << { :pass => true,  :expect => expect, :value => data, :description => description }
    self
  end

  def record_error(expect, data, failure_message, description)
    @@data << { :pass => false, :expect => expect, :value => data, :message => failure_message,  :description => description }
    self
  end

  def self.data
    @@data
  end

  def expect(object, value, description = "")
    return ExpectWrapper.new(object.expect(value), self, description)
  end
end
