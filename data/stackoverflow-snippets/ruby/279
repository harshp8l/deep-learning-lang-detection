class ManualEncryption
  class << self
    attr_accessor :configuration

    def config
      @configuration ||= Configuration.new
    end

    def aes
      return @aes if @aes
      @aes = OpenSSL::Cipher.new(config.algo) # ""AES-256-ECB""
      @aes
    end

    def decodedKey
      return @decodedKey if @decodedKey
      @decodedKey = Base64.decode64(config.key_string) # ""mySecretString""
    end

    def configure
      yield(config)
      raise 'Algo not specified' unless config.algo
      raise 'key not specified' unless config.key_string
    end

    def encrypt(value)
      raise 'No configuration done' unless config.algo && config.key_string
      aes_perform('encrypt', value)
    end

    def decrypt(value)
      raise 'No configuration done' unless config.algo && config.key_string
      return value unless value
      aes_perform('decrypt', value)
    end

    def aes_perform(status, value)
      aes.reset
      if status.eql?('encrypt')
        aes.encrypt
        aes.key = decodedKey
        aes_val = aes.update(value) + aes.final
        Base64::encode64(aes_val)
      else
        aes.decrypt
        aes.key = decodedKey
        decoded_value = Base64::decode64(value)
        aes.update(decoded_value) + aes.final
      end
    end
  end

  class Configuration
    attr_accessor :algo, :key_string
    attr_reader :aes
  end
end
