#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw/first reduce/;
use Benchmark qw/ cmpthese /;

my $file = 'bench_reduce.txt';

my $cache = sub {
    local $/ = '';
    open my $fh, '<', $file;
    my %c; # cache
    my $max = reduce {($c{$a}//=f_32($a)) > ($c{$b}//=f_32($b)) ? $a : $b} <$fh>;
    ($max) = $max =~ /\A(.+)/;
    #print $max;
};

my $reduce = sub {
    local $/ = '';
    open my $fh, '<', $file;
    my $max = reduce {f_32($a) > f_32($b) ? $a : $b} <$fh>;
    ($max) = $max =~ /\A(.+)/;
    #print $max;
};


sub f_32 {
    $_[0] =~ /^32 (\S+)/m;
    return $1;  
}

my $tshiono = sub {
    my ($maxline, $firstline);
    my $max = 0;
    my $target = 32;
    open my $fh, '<', $file;
    while (<$fh>) {
        chop;
        if (/^\d+:/) {                  # treat the 1st line
            $firstline = $_;            # keep the 1st line
        } elsif (/^(\d+) +([\d.]+)/) {  # treat other lines in the block
            if ($1 == $target && $2 > $max) {
                $max = $2;              # update the highest value
                $maxline = $firstline;  # and the 1st line of the block
            }
        }
    }   
};

my $_7stud = sub {
    open my $INFILE, '<', $file;
    my %results;

    {
        local $/ = '';  #input record separator => paragraph mode

        while (my $block = <$INFILE> ) {
            my @lines = split /\n/, $block;
            my $line32 = first {/^32/} @lines;

            (undef, my $ranking_num) = split ' ', $line32;
            $results{$ranking_num} = $lines[0];
        }
    }

    close $INFILE;

    my @sorted_nums = sort{$a <=> $b} keys %results;

    my $biggest_num = $sorted_nums[-1];

};

cmpthese  (-1,
    {
        w_o_cache => $reduce,
        w_cache => $cache,
        tshiono => $tshiono,
        '7stud' => $_7stud
    });
