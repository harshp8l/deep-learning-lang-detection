# Prints a warning and then waits for a
# timeout. The timeout is pausable.
#
# If the user presses the spacebar, the 
# internal countdown for the timeout is 
# paused. It can be resumed by pressing
# spacebar once again.
#
# @param $1 timeout in seconds
# @param $2 warning message
warningWithPausableTimeout() {
  local remainingSeconds=""$1""
  local warningMessage=""$2""
  echo -n ""$warningMessage $remainingSeconds seconds (Press <SPACE> to pause)""
  while (( ""$remainingSeconds"" > 0 ))
  do
    readStartSeconds=""$SECONDS""
    pressedKey=""""
    IFS= read -n1 -t ""$remainingSeconds"" pressedKey
    nowSeconds=""$SECONDS""
    readSeconds=$(( nowSeconds - readStartSeconds ))
    remainingSeconds=$(( remainingSeconds - readSeconds ))
    if [ ""$pressedKey"" == "" "" ]
    then
      echo """"
      echo -n ""Paused ($remainingSeconds seconds remaining, press <SPACE> to resume)""
      pressedKey=""""
      while [ ""$pressedKey"" != "" "" ]
      do
        IFS= read -n1 pressedKey
      done
      echo """"
      echo ""Resumed""
    fi
  done
  echo """"
}

warningWithPausableTimeout 10 ""Program will end in""
echo ""end.""
