#!/usr/bin/perl -w
#
################################################################################

use strict;

my($inputfile);
my($outputfile);
my($bufferfile) = ""/tmp/bufferfile.tmp"";
my($startpattern);
my($endpattern);

#################################################
# Subroutines
#################################################
sub show_usage
{
    print(""Takes 4 arguments:\n"");
    print(""   1) the name of the file to process.\n"");
    print(""   2) the name of the output file.\n"");
    print(""   3) the start pattern.\n"");
    print(""   4) the end pattern.\n"");
    exit;
}

sub close_outfiles
{
    close(OUTPUTFILE);
    close(BUFFERFILE);
}

sub cat_buffer_to_output
{
    # Open outputfile in append mode
    open(OUTPUTFILE,"">>"",""$outputfile"") or die ""ERROR: could not open outputfile $outputfile (append mode)!"";
    # Open bufferfile in read mode
    open(BUFFERFILE,""$bufferfile"") or die ""ERROR: could not open bufferfile $bufferfile (read mode)!"";
    # Dump the content of the buffer to the output
    print OUTPUTFILE while <BUFFERFILE>;
    close_outfiles();
    # Reopen the bufferfile, with > to truncate it
    open(BUFFERFILE,"">"",""$bufferfile"") or die ""ERROR: could not open bufferfile $bufferfile (write mode)!"";
}

#################################################
# Main
#################################################

# Manage arguments
if (@ARGV != 4)
{
    show_usage();
}
else
{
    $inputfile = $ARGV[0];
    $outputfile = $ARGV[1];
    $startpattern = $ARGV[2];
    $endpattern = $ARGV[3];
}

# Open the files, the first time
open(INPUTFILE,""$inputfile"") or die ""ERROR: could not open inputfile $inputfile (read mode)!"";
open(OUTPUTFILE,"">"",""$outputfile"") or die ""ERROR: could not open outputfile $outputfile (write mode)!"";
open(BUFFERFILE,"">"",""$bufferfile"") or die ""ERROR: could not open bufferfile $bufferfile (write mode)!"";

my($sendtobuffer) = 0;

while (<INPUTFILE>)
{
    # If I see the endpattern, empty the buffer file into the output file
    if ($_ =~ /$endpattern/)
    {
        print BUFFERFILE;
        cat_buffer_to_output();
    }
    else
    {
        # if sendtobuffer, the start pattern was seen at least once, print to BUFFERFILE
        if ($sendtobuffer)
        {
            print BUFFERFILE;
        }
        else
        {
            # if I see the start pattern, print to buffer and print future lines to buffer as well
            if ($_ =~ /$startpattern/)
            {
                print BUFFERFILE;
                $sendtobuffer = 1;
            }
        }
    }
}

# Close files
close(INPUTFILE);
close_outfiles();

# cleanup
unlink($bufferfile);
