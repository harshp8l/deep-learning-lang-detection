$ cat shuffler.awk
# actual shuffle function
# shuffles the values in ""array"" in-place, from indices ""left"" to ""right"".
# required for all of the shuf() functions below

function __shuffle(array, left, right,    r, i, tmp) {
  # loop backwards over the elements
  for (i=right; i>left; i--) {
    # generate a random number between the start and current element
    r = int(rand() * (i - left + 1)) + left;

    # swap current element and randomly generated one
    tmp = array[i];
    array[i] = array[r];
    array[r] = tmp;
  }
}
## usage: shuf(s, d)
## shuffles the array ""s"", creating a new shuffled array ""d"" indexed with
## sequential integers starting with one. returns the length, or -1 if an error
## occurs. leaves the indices of the source array ""s"" unchanged. uses the knuth-
## fisher-yates algorithm. requires the __shuffle() function.
function shuf(array, out,    count, i) {
  # loop over each index, and generate a new array with the same values and
  # sequential indices
  count = 0;
  for (i in array) {
    out[++count] = array[i];
  }

  # seed the random number generator
  srand();

  # actually shuffle
  __shuffle(out, 1, count);

  # return the length
  return count;
}

NR==FNR{
for(i=1;i<=9;i++){fp[NR]=fp[NR] OFS $i}
for(i=10;i<=17;i++){sp[NR]=sp[NR] OFS $i}
}
END{
shuf(sp,spnew)
for(i=1;i<=NR;i++)
 print fp[i] spnew[i]
}
