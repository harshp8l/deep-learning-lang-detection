FAKE_ROOT=./fake_root

copy_to_jail() {
    d=$(dirname $1)
    mkdir -p $FAKE_ROOT/$d
    cp -p $1 $FAKE_ROOT/$d
}

jail_files() {

    # All of these commands are used at least once by one of the
    # scripts under test.

    commands=""
        /bin/cat
        /bin/chmod
        /bin/date
        /bin/mkdir
        /bin/rm
        /usr/bin/awk
        /usr/bin/cut
        /usr/bin/tee
    ""

    local OPTIND script wrappers
    while getopts ""s:w:"" o
    do
        case ""${o}"" in
        s)
            script=""${OPTARG}""
            ;;
        w)
            wrappers=""${wrappers} ${OPTARG}""
            ;;
        esac
    done
    shift $((OPTIND-1))

    # Without /bin/sh the jail doesn't work.
    # I didn't spend time to figure out why.

    for f in /bin/sh $script $wrappers $commands
    do
        copy_to_jail $f
    done

    # We figure out all the library files we need to build
    # a working jail just by trying to start it, observing which file
    # it says is missing, copying the missing file, and repeating
    # until it starts.

    case $(uname -s) in
    Darwin)
        # Copy Bash 4 and GNU Sed.
        cp -p /usr/local/bin/bash $FAKE_ROOT/bin
        cp -p /usr/local/bin/gsed ""$FAKE_ROOT/bin/sed""

        initial_libs=$(
            for f in /usr/local/bin/bash
            do
                otool -L $f | awk 'NR > 1 {print $1}'
            done | sort -u)
        initial_libs=""/usr/lib/dyld $initial_libs""

        for f in $initial_libs
        do
            copy_to_jail $f
        done

        who_i_am=$(whoami)

        set -o pipefail
        while true
        do
            missing_lib=$(sudo chroot -u $who_i_am $FAKE_ROOT /bin/sh -c echo 2>&1 | \
                awk '/dyld: Library not loaded:/ {print $5}')
            [ ""$?"" -eq 0 ] && break
            copy_to_jail $missing_lib
        done
        ;;

    *)
        echo ""Platform $(uname -s) not supported""
        exit 1
        ;;
    esac
}

clean_up_jail() {
    rm -rf $FAKE_ROOT
}
