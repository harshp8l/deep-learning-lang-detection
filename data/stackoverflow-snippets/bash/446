$ cat parse-local-vars.sh
#!/usr/bin/env bash
function explain_vars() {
  echo ""Explaining vars '$@':"" >&2
  for _var in ""$@""; do
    printf ""  $_var: '${!_var}'\n"" >&2
  done
}

function parse_params() (
  #
  # Stores given parameters in defined local variables _vars.
  # Last variable will be treated as an array and 
  # remaining parameters will be stored therein.
  #

  ## Define local variables
  local _vars=(v1 v_empty_double_quote v_spaced_double_quote v_empty_single_quote v_spaced_single_quote v2_1 v3 v4 args) 
  local ${_vars[@]}

  ## Make sure we assign parameters to variables
  [ ${#_vars[@]} -gt 0 ] \
    || return 1

  _args_pos=$(( ${#_vars[@]}-1 ))
  _args_counter=0
  local p
  for ((p=1; p<=$#; ++p)); do
     ## Read variables from input:
     if [ $p -le $_args_pos ]; then
       #printf -v ""${_vars[p-1]}"" '%s' ""${!p}""
       printf -v ""${_vars[p-1]}"" ""${!p}""  
     else
       #printf -v ""${_vars[_args_pos]}[$_args_counter]"" '%s' ""${!p}""
       printf -v ""${_vars[_args_pos]}[$_args_counter]"" ""${!p}""  # Without the '%s' assigning empty variable to an array does not work
       _args_counter=$(( _args_counter+1 ))
     fi
  done
  explain_vars ""${_vars[@]}""
  echo ""exlaining array args[@]: '${args[@]}'""
  for _v in ""${args[@]}""; do
    echo ""   >'$_v'""
  done
)

params_to_test=(one """" ""  "" '' '  ' ""two dot one"" ""three"" ""four"")
parse_params ""${params_to_test[@]}"" ""${params_to_test[@]}""
