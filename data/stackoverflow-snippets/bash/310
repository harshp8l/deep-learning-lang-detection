#!/usr/bin/fish
# Fish function to import bash aliases
#
# Copyright 2018 <hoijui.quaero@gmail.com>, licensed under the GPL-3.0+
#
# This script is based on a script from Malte Biermann,
# see: https://glot.io/snippets/efh1c4aec0
#
# WARNING: There is no guarantee that the imported aliases work the same way
#   as they do in bash, so be cautious!
#
# Usage:
#   import_bash_aliases          # imports (or reimports) all bash aliases into fish functions, permanently
#   import_bash_aliases clean    # removes all fish functions previously imported by this script from bash aliases

function import_bash_aliases --description 'Converts bash aliases to .fish functions.\nThis might be called repeatedly, and will not override functions that are already defined in fish, except they are merely an older import from this script.'

    set -l FISH_FUNCTIONS_DIR ~/.config/fish/functions
    set -l BASH_IMPORTS_DIR_NAME bash-imports
    set -l BASH_IMPORTS_DIR $FISH_FUNCTIONS_DIR/$BASH_IMPORTS_DIR_NAME
    set -l README_FILE $BASH_IMPORTS_DIR/README.md

    if test "$argv[1]" = "clean"
        for fun_file in (find $FISH_FUNCTIONS_DIR -maxdepth 1 -name '*.fish')
            set -l imp_fun_file $BASH_IMPORTS_DIR/(basename $fun_file)
            if test -e $imp_fun_file ; and test (readlink --canonicalize $fun_file) = (realpath $imp_fun_file)
                set -l fun_name (basename $fun_file '.fish')
                echo "removing imported bash alias/function $fun_name"
                rm $imp_fun_file
                and rm $fun_file
                and functions --erase $fun_name
            end
        end
        rm $README_FILE ^ /dev/null
        rmdir $BASH_IMPORTS_DIR ^ /dev/null
        return 0
    end

    set -l SOURCE_FILES ~/.bashrc ~/.bash_aliases
    mkdir -p $BASH_IMPORTS_DIR
    echo -e "# Bash alias imports\n\nsee `$argv[0]`\n\nWARNING: Do NOT manually edit files in this directory. instead, copy them to $FISH_FUNCTIONS_DIR (replacing the symbolic link that already exists there), and edit that new file.\nIf you edit the files in this dir, it will be replaced on the next (re)import from bash aliases." \
        > $README_FILE
    set -l UNUSED_STUB_MSG "The bash alias corresponding to this function was NOT imported, because a corresponding function already exists at %s\n"
    set -l AUTO_IMPORT_WARNING "# WARNING Do NOT edit this file by hand, as it was auto-generated from a bash alias, and may be overwritten in the future. please read {$README_FILE}"

    function _fish_func_exists
        set -l fun_name $argv[1]
        # This also detects in-memory functions
        functions --query $fun_name
        # This also detects script files in the functions dir
        # that do not contain a function wiht the same name
        or test -e "$FISH_FUNCTIONS_DIR/$fun_name.fish"
        return $status
    end
    function _is_link_to
        set -l file_link $argv[1]
        set -l file_target $argv[2]
        test -e $file_target
        and test (readlink --canonicalize $file_link) = (realpath $file_target)
        return $status
    end

    for source_file in $SOURCE_FILES
        for a in (cat $source_file | grep "^alias")
            set -l a_name (echo $a | sed -e 's/alias \([^=]*\)=.*/\1/')
            set -l a_command (echo $a | sed -e 's/alias \([^=]*\)=//' -e 's/[ \t]*#[^\'\"]\+$//')
            set -l fun_file "$FISH_FUNCTIONS_DIR/$a_name.fish"
            set -l imp_fun_file "$BASH_IMPORTS_DIR/$a_name.fish"
            # Check whether the function already exists.
            # If so, we skip importing it, unless it is just a link to a previously imported function.
            if _fish_func_exists $a_name; and not _is_link_to $fun_file $imp_fun_file
                set_color red
                printf "%20s: %-25s\n" "skipping (exists)" $a_name
                set_color normal
                #printf $UNUSED_STUB_MSG $fun_file > $imp_fun_file
            else
                set_color green
                printf "%20s: %-25s -> %s\n" "(re-)importing" $a_name $a_command
                set_color normal
                # remove the link, in case of re-importing
                rm $fun_file ^ /dev/null

                # write the function file
                echo "#!/usr/bin/fish" > $imp_fun_file
                echo "\
$AUTO_IMPORT_WARNING

function $a_name -d 'bash alias "$a_name" import'
    bash -c $a_command' '\$argv''
end
" \
                    >> $imp_fun_file

                # make the script executable
                chmod +x $imp_fun_file
                # .. and re-create it as local symbolic link
                # to the function in the imports dir
                ln --symbolic --relative $imp_fun_file $fun_file
            end
        end
    end
    # (re-)load all the functions we just defined
    exec fish
end
