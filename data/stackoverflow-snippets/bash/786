# don't use bash-only (IMHO ugly) function syntax
get_user_info () {
    local userToShow=$1

    # No need for braces around variable names unless disambiguation is required
    finger ""$userToShow""

    echo ""lots of ugly asterisks""
    echo ""users logged in as ${userToShow}""

    # avoid grep | grep | awk
    # field specifier can probasbly be made more strict
    # (match only $2 instead of $0)?
    parentPIDs=$(ps -ef |
        awk -v user=""$userToShow"" 'NR>1 && ($0 ~ ""su - "" user) {
                printf "" %s \\|"",parentpid}
            {parentpid=$3}
            END{printf "" %s\n"", parentpid}')

    # Would be better if parentPIDs was a proper regex
    # Assumes you are looking for the PPID in column 3
    parentUsers=$(ps -ef |
        awk -v pids=""$parentPIDs"" 'parentPIDs ~$3 {print $1}' |
        # prefer sort -u over sort | uniq
        sort -u)

    while IFS= read -r line ; do
        printf ""%s: "" ""$line""
        # No need to capture output just to echo it
        finger ""$line"" | awk -F"":"" 'NR==1{print $3}'
    done <<< ""${parentUsers}""

    echo ""Another ugly lot of asterisks""
    # Again, the regex can probably be applied to just one field
    ps -ef --forest |
        awk -v re=""sshd:|-ksh|$userToShow""  '$0 !~ re { next }
            root==1{print """"}
            NR>1{print line}
            {line=$0;root=($1==""root"" || $3==1) ? 1 : 0}'
}

export -f get_user_info

show_users () {
     # Avoid complex [[ -z ... ]]; use defaults with ${var-""value if unset""}
     # Mark these as local to avoid polluting global namespace
     local watchtime={$1-1}
     local userToShow=${2-mydefaultuser}
     # no need to export these variables

     echo ""$mycommand""
     echo ""Setting up watch for user ${userToShow}""

     watch -n $watchtime --no-title bash -c get_user_info ""$userToShow""
}
