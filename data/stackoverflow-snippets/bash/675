#! /usr/bin/env python

from __future__ import print_function

import argparse
import collections
import sys

import ply.lex

t_COMMENT = r'\#.*'
t_BACKSLASHED = r'\\([\\{}])'
t_WORD = '[A-Za-z0-9_]+'
t_STRING = '(""[^""]*"")|' ""('[^']*)'""
t_LB = '{'
t_RB = '}'
t_WHITE = '[ \t]+'
t_REST = '.'

tokens = [
   'COMMENT',
   'BACKSLASHED',
   'WORD',
   'STRING',
   'LB',
   'RB',
   'WHITE',
   'REST',
   'NEWLINE',
]

def t_NEWLINE(t):
    r'\n+'
    t.lexer.lineno += len(t.value)
    return t

# This never happens because '.' matches anything but newline and
# we have a newline rule; but if we don't define it, ply complains.
def t_error(t):
    print(""Illegal character '%s'"" % t.value[0])
    t.lexer.skip(1)

# Build the lexer
LEXER = ply.lex.lex()

def fill(tlist, howmany):
    ""build up token list - returns False if the list is all non-tokens""
    while len(tlist) < howmany:
        tlist.append(LEXER.token())
    return tlist[0] is not None

def nth_is(tlist, offset, tok_type, tok_value=None):
    ""a sleazy kind of parser lookahead""
    fill(tlist, offset + 1)
    tok = tlist[offset]
    if tok is None:
        return False
    if tok.type != tok_type:
        return False
    if tok_value is not None and tok.value != tok_value:
        return False
    return True

TEST_DATA = '''\
# a comment - gets copied
server {
    stuff;
    more { } stuff;
    this is not a brace \{ because it is backslashed;
    ""and these strings }"";
    'do not close the server } either';
}
this gets copied;
'''

def main():
    ""main""

    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--test', action='store_true')
    parser.add_argument('inputfile', nargs='?', type=argparse.FileType('r'),
                        default=sys.stdin)

    args = parser.parse_args()
    if args.test:
        LEXER.input(TEST_DATA)
    else:
        LEXER.input(args.inputfile.read())

    # Tokenize; copy lines through except when dealing
    # with the first ""server"" definition
    looking_for_server = True
    copying = True
    eat_white_space_and_newline = False
    brace_depth = 0
    tlist = collections.deque()
    while fill(tlist, 1):
        if tlist[0].type == 'LB':
            brace_depth += 1
        elif tlist[0].type == 'RB':
            if brace_depth > 0:
                brace_depth -= 1
                # If we went from 1 to 0 and are in
                # non-copy mode, resume copying, but eat
                # one white-space-and-newline
                if brace_depth == 0 and not copying:
                    copying = True
                    eat_white_space_and_newline = True
                    tlist.popleft() # eat the }
                    continue
        if looking_for_server:
            check = 0
            if tlist[0].type == 'WHITE':
                fill(tlist, 2)
                check = 1
            else:
                check = 0
            if nth_is(tlist, check, 'WORD', 'server'):
                # server followed by spaces and {, or by { => stop copying
                if nth_is(tlist, check + 1, 'LB') or (
                        nth_is(tlist, check + 1, 'WHITE') and
                        nth_is(tlist, check + 2, 'LB')):
                    copying = False
                    looking_for_server = False
                if check > 0:
                    tlist.popleft() # toss white space at 0 now
            # We'll increment brace-depth when we actually consume
            # the brace.
        if copying:
            if not eat_white_space_and_newline or \
                    tlist[0].type not in ('NEWLINE', 'WHITE'):
                print(tlist[0].value, end='')
            if tlist[0].type == 'NEWLINE':
                eat_white_space_and_newline = False
        tlist.popleft()

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit('\nInterrupted')
