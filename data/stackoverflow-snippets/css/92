 //Width and height
 var w = 600;
 var h = 250;
 var curentStep = 0
 var dataset = [{
     key: 0,
     value: 5
   }, //dataset is now an array of objects.
   {
     key: 1,
     value: 10
   }, //Each object has a 'key' and a 'value'.
   {
     key: 2,
     value: 13
   },
   {
     key: 3,
     value: 19
   },
   {
     key: 4,
     value: 21
   },
   {
     key: 5,
     value: 25
   },
   {
     key: 6,
     value: 22
   },
   {
     key: 7,
     value: 18
   },
   {
     key: 8,
     value: 15
   },
   {
     key: 9,
     value: 13
   },
   {
     key: 10,
     value: 11
   },
   {
     key: 11,
     value: 12
   },
   {
     key: 12,
     value: 15
   },
   {
     key: 13,
     value: 20
   },
   {
     key: 14,
     value: 18
   },
   {
     key: 15,
     value: 17
   },
   {
     key: 16,
     value: 16
   },
   {
     key: 17,
     value: 18
   },
   {
     key: 18,
     value: 23
   },
   {
     key: 19,
     value: 25
   }
 ];

 var xScale = d3.scaleBand()
   .domain(d3.range(dataset.length))
   .rangeRound([0, w])
   .paddingInner(0.05);

 var yScale = d3.scaleLinear()
   .domain([0, d3.max(dataset, function(d) {
     return d.value;
   })])
   .range([0, h]);

 //Define key function, to be used when binding data
 var key = function(d) {
   return d.key;
 };

 function zoomFunction() {
   if (d3.event.sourceEvent.deltaY > 0) {
     if (curentStep > 0) {
       curentStep--
     }
   } else {
     if (curentStep < 25) {
       curentStep++
     }
   }
   stepChange()
 }
 var zoom = d3.zoom()
   .on(""zoom"", zoomFunction);
 //Create SVG element
 var svg = d3.select(""body"")
   .append(""svg"")
   .attr(""width"", w)
   .attr(""height"", h)
   .call(zoom);

 //Create bars
 svg.selectAll(""rect"")
   .data(dataset, key)
   .enter()
   .append(""rect"")
   .attr(""x"", function(d, i) {
     return xScale(i);
   })
   .attr(""y"", function(d) {
     return h - yScale(d.value);
   })
   .attr(""width"", xScale.bandwidth())
   .attr(""height"", function(d) {
     return yScale(d.value);
   })
   .attr(""fill"", function(d) {
     return ""rgb(0, 0, "" + (d.value * 10) + "")"";
   });

 //Create labels
 svg.selectAll(""text"")
   .data(dataset, key)
   .enter()
   .append(""text"")
   .text(function(d) {
     return d.value;
   })
   .attr(""text-anchor"", ""middle"")
   .attr(""x"", function(d, i) {
     return xScale(i) + xScale.bandwidth() / 2;
   })
   .attr(""y"", function(d) {
     return h - yScale(d.value) + 14;
   })
   .attr(""font-family"", ""sans-serif"")
   .attr(""font-size"", ""11px"")
   .attr(""fill"", ""white"");


 function stepChange() {
   d3.select(""input"").node().value = curentStep
   svg.selectAll(""rect"")
     .attr(""fill"", function(d) {
       return ""rgb(0, 0, "" + (d.value * 10) + "")"";
     })
     .filter(function(d) {
       return d.value <= curentStep;
     })
     .attr(""fill"", ""red"");
   //console.log(d3.select(""#curentStep"").node().text = c)
   d3.select(""#curentStep"").node().textContent = curentStep
   //d3.select(""#curentStep"").node().innerHtml = curentStep
 }


 //On change, update styling
 d3.select(""input"")
   .on(""change"", function() {
     var threshold = d3.select(this).node().value;
     if (threshold > curentStep) {
       curentStep++
     } else if (threshold < curentStep) {
       curentStep--
     }
     console.log(""threshold = "", threshold);
     stepChange()
   });
