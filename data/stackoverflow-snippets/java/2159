public interface Battleship {
    public void hit(Point shot);
    public List<Point> getCoordinates();
    public boolean isSinked();
}

public class BattleshipPart {
    private boolean hit;
    private Point coordinate;

    // getters and setters 
}

public abstract class AbstractBattleship implements Battleship {

    // these are for direction in constructors
    public static int NORTH = 1;
    public static int EAST = 2;
    public static int SOUTH = 3;
    public static int WEST = 4;

    protected List<BattleshipPart> parts;

    public void hit(Point shot) {
        return parts.stream()
            .findFirst(part -> part.coordinate.equals(shot))
            .ifPresent(part -> part.setHit(true));
    }

    public List<Point> getCoordinates() {
        return parts.stream()
            .map(part -> part.getCoordinate())
            .collect(Collectors.toList());
    }

    public boolean isSinked() {
        return parts.stream()
            .allMatch(BattleshipPart::isHit);
    }
}

public final class SmallBattleship extends AbstractBattleship {

    public SmallBattleship(Point start, int direction) {
        // create parts or throw exception if parameters weren't valid
    }
}
