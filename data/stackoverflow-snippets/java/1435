package game.checkers;

import java.awt.*;
import javax.swing.JPanel;

public class GameBoard extends JPanel {
  private static final long serialVersionUID = 5777309661510989631L;
  private static final Color[] DEFAULT_TILE_COLORS = new Color[] { Color.LIGHT_GRAY, Color.WHITE };

  private BoardZone[][] zones;
  private Color[] tileColors;
  private int rows;
  private int cols;

  public int getRows() {
    return rows;
  }

  public void setRows(int rows) {
    this.rows = rows;
  }

  public int getCols() {
    return cols;
  }

  public void setCols(int cols) {
    this.cols = cols;
  }

  public GameBoard(int rows, int cols, Color[] tileColors) {
    super();

    this.rows = rows;
    this.cols = cols;
    this.tileColors = tileColors;

    initialize();
  }

  public GameBoard(int rows, int cols) {
    this(rows, cols, DEFAULT_TILE_COLORS);
  }

  protected void initialize() {
    this.setLayout(new GridLayout(rows, cols, 0, 0));

    generateZones();
  }

  private void generateZones() {
    this.setLayout(new GridLayout(rows, cols, 0, 0));

    this.zones = new BoardZone[rows][cols];
    for (int row = 0; row < rows; row++) {
      for (int col = 0; col < cols; col++) {
        this.add(zones[row][col] = new BoardZone());
      }
    }
  }

  public void placeChecker(Checker checker, int row, int col) {
    zones[row][col].add(checker);
  }

  public Checker getChecker(int row, int col) {
    return (Checker) zones[row][col].getComponent(0);
  }

  public void removeChecker(Checker checker, int row, int col) {
    zones[row][col].remove(checker);
  }

  public void paintComponent(Graphics g) {
    super.paintComponent(g);

    int tileWidth = this.getWidth() / cols;
    int tileHeight = this.getHeight() / rows;

    for (int row = 0; row < rows; row++) {
      for (int col = 0; col < cols; col++) {
        int x = col * tileWidth;
        int y = row * tileHeight;

        g.setColor(tileColors[(row + col) % 2]);
        g.fillRect(x, y, tileWidth, tileHeight);
      }
    }
  }
}
