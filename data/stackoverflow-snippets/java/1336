String input = ""<CD>\n""
        + ""    <TITLE>Empire Burlesque</TITLE>\n""
        + ""    <ARTIST>Bob Dylan</ARTIST>\n""
        + ""    <COUNTRY>USA</COUNTRY>\n""
        + ""    <COMPANY>Columbia</COMPANY>\n""
        + ""    <PRICE>10.90</PRICE>\n""
        + ""    <YEAR>1985</YEAR>\n""
        + ""</CD>"";
XMLInputFactory inputFactory = XMLInputFactory.newInstance();
inputFactory.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);
XMLStreamReader reader = inputFactory.createXMLStreamReader(new ByteArrayInputStream(input.getBytes()));

List<List<Node>> currentChildren = new ArrayList<>();
currentChildren.add(new ArrayList<>(1));
String text = null;
int depth = 0;
final Insets insets = new Insets(0, 0, 0, 20);
boolean hasChildren = false;

while (reader.hasNext()) {
    switch (reader.next()) {
        case XMLStreamConstants.START_ELEMENT:
            depth++;
            hasChildren = false;
            currentChildren.add(new ArrayList<>());
            break;
        case XMLStreamConstants.CHARACTERS:
            text = reader.getText();
            break;
        case XMLStreamConstants.END_ELEMENT:
            String suffix = reader.getName().getLocalPart() + "">"";
            if (hasChildren) {
                // element group
                VBox vbox = new VBox(new Text(""<"" + suffix));
                for (Node n : currentChildren.get(depth)) {
                    VBox.setMargin(n, insets);
                }
                vbox.getChildren().addAll(currentChildren.get(depth));
                vbox.getChildren().add(new Text(""</"" + suffix));
                currentChildren.get(depth - 1).add(vbox);
            } else {
                // text element
                TextField textField = new TextField(text);
                textField.setMinWidth(Region.USE_PREF_SIZE);
                textField.setMaxWidth(Region.USE_PREF_SIZE);

                // keep size of TextField large enough to contain all the text
                ChangeListener<String> listener = new ChangeListener<String>() {

                    private final Text measureElement = new Text();

                    {
                        measureElement.setFont(Font.font(""monospaced""));
                    }

                    @Override
                    public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                        measureElement.setText(newValue);
                        textField.setPrefWidth(measureElement.getLayoutBounds().getWidth() + 2);
                    }

                };
                listener.changed(null, null, text);
                textField.textProperty().addListener(listener);
                HBox hbox = new HBox(new Text('<' + suffix), textField, new Text(""</"" + suffix));
                currentChildren.get(depth - 1).add(hbox);
                hasChildren = true;
                text = null;
            }
            currentChildren.remove(depth);
            depth--;
            break;
    }
}

VBox root = (VBox) currentChildren.get(0).get(0);
root.getStyleClass().add(""xml-editor"");
