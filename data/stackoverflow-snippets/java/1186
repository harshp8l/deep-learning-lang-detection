val sequence = listOf(
            Pair(0, ""A""),  // delay
            Pair(3, ""B""),  // immediately
            Pair(4, ""C""),  // immediately
            Pair(5, ""A""),  // skip by next A
            Pair(6, ""A""),  // delay
            Pair(9, ""A""),  // skip by next B
            Pair(10, ""B""), // immediately
            Pair(11, ""C"")  // immediately
    )

    val startTime = LocalDateTime.now()
    Observable
            .from(sequence)
            .flatMap { tm ->
                Observable.just(tm.second)
                        .delay(tm.first.toLong(), TimeUnit.SECONDS)
            }
            .compose { o ->
                o.publish { f ->
                    f.concatMap { v ->
                        if (v == ""A"")
                            Observable.just(v).delay(2, TimeUnit.SECONDS).takeUntil(f)
                        else
                            Observable.just(v)
                    }
                }
            }
            .toBlocking()
            .subscribe {
                        val currentTime = LocalDateTime.now()
                        val sec = currentTime.toEpochSecond(ZoneOffset.UTC) - startTime.toEpochSecond(ZoneOffset.UTC)
                        println(""$sec - $it"")
                    }
