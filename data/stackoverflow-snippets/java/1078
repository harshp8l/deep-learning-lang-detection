public static int[] BFS (int [][] graph) {

    //you do not know what is the path length so use a List
    List<Integer> output = new ArrayList<>();
    int start=0;

    int v=graph.length;
    boolean visited[]=new boolean[v];//indexing done from 1 to n
    LinkedList<Integer> queue=new LinkedList<>();
    visited[start]=true;
    queue.add(start);
    while(queue.size()!=0)
    {
        int x=queue.remove();
        System.out.print(x+" ");
        output.add(x); //add to output 

        for (int i=1; i < v; i++) {
            if((graph[x][i] == 1) && (!visited[i]))
            {
                queue.add(i);
                visited[i]=true;
            }
        }
    }
    //convert back to array
    return output.stream().mapToInt(Integer::intValue).toArray();

    /*if you can't use java 8 stream, convert output to array using: 
      int[] ret = new int[output.size()];
      int i = 0;
      for (int e : output) { ret[i++] = e; }
      return ret;
    */
}
