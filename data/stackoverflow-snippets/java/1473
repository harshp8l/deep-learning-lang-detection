import org.apache.logging.log4j.core.Filter;
import org.apache.logging.log4j.core.Layout;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.appender.AbstractAppender;
import org.apache.logging.log4j.core.config.plugins.Plugin;
import org.apache.logging.log4j.core.config.plugins.PluginAttribute;
import org.apache.logging.log4j.core.config.plugins.PluginElement;
import org.apache.logging.log4j.core.config.plugins.PluginFactory;
import org.apache.logging.log4j.core.layout.PatternLayout;

import java.io.Serializable;

@Plugin(name = "Basic", category = "Core", elementType = "appender", printObject = true)
public class BasicAppender extends AbstractAppender {

    private static volatile BasicAppender instance;

    public BasicAppender(final String name, final Filter filter, final Layout<? extends Serializable> layout){
        super(name, filter, layout);
    }

    @PluginFactory
    public static BasicAppender createAppender(@PluginAttribute("name") String name,
                                               @PluginElement("Layout") Layout layout,
                                               @PluginElement("Filters") Filter filter){
        if (layout == null){
            layout = PatternLayout.createDefaultLayout();
        }
        return new BasicAppender(name, filter, layout);
    }

    public static BasicAppender getInstance(){
        return instance;
    }

    @Override
    public void append(final LogEvent event){
        //custom actions
    }
}
