import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.*;

public final class JsonNormalized {

    private static final Logger LOGGER = LoggerFactory.getLogger(JsonNormalized.class);

    private JsonNormalized() {
    }

    public static String normalize(String json) {
        return serialize(deserialize(json));
    }

    private static String serialize(Object object) {
        try {
            return getObjectMapper().writeValueAsString(object);
        } catch (JsonProcessingException e) {
            LOGGER.error(""Error serializing json"", e);
            throw new RuntimeException(e);
        }
    }

    private static Object deserialize(String json) {
        try {
            JsonObject jsonObject = getObjectMapper().readValue(json, JsonObject.class);
            return jsonObject.getData();
        } catch (IOException e) {
            LOGGER.error(""Error deserializing json"", e);
            throw new RuntimeException(e);
        }
    }

    private static ObjectMapper getObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setVisibility(mapper.getSerializationConfig().getDefaultVisibilityChecker()
                .withFieldVisibility(JsonAutoDetect.Visibility.ANY)
                .withGetterVisibility(JsonAutoDetect.Visibility.NONE)
                .withSetterVisibility(JsonAutoDetect.Visibility.NONE)
                .withCreatorVisibility(JsonAutoDetect.Visibility.NONE));
        mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
        mapper.configure(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS, false);
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.setSerializationInclusion(Include.NON_NULL);
        mapper.disable(SerializationFeature.INDENT_OUTPUT);
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
        mapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);

        mapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);
        mapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);

        SimpleModule module = new SimpleModule();
        module.addDeserializer(JsonObject.class, new JSONCustomDeserializer());
        mapper.registerModule(module);
        return mapper;
    }

}

class JsonObject {

    final Object data;

    JsonObject(Object data) {
        this.data = data;
    }

    public Object getData() {
        return data;
    }
}

class JSONCustomDeserializer extends JsonDeserializer<JsonObject> {

    @Override
    public JsonObject deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
        ObjectCodec oc = jp.getCodec();
        JsonNode node = oc.readTree(jp);
        return new JsonObject(toObject(node));
    }

    public Object toObject(JsonNode node) {

        if (node.fields().hasNext()) {
            Map<String, Object> mapResult = new TreeMap<>();
            for (Iterator<Map.Entry<String, JsonNode>> it = node.fields(); it.hasNext(); ) {
                Map.Entry<String, JsonNode> entryChildren = it.next();
                String childrenKey = entryChildren.getKey();
                JsonNode children = entryChildren.getValue();
                mapResult.put(childrenKey, children);
            }
            return new JsonObject(mapResult);
        } else if (node.elements().hasNext()) {
            List<Object> listResult = new ArrayList<Object>();
            for (Iterator<JsonNode> it = node.elements(); it.hasNext(); ) {
                JsonNode children = it.next();
                listResult.add(children);
            }
            Collections.sort(listResult, (lhs, rhs) -> {
                String lJson = JsonNormalized.serialize(lhs);
                String rJson = JsonNormalized.serialize(rhs);
                return lJson.compareTo(rJson);
            });

            return listResult;
        } else {
            return node.asText();
        }
    }
}
