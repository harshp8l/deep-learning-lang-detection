import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.IntStream;

public class StreamExample {

    public static void main(String[] args) {
        List<Item> itemA = new ArrayList<>();
        List<Item> itemB = new ArrayList<>();

        itemA.add(new Item("A"));
        itemA.add(new Item("a", false));
        itemA.add(new Item("B"));
        itemA.add(new Item("C"));
        itemA.add(new Item("b", false));
        itemA.add(new Item("c", false));
        itemA.add(new Item("D"));
        itemA.add(new Item("e", false));

        itemB.add(new Item("C"));
        itemB.add(new Item("D"));
        itemB.add(new Item("B"));
        itemB.add(new Item("A"));

        System.out.println("BEFORE: ");
        System.out.println("A: ");
        itemA.forEach(System.out::print);
        System.out.println("\nB: ");
        itemB.forEach(System.out::print);

        AtomicInteger index = new AtomicInteger();
        itemA.stream().filter(a -> a.isVisible)
                .forEach(a -> {
                    a.id = itemB.get(index.getAndIncrement()).id;
                });

        System.out.println("\nAFTER: ");
        System.out.println("A: ");
        itemA.forEach(System.out::print);


    }
}


class Item {
    String id;
    boolean isVisible = true;

    public Item(String id) {
        this.id = id;
    }

    public Item(String id, boolean isVisible) {
        this.id = id;
        this.isVisible = isVisible;
    }

    @Override
    public String toString() {
        return " {'" + id + '\'' +
                '}';
    }
}
