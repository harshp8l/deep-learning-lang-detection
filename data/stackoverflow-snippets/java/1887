public static int decode(String enc, int[] asciiChars) {
    /* Base Cases */
    if (enc.length() < 3) {
        /* PRINTS OUT A POSSIBLE CHAR ARRANGEMENT */
        for (int k = 0; k < asciiChars.length; k++) {
            System.out.printf(""(%3d)"", asciiChars[k]);
        }
        System.out.printf(""\n"");
        /* End */

        if (enc.length() == 2)
            return 1;
        if (enc.length() == 1)
            return 0;
        if (enc.length() == 0)
            return 1;
    }

    /* Obtain first two or three digits */
    int ascii2, ascii3;
    ascii2 = Integer.parseInt(enc.substring(0, 2));
    ascii3 = Integer.parseInt(enc.substring(0, 3));

    /* Recursive cases */
    int recurs2 = 0;
    int recurs3 = 0;
    if (ascii2 >= 10 && ascii2 <= 99) {
        int[] asciiChar2 = concat(asciiChars, ascii2);
        recurs2 = decode(enc.substring(2,enc.length()), asciiChar2);
    }
    if (ascii3 >= 100 && ascii3 <= 126) {
        int[] asciiChar3 = concat(asciiChars, ascii3);
        recurs3 = decode(enc.substring(3,enc.length()), asciiChar3);
    }
    return recurs2 + recurs3;
}

public static int[] concat(int[] asciiChars, int newChar) {
    // Initialize new array with combined size of the two input arrays
    int[] asciiChar1 = new int[asciiChars.length + 1];

    // Keep index counter for concatenated array, increment each time
    // when you put each element into the concatenation
    int index = 0;
    for (int k = 0; k < asciiChars.length; k++) { // First, from str1
        asciiChar1[index] = asciiChars[k];
        index++;
    }
    asciiChar1[index] = newChar;

    return asciiChar1;
}
