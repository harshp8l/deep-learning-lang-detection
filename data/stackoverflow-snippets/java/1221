public class MazeGuiPane extends Application {

    private int gridSize = 20;
    int col, row;

    @Override
    public void start(Stage primary) {

        StreetMap map = new StreetMap();
        map.makeGrid(gridSize);
        GridPane grid = new GridPane();
        for (col = 0; col < 20; col++) {
            for (row = 0; row < 20; row++) {
                grid.add(map.getGridArray()[row][col].getNode(), col, row);
            }
        }

        primary.setScene(new Scene(grid));
        primary.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}

//represents a single square
class Square{
    private Label label;
    private int squareSize = 20;
    private static final String empty = " ",  wall = "W"; //better use enum
    private SimpleStringProperty squareText = new SimpleStringProperty();

    Square(){ this(empty); }

    Square(String txt){
        squareText.set(txt);
        label = new Label();
        label.textProperty().bind(squareText);
        label.setStyle("-fx-border-color: black");
        label.setPrefSize(squareSize,squareSize);
    }

    void toggle() {
        squareText.set(squareText.get().equals(empty) ?  wall : empty);
    }

    void addMouseHandler() {
        label.setOnMouseClicked(new EventHandler<MouseEvent>(){
            @Override
            public void handle(MouseEvent t) { toggle();}
        });
    }

    Node getNode() {return label; }
}

//represents grid of squares
class StreetMap {

    private Square[][] gridArray;

    public void makeGrid(int size) {
        gridArray = new Square[size][size];
        for (int col = 0; col < size; col++) {
            for (int row = 0; row < size; row++) {
                Square square = new Square();
                gridArray[row][col] = square;
                //add handler to those who need to respond to mouse clicks
                if((row > 0) && (row < (size -1)) ) {
                    if((col > 0) && (col < (size -1)) ) {
                        square.addMouseHandler();
                    }
                }
            }
        }
    }

    Square[][] getGridArray() { return gridArray; }
}
