import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class ElementChecker {
    public static void main(String[] args) {

        String[] fixed = {""R"", ""O"", ""O"", ""J""};
        String[] notFixed = {""J"", ""J"", ""O"", ""R""};

        int presentAtCorrectPosition = 0;
        int presentAtIncorrectPosition = 0;

        Map<String, List<Integer>> fixedData = new LinkedHashMap<>(fixed.length);

        for (int i = 0; i < fixed.length; i++) {
            if (!fixedData.containsKey(fixed[i])) {
                List<Integer> positions = new ArrayList<>();
                positions.add(i);
                fixedData.put(fixed[i], positions);
            } else {
                fixedData.get(fixed[i]).add(i);
            }
        }
        System.out.println(fixedData);

        List<String> alreadyTraversed = new ArrayList<>();

        for (int i = 0; i < notFixed.length; i++) {
            if (fixedData.containsKey(notFixed[i]) && alreadyTraversed.indexOf(notFixed[i]) == -1) {
                if (fixedData.get(notFixed[i]).contains(i)) {
                    presentAtCorrectPosition++;
                } else {
                    alreadyTraversed.add(notFixed[i]);
                    presentAtIncorrectPosition++;
                }
            }
        }

        System.out.println(""presentAtCorrectPosition = "" + presentAtCorrectPosition);
        System.out.println(""presentAtIncorrectPosition = "" + presentAtIncorrectPosition);
    }
}
