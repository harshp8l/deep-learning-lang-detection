class Main {

    /* Inserts a node into a unique, alphabetical list */
    public static No inserirOrdem(No cabeca, String elemento) {
          if (elemento == null) { return cabeca; }
          if (cabeca == null) { return new No(elemento); }

          No novoNo = new No(elemento);
          No actual = cabeca;
          No anterior = null;

          // valid entry to add at beginning of list
          if (cabeca.item.compareTo(elemento) > 0) {
              novoNo.prox = cabeca;
              return novoNo;
          }

          while (actual != null && actual.item.compareTo(elemento) < 0) {
              anterior = actual;
              actual = actual.prox;
          }

          // valid entry to add at end of list
          if (actual == null) { 
              anterior.prox = novoNo;
              return cabeca;
          }

          // valid entry to add in middle of list
          if (actual.item.compareTo(elemento) > 0) { 
              if (anterior == null) {
                  cabeca = novoNo;
              }
              else {
                  anterior.prox = novoNo;
                  novoNo.prox = actual;
              }
          }

          return cabeca;
    }

    /* Prints a linked list */
    public static void p(No head) {
        No c = head;

        while (c != null) {
            System.out.print(c.item + " -> ");
            c = c.prox;
        }

        System.out.println("\n");
    }

    public static void main(String[] args) {
        No head = new No("a");
        No b = new No("b");
        No d = new No("d");
        No e = new No("e");
        head.prox = b;
        b.prox = d;
        d.prox = e;

        System.out.println("Original:");
        p(head);

        System.out.println("Try to add duplicates:");
        head = inserirOrdem(head, "a");
        head = inserirOrdem(head, "b");
        head = inserirOrdem(head, "d");
        p(head);

        System.out.println("Try to add c in the middle:");
        head = inserirOrdem(head, "c");
        p(head);

        System.out.println("Try to add f at the end:");
        head = inserirOrdem(head, "f");
        p(head);

        System.out.println("Try to add h at the end:");
        head = inserirOrdem(head, "h");
        p(head);

        System.out.println("Try to add g in the middle:");
        head = inserirOrdem(head, "g");
        p(head);

        head = null;

        System.out.println("Null head, add a:");
        head = inserirOrdem(head, "a");
        p(head);

        System.out.println("Try to add null str:");
        head = inserirOrdem(head, null);
        p(head);

        head = new No("c");

        System.out.println("Try to add duplicate:");
        head = inserirOrdem(head, "c");
        p(head);

        System.out.println("Try to add a at beginning of list:");
        head = inserirOrdem(head, "a");
        p(head);

        System.out.println("Try to add z at end of list:");
        head = inserirOrdem(head, "z");
        p(head);

        System.out.println("Try to add f at middle of list:");
        head = inserirOrdem(head, "f");
        p(head);
    }
}

class No {
    No prox;
    String item;

    No (String elemento) {
        item = elemento;
        prox = null;
    }
}
