// given f : (A -> B) -> (A -> B), calculate g : A -> B
// such that f(g) = g, making g the fixed point of f,
// and then call g on an A
static <A, B> B fix(Function<Function<A, B>, Function<A, B>> f, A a) {
  return f.apply(a2 -> fix(f, a2)).apply(a);
}
public class Animal
    public void askForLocation() {
        Function<Function<Void, Void>, Function<Void, Void>> step = continu -> ign -> {
            System.out.println(""In animal"");
            System.out.println(""Street?"");
            String street = new Scanner(System.in).nextLine();
            if(street.equals(""""))
                return continu.apply(null);
            else
                System.out.println(""Street: "" + street);
            return null;
        };
        fix(step, null);
        // we write step in terms of open recursion; it gets an argument
        // continu that it can call to ""recurse"" and fix feeds step to itself.
        // that is; fix lets you write recursion indirectly.
    }        
}
