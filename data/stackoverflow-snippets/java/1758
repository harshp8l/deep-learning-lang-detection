/**
 * Adds contextual information to exceptions thrown by a {@Code CompletionStage}.
 *
 * @param <T> the type of value returned by the {@code CompletionStage}
 * @return a {@code Function} to pass to {@code CompletionStage.exceptionally()}
 */
public static <T> Function<Throwable, T> addContext()
{
    if (MODE == RunMode.RELEASE)
        return throwable -> rethrowException(throwable);
    AsynchronousException context = new AsynchronousException();
    return throwable ->
    {
        context.initCause(throwable);
        return rethrowException(context);
    };
}

/**
 * Rethrows a {@code Throwable}, wrapping it in {@code CompletionException} if it isn't already wrapped.
 *
 * @param <T>       the return type expected by the caller
 * @param throwable a Throwable
 * @return an undefined value (the method always throws an exception)
 * @throws CompletionException wraps {@code throwable}
 */
public static <T> T rethrowException(Throwable throwable)
{
    if (throwable instanceof CompletionException)
        throw (CompletionException) throwable;
    if (throwable == null)
        throwable = new NullPointerException(""throwable may not be null"");
    // According to https://stackoverflow.com/a/49261367/14731 some methods do not wrap exceptions
    throw new CompletionException(throwable);
}

/**
 * Thrown when an asynchronous operation fails. The stacktrace indicates who triggered the operation.
 */
public final class AsynchronousException extends RuntimeException
{
    private static final long serialVersionUID = 0L;

    public AsynchronousException()
    {
        super("""");
    }
}
