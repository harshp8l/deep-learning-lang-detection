public interface Status {
   Status next();
   Status previous(); 
   String representation();
}

public class PlaneLanding implements Status {
    private final Status previous;

    public PlaneLanding(Status previous) {
        this.previous = previous;
    }

    @Override
    public String representation() {
        return ""Plane is landing"";
    }

    @Override
    public Status next() {
        return null;
    }

    @Override
    public Status previous() {
        return previous;
    }
}

public class PlaneFlying implements Status {
    private final Status previous;

    public PlaneFlying(final Status previous) {
        this.previous = previous;
    }

    @Override
    public String representation() {
        return ""Plane is flying"";
    }

    @Override
    public Status next() {
        return new PlaneLanding(this);
    }

    @Override
    public Status previous() {
        return previous;
    }
}

class PlaneSimlulator {
   public static void main(final String... args) {
      Status planeStatus = new PlaneTakingOff();

      do {
         System.out.println(planeStatus.representation());
         planeStatus = planeStatus.next();
      } while (planeStatus != null);
   }
}
