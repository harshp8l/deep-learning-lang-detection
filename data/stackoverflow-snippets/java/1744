import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Enumeration;

import java.io.*;
import java.net.*;

public class InpitData implements SerialPortEventListener {

  SerialPort serialPort;
  /** The port we're normally going to use. */
  private static final String PORT_NAMES[] = {
          /*""/dev/tty.usbserial-A9007UX1"", // Mac OS X
          ""/dev/ttyACM0"", // Raspberry Pi
          ""/dev/ttyUSB0"", // Linux*/
          ""COM10"", // Windows
  };
  /**
   * A BufferedReader which will be fed by a InputStreamReader
   * converting the bytes into characters
   * making the displayed results codepage independent
   */
  private BufferedReader input;
  /** The output stream to the port */
  private OutputStream output;
  /** Milliseconds to block while waiting for port open */
  private static final int TIME_OUT = 2000;
  /** Default bits per second for COM port. */
  private static final int DATA_RATE = 9600;

  public void initialize() {
    // the next line is for Raspberry Pi and
    // gets us into the while loop and was suggested here was suggested http://www.raspberrypi.org/phpBB3/viewtopic.php?f=81&t=32186
    System.setProperty(""gnu.io.rxtx.SerialPorts"", ""COM10"");

    CommPortIdentifier portId = null;
    Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();

    //First, Find an instance of serial port as set in PORT_NAMES.
    while (portEnum.hasMoreElements()) {
      CommPortIdentifier currPortId = (CommPortIdentifier) portEnum.nextElement();
      for (String portName : PORT_NAMES) {
        if (currPortId.getName().equals(portName)) {
          portId = currPortId;
          break;
        }
      }
    }

    if (portId == null) {
      System.out.println(""Could not find COM port."");
      return;
    }

    try {
      serialPort = (SerialPort) portId.open(this.getClass().getName(),
              TIME_OUT);

      // set port parameters
      // задаем параметры порта
      serialPort.setSerialPortParams(DATA_RATE,
              SerialPort.DATABITS_8,
              SerialPort.STOPBITS_1,
              SerialPort.PARITY_NONE);

      input = new BufferedReader(new InputStreamReader(serialPort.getInputStream()));
      output = serialPort.getOutputStream();

      serialPort.addEventListener(this);
      serialPort.notifyOnDataAvailable(true);
    } catch (Exception e) {
      System.err.println(e.toString());
    }
  }

  public synchronized void close() {
    if (serialPort != null) {
      serialPort.removeEventListener();
      serialPort.close();
    }
  }

  public synchronized void serialEvent(SerialPortEvent oEvent) {
    if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
      try {
        String inputLine = input.readLine();

        System.out.println(inputLine);

        BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));
        DatagramSocket clientSocket = new DatagramSocket();

        InetAddress IPAddress = InetAddress.getByName(""375333752202.dyndns.mts.by"");
        byte[] sendData = new byte[1024];
        byte[] receiveData = new byte[1024];
        String sentence = input.readLine();//inFromUser.readLine();

        System.out.print(""Вы ввели: "" + sentence);

        sendData = sentence.getBytes();
        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 4445);
        clientSocket.send(sendPacket);
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        clientSocket.receive(receivePacket);
        String modifiedSentence = new String(receivePacket.getData());
        System.out.println("" FROM SERVER:"" + modifiedSentence);
        //System.out.println(inputLine);
      } catch (Exception e) {
        System.err.println(e.toString());
      }
    }
  }

  public static void main(String[] args) throws Exception {
    InpitData main = new InpitData();
    main.initialize();
    Thread t = new Thread() {
      public void run() {
        try {Thread.sleep(1000000);

        } catch (InterruptedException ie) {}
      }
    };
    t.start();
    System.out.println(""Started"");
  }
}
