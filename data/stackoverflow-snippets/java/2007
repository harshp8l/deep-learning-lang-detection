public int[] getCoordinates(float XR_1, float YR_1, float XR_2, float YR_2,
                             float XR_3, float YR_3, int R1, int R2, int R3) {
    //define the positions
    int XU_1 = 0, YU_1 = 0, XU_2 = 0, YU_2 = 0, XU, YU;
    //define variables and arrays that needed
    float D0[][] = new float[17][50];
    float D1[][] = new float[17][50];
    float f[][] = new float[17][50];
    float fmin_1 = 0;
    float fmin_2 = 0;
    //define columns and rows
    int i, j;
    //Y goes from 0 to 49
    for(j=0; j<=49; j++){
        //X goes from 0 to 16
        for(i=0; i<=16; i++){
            D0[i][j] = (float) (Math.pow((i-XR_1),2) + Math.pow((j-YR_1),2) - Math.pow(R1,2));
            D1[i][j] = (float) (Math.pow((i-XR_2),2) + Math.pow((j-YR_2),2) - Math.pow(R2,2));
            f[i][j] = (float) Math.sqrt(Math.pow(D0[i][j], 2) + Math.pow(D1[i][j], 2));
            //get two position where f[i][j] are the minimum
            //initialise the minimum two positions
            if(i==0 & j==0){
                fmin_1 = f[i][j];
                XU_1 = i;
                YU_1 = j;
            }
            else if(j==0 & i==1){
                if(f[i][j] < fmin_1){
                    fmin_2 = fmin_1;
                    fmin_1 = f[i][j];
                    XU_2 = XU_1;
                    XU_1 = i;
                    YU_2 = YU_1;
                    YU_1 = j;
                }
                else {
                    fmin_2 = f[i][j];
                    XU_2 = i;
                    YU_2 = j;
                }
            }
            else{
                if(f[i][j] < fmin_1){
                    fmin_2 = fmin_1;
                    fmin_1 = f[i][j];
                    XU_2 = XU_1;
                    XU_1 = i;
                    YU_2 = YU_1;
                    YU_1 = j;
                }
                else if(f[i][j] < fmin_2){
                    fmin_2 = f[i][j];
                    XU_2 = i;
                    YU_2 = j;
                }
            }
        }
    }
