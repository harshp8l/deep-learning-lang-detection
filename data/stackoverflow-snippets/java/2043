static class DigitalClock extends JPanel {
    private static final long serialVersionUID = 1L;
    public static String stringTime;

    private static String correctionHour, correctionMinute, correctionSecond;
    private static int second;
    private static Calendar now;

    DigitalClock()
    {
        Timer t1 = new Timer(1000, e -> repaint());

        t1.start();

        now = Calendar.getInstance();
    }

    public static void setStringTime() {
        //stringTime = xyz;
        now = Calendar.getInstance();

        if(hour != 0)
            now.set(Calendar.HOUR_OF_DAY, hour);
        if(minute != 0)
            now.set(Calendar.MINUTE, minute);

        hour = now.get(Calendar.HOUR_OF_DAY);
        minute = now.get(Calendar.MINUTE);
        second = now.get(Calendar.SECOND);

        correctionHour = (hour < 10) ? "0" : "";
        correctionMinute = (minute < 10) ? "0" : "";
        correctionSecond = (second < 10) ? "0" : "";

        stringTime = correctionHour + hour + ":" + correctionMinute+ minute + ":" + correctionSecond + second;
    }

    public static void setStringTime(int _hour, int _minute) {
        hour = _hour;
        minute = _minute;
    }

    public int findMinimumBetweenTwoNumbers(int a, int b) {
        return (a <= b) ? a : b;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        setStringTime();
        //setStringTime(correctionHour + hour + ":" + correctionMinute+ minute + ":" + correctionSecond + second);
        g.setColor(Color.BLACK);
        int length = findMinimumBetweenTwoNumbers(this.getWidth(),this.getHeight());
        Font myFont = new Font("SansSerif", Font.PLAIN, length / 5);
        g.setFont(myFont);
        g.drawString(stringTime, length /6, length/2);
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(200, 200);
    }

}
