#include <vector>
#include <iostream>
//dummy class
struct Card{
    int x; 
};

class Hand{
 public: 
    Hand(){}
    std::vector<Card> handV;
    virtual ~Hand(){}        
    virtual void getCard(Card k) 
    {
        handV.push_back(k);
    }
    virtual void showHand() 
    {
        for(std::vector<Card>::const_iterator it = handV.begin(); 
            it != handV.end(); 
            it++) 
        std::cout << it->x << "" "";
    }
};
class HandMaster: public Hand
{
    public:
    HandMaster(){} 
    //add additional methods
};

class HandOther: public Hand
{
    public:
    HandOther(){} 
    //add additional methods
};

class Deck
{
public:
    std::vector<Card> deck;
    Deck(){
        Card c;
        for(int i = 1; i <= 52; ++i){
            c.x = i; 
            deck.push_back(c);
        }
    }
    void passCard(Hand *x)
    {
        x->getCard(deck.back());
        deck.pop_back();
    }
};

int main()
{
    Deck d;
    Hand* p = new Hand();
    HandMaster *m = new HandMaster();
    HandOther * o = new HandOther();
    for(int i =0; i < 5; ++i){
        d.passCard(p); 
        d.passCard(m); 
        d.passCard(o); 
    }
    std::cout << ""\nHand:"";
    p->showHand();
    std::cout << ""\nHandMaster:"";
    m->showHand();
    std::cout << ""\nHandOther:"";
    o->showHand();

    std::cout << ""\n"";
    delete o;
    delete p;
    delete m;
}
