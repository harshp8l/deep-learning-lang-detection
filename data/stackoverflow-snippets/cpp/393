#include <iostream>
using namespace std;

class point
{
    private:
    int xVal;
    int yVal;

    public:
    point() { xVal = 0; yVal = 0; }

    point(int x, int y)
    {
        xVal = x;
        yVal = y;
    }

    int get_x() { return xVal; }
    int get_y() { return yVal; }

    void rotate90() { int tmp = xVal; xVal = yVal; yVal = tmp; }
};

int main()
{
    point p1, p2(20,0), p3(50,60);
    // output 0 0
    cout<< p1.get_x() << "" "" << p1.get_y() << endl;
    // output 20 0
    cout<< p2.get_x() << "" "" << p2.get_y() << endl;
    // output 50 60
    cout<< p3.get_x() << "" "" << p3.get_y() << endl; 

    // p1 will create a copy of p3 members (xVal and yVal)
    p1=p3;
    // it rotates p1 values, p3 stays the same
    p1.rotate90();

    // 60 50 (p1 rotated)
    cout<<p1.get_x()<<"" ""<<p1.get_y()<<endl;
    // 50 60 (p3 not affected by p1.rotate90())
    cout<<p3.get_x()<<"" ""<<p3.get_y()<<endl;

    // now p4 points to p3 (same xVal and yVal)
    point *p4;
    p4 = &p3;

    cout << ""with p1 pointing to p3 address""<<endl;
    p4->rotate90();

    // 60 50 (p4 rotated)
    cout<<p4->get_x()<<"" ""<<p4->get_y()<<endl;
    // 60 60 (affected by p4.rotate90())
    cout<<p3.get_x()<<"" ""<<p3.get_y()<<endl;
    return 0;
}
