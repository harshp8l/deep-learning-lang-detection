template <typename T> 
class controller {
private:
    std::unique_ptr<T> m_component_manager;

public:
    controller()
    : m_component_manager(std::make_unique<T>())
    {
    }
    ~controller() = default;

    void init()
    {
        m_component_manager->init();
    }

    void process()
    {
        std::cout << m_component_manager->m_component_ts_size << "\n";

        for_each_in_tuple(m_component_manager->m_component_ts, [&](auto tag) {
            using component_t = decltype(tag);

            std::unique_ptr<component_t> p{
                m_component_manager->template prepare<component_t>()
            };

            std::cout << p->id() << "\n";

            // ...

            m_component_manager->recycle(p.get());            
        });
    }
};
