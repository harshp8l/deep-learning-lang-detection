//Primary templates for every other object
template<typename T, typename = void>
struct WriteHelper{

     static void write(ostream& out, T target){
         target.write(out);
     }
};

//Specialization for integral types
template<typename T>
struct WriteHelper<T, std::enable_if_t<std::is_arithmetic<T>::value >>{

     static void write(ostream& out, T target){
         out.write((char*)&target, sizeof(T));
     }
};

//Specialization for std::string
template<typename T>
struct WriteHelper<T, std::enable_if_t<std::is_same<std::string, T>::value >>{

     static void write(ostream& out, T target){
         size_t size = str.size();
         writeElement(out, size);
         out.write(&str[0], size);
     }
};
