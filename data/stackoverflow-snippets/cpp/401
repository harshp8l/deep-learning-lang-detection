#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <boost/thread.hpp>

static const auto PTIME_INTERVAL = 10; // boost::posix_time::milliseconds(10);
static std::atomic_size_t pTimerIterations { 0 };

namespace asio = boost::asio;

struct ThreadPoolManager {
    ~ThreadPoolManager() {
        work.reset();
        threads_endpoint.join_all();
    }

    boost::asio::io_service& get_service() { return io; }

    void launch() {
        threads_endpoint.create_thread([this]{ io.run(); });
    }

  private:
    asio::io_service io;
    boost::optional<asio::io_service::work> work {io};
    boost::thread_group threads_endpoint;
};

struct RtpEndpoint {
};

using rtp_endpoint_ptr = std::shared_ptr<RtpEndpoint>;

struct EndpointGroup : std::enable_shared_from_this<EndpointGroup> {
    std::mutex _mx;
    asio::io_service& _io;
    asio::high_resolution_timer pTimer;
    std::vector<rtp_endpoint_ptr> endpoints;
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();

    EndpointGroup(asio::io_service& io) : _io(io), pTimer(_io) {}

    void stop() {
        auto self(shared_from_this());
        _io.post([self,this] { pTimer.cancel(); });
    }

    // simply start this function over and over again every 10ms
    void invokeSendingOnEndpoints(size_t offset) {
        pTimer.expires_from_now(std::chrono::milliseconds(PTIME_INTERVAL - offset));

        auto self(shared_from_this());
        pTimer.async_wait([this, self](boost::system::error_code ec) {
            if (!ec) {
                std::vector<rtp_endpoint_ptr> iterationEndpoints;
                {
                    boost::lock_guard<std::mutex> guard(_mx);
                    iterationEndpoints = endpoints;
                }
                for (rtp_endpoint_ptr endpoint : iterationEndpoints) {
                    // do fancy stuff
                }
                ++pTimerIterations;
                // check how many milliseconds passed since start of the function
                invokeSendingOnEndpoints(std::chrono::duration_cast<std::chrono::milliseconds>(
                                             (std::chrono::high_resolution_clock::now() - start))
                                             .count() /
                                         (pTimerIterations * PTIME_INTERVAL));
            } else {
                // just write error happend....
            }
        });
    }

    bool addEndpoint(const rtp_endpoint_ptr &endpoint) {
        boost::lock_guard<std::mutex> guard(_mx);
        endpoints.push_back(endpoint);
        return true;
    }
};

using group_ptr = std::shared_ptr<EndpointGroup>;

#include <iostream>

int main() {
    std::cout << "starting" << std::endl;
    {
        ThreadPoolManager tpm;
        for (unsigned i = 0; i < std::thread::hardware_concurrency(); ++i)
            tpm.launch();

        std::vector<group_ptr> groups;

        for (int i = 0; i < 5; ++i) {
            std::cout << "Group " << i << std::endl;
            auto epg = std::make_shared<EndpointGroup>(tpm.get_service());
            epg->invokeSendingOnEndpoints(i*2);

            for (int j = 0; j < rand()%10; ++j) {
                epg->addEndpoint(std::make_shared<RtpEndpoint>());
                std::cout << " - RtpEndpoint " << i << "." << j << std::endl;
            }

            groups.push_back(epg);
        }

        std::cout << "waiting..." << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(4));
        std::cout << "shutting down" << std::endl;

        for(auto& g : groups)
            g->stop();
    }
    std::cout << "done, " << pTimerIterations << " iterations" << std::endl;
}
