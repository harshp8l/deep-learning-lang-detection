template<class T>
class Matrix
{
private:
    std::size_t m_order;
    std::vector<T> m_data;

public:
    template <class InputIterator>
    Matrix(std::size_t order, 
           InputIterator begin, InputIterator end)
    : m_order(order)
    {
        if (std::distance(begin, end) > order * order) {
            throw std::runtime_error("invalid params");
        }
        m_data.reserve(order * order);
        std::copy(begin, end, std::back_inserter(m_data));
        m_data.resize(order * order);
    }

    T GetElement(size_t row, size_t column) const
    {
        checkIndexes(row, column);
        return m_data[row + column * m_order];
    }

    void SetElement(size_t row, size_t column, T value)
    {
        checkIndexes(row, column);
        m_data[row + column * m_order] = value;
    }

private:
    void checkIndexes(size_t row, size_t column) const {
        if (row > order || column > order) {
            throw std::runtime_error("invalid params");
        }
    }
… … …
