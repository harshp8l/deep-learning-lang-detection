string encryptMsg(string& msg)
{
    char *tmp = new char[msg.length() + 1], /* allocate for length + 1 */
        *p = tmp;                           /* pointer to tmp */
    const char *k;                          /* pointer to use for key */
    string codekey, res;                    /* string codekey, result */

    cout << ""Enter a number that is "" << msg.length() << "" digits long: "";
    if (!getline (cin, codekey)) {          /* read codekey */
        cerr << ""error: invalid input - codekey\n"";
        exit (EXIT_FAILURE);
    }
    if (codekey.length() < msg.length()) {  /* validate codekey length */
        cerr << ""error: insufficient number of digits entered.\n"";
        exit (EXIT_FAILURE);
    }
    k = codekey.c_str();        /* initialize k to 1st char in codekey */
    for (char& c : msg) {       /* loop over each char in msg */
        if (!isdigit(*k)) {     /* validate char is a digit */
            cerr << ""error: non-numeric input '"" << *k << ""'\n"";
            exit (EXIT_FAILURE);
        }
        *p++ = c + (*k++ - '0');    /* add digit val to c, store in tmp */
    }
    *p = 0;         /* nul-termiante tmp */
    res = tmp;      /* assign char array to string res */
    delete[] tmp;   /* free allocated memory */
    return res;     /* return encrypted result */
}
