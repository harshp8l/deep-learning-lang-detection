class Car {
private:
    std::string _make;
    std::string _model;
    std::string _vinNumber;

    std::size_t _year;

public:
    Car() : _year( 0 ) {} // default
    Car( const std::string& make, const std::string& model, 
         const std::string& vinNumber, const std::size_t& year ) :
      _make( make ), _model( model ), 
      _vinNumber( vinNumber ), _year( year ) {
    }

    void setCarInfo( const std::string& make, const std::string& model,
                     const std::string& vinNumber, const std::size_t& year ) {
        _make      = make;
        _model     = model;
        _vinNumber = vinNumber;
        _year      = year;
    }

    std::string makeOf() const { return _make; }
    std::string modelOf() const { return _model; }
    std::string vinNumberOf() const { return _vinNumber; }
    std::size_t yearOf() const { return _year; }

};

class Service {
private:
    std::string _dealership;
    std::size_t _currentMiles;

public:
    Serivce() {}

    std::string dealershipOf() const { return _dealership; }
    std:size_t  currentMilesOf() const { return _currentMiles; }

    void setOrChangeDealership( const std::string& dealership ) {
        _dealership = dealership;
    }

    void setOrChangeCurrentMiles( std::size_t miles ) {
        _currentMiles = miles;
    }

    void setOrChangeCurrentMiles( const std::size_t& miles ) {
        _currentMiles = miles;
    }
};

int main() {
    std::vector<Car> cars;
    std::vector<Service> services;

    // you can add Car to vector by either default constructor 
    // to be filled out later or by user defined constructor
    cars.push_back( Car( "Honda", "Civic", "75273250323XMD252AG9", 2017 ) );
    // or
    cars.push_back( Car() );
    // then you can at some point in time update elements in container
    cars[i].setCarInfo( "Dodge", "Charger", "9259356M325D2680A217B", 2015 );

    // As with the service class there is only a "default" constructor
    services.push_back( Service() );
    // Service's members will have to be updated manually and later.

    return 0;
}
