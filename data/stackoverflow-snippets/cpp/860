//#include <stdio.h> Why?
//#include <stdlib.h>
#include <iostream>
#include <exception>
using namespace std;

template<typename T>
class SmartPointer
{
public:
    SmartPointer(T *in);
    ~SmartPointer();
    T getValue();
    void setValue(const T &val);
private:
    T *data;
};

template<typename T> SmartPointer<T>::SmartPointer(T *in) //Moved implementation outside of class declaration
{
    //Completely unnecessary exception stuff
    data = in; //this-> is unnecessary
}

template<typename T> SmartPointer<T>::~SmartPointer()
{
    delete data;
}

template<typename T> T SmartPointer<T>::getValue()
{
    return *data;
}

template<typename T> void SmartPointer<T>::setValue(const T &val)
{
    //More unnecessary exception stuff
    *data = val;
}

int main()
{
    SmartPointer<int> intOne(new int); //The constructor should take a pointer for the object to store instead of an value
    SmartPointer<int> intTwo(new int);
    intOne.setValue(1);
    intTwo.setValue(10);
    cout << "intOne: " << intOne.getValue() << '\n'; //endl flushes the buffer, kind of unnecessary here
    cout << "intTwo: " << intTwo.getValue() << '\n'; //since it gets flushed upon the program exiting anyways
}
