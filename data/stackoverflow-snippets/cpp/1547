#include <iostream>
#include <map>
#include <string>

template <typename T>
class Foo
{
public:
  typedef void (T::*TFunc)( const std::string&, const std::string& );
  typedef std::map< std::string, TFunc > FooMap;
  operator FooMap&()
  {
    return member_;
  }

  TFunc& operator []( const std::string& str )
  {
    return member_[ str ];
  }

private:
  FooMap member_;
};

class Bar
{
public:
  void func()
  {
    fb_[""a""] = &Bar::abc;
  }

  void callFunc( const std::string& str, const std::string arg1,
                 const std::string& arg2 )
  {
    (this->*fb_[ str ])( arg1, arg2 );
  }

  void abc( const std::string& key, const std::string& val )
  {
    std::cout << key << "": "" << val << std::endl;
  }

private:
  Foo<Bar> fb_;
};

int main( int argc, char* argv[] )
{
  Bar b;
  b.func();
  b.callFunc( ""a"", ""hello"", ""world"" );
  return 0;
}
