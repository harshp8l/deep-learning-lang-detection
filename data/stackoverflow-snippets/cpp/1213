void remove_rec(const std::string & word, Node *& ptr) {
    if (word < ptr->data && ptr->left != nullptr) {
        remove_rec(word, ptr->left);
    }
    else if (word > ptr->data && ptr->right != nullptr) {
        remove_rec(word, ptr->right);
    }
    else {
        //if the node has no children
        if (ptr->left == nullptr && ptr->right == nullptr) {
            delete(ptr);
            ptr = nullptr;
        }
        //if there is a right child
        else if (ptr->left == nullptr && ptr->right != nullptr) {
            Node* temp = ptr;
            ptr = ptr->right;
            delete temp;
        }
        //if there is a left child
        else if (ptr->left != nullptr && ptr->right == nullptr) {
            Node* temp = ptr;
            ptr = ptr->left;
            delete temp;
        }
        // TODO: handle case when node has both left and right child
    }
}
