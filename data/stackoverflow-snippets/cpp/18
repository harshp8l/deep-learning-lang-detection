template <class T>
class Point {
public:
    Point(T x, T y) : x(x), y(y) {}

private:
    T x, y;

    friend Point<char> operator+ (Point<char> const& a, Point<char> const& b);
    friend Point<int> operator+ (Point<int> const& a, Point<int> const& b);
    template<class T>
    friend Point<T> operator+ (Point<T> const& a, Point<T> const& b);
    template<class T>
    friend Point<T*> operator+ (Point<T*> const& a, Point<T*> const& b);
};

Point<char> operator+ (Point<char> const& a, Point<char> const& b) {
    std::cout << ""overload for char"" << std::endl;
    return a;
}


Point<int> operator+ (Point<int> const& a, Point<int> const& b) {
    std::cout << ""overload for int"" << std::endl;
    return a;
}

template <class T>
Point<T> operator+ (Point<T> const& a, Point<T> const&) {
    std::cout << ""overload for other non-pointers type"" << std::endl;
    return a;
}

// you can even provide overload for pointers
template <class T>
Point<T*> operator+ (Point<T*> const& a, Point<T*> const&) {
    std::cout << ""overload for pointers"" << std::endl;
    return a;
}


int main() {

    Point<int> p1(1,1);
    p1 + p1;
    Point<char> p2(1, 1);
    p2 + p2;
    Point<long long> p3(1, 1);
    p3 + p3;

    int i[2];
    Point<int*> p4(i, i+1);
    p4 + p4;

    return 0;
}
