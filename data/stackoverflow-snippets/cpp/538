#include <iostream>
#include <array>
using namespace std;

std::array<string,10> fileArray = {"this","is","your","file","contents","split","up","into","string","values"};

class TreeNode {

public:
    string val = "";
    TreeNode *left = NULL;
    TreeNode *right = NULL;

public:
    TreeNode(string value) {
        val = value;
    }
};

/* Given a binary tree, print its nodes in inorder*/
void printInorder(TreeNode node)
{
    if (node.left!= NULL){
        /* first recur on left child */
        printInorder(*node.left);
        //cleanup
        delete node.left;
        }
    /* then print the data of node */
    cout << node.val << endl;

    if (node.right != NULL){
        /* now recur on right child */
        printInorder(*node.right);
        //cleanup
        delete node.right;
        }

}

int main(){
    //root of tree:
    TreeNode originalRoot(fileArray.at(5));

    //left side of tree
    originalRoot.left = new TreeNode(fileArray.at(3));
    originalRoot.left->left = new TreeNode(fileArray.at(1));
    originalRoot.left->left->left = new TreeNode(fileArray.at(0));
    originalRoot.left->left->right = new TreeNode(fileArray.at(2));
    originalRoot.left->right = new TreeNode(fileArray.at(4));

    //right side of tree:
    originalRoot.right = new TreeNode(fileArray.at(7));
    originalRoot.right->left = new TreeNode(fileArray.at(6));
    originalRoot.right->right = new TreeNode(fileArray.at(8));
    originalRoot.right->right->right = new TreeNode(fileArray.at(9));


    cout << "\nprinting tree...\n";
    printInorder(originalRoot);
    return 0;
}
