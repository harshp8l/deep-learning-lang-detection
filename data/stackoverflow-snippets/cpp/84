#include <arpa/inet.h>
#include <string>
#include <typeinfo>
#include <errno.h>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <unistd.h>


using namespace std;

void usage(char *progname) {
  fprintf(stderr, ""%s <serverIPAddr:port> <fileToReceive>\n"",
      progname);
}

int main(int argc, char *argv[])
{
    if(argc!=3)
    {
        usage(argv[0]);
        exit(1);
    }
    string word = argv[1];
    const string port = word.substr(word.find("":"")+1);
    int recv_port = atoi(port.c_str());
    FILE *received_file;

    /* socket */
    int sockfd;
    sockfd = socket(PF_INET, SOCK_STREAM, 0);
    struct sockaddr_in my_addr;

    if(sockfd < 0)
    {
        fprintf(stderr, ""socket failed"");
        exit(2);
    }

    int reuse;
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (char *)&reuse, sizeof(int)) == -1){
     printf(""Reuse port Error : %s\n"", strerror(errno));
    }

    /* bind */
    my_addr.sin_family = AF_INET; // host byte order
    my_addr.sin_port = htons(recv_port); // short network byte order
    fprintf(stdout, ""%s\n"", word.substr(0, word.find(':')).c_str());
    fprintf(stdout, ""%s\n"", port.c_str());
    my_addr.sin_addr.s_addr = inet_addr(word.substr(0, word.find(':')).c_str());
    memset(&(my_addr.sin_zero), '\0', 8); // zero the rest of the structure
    int res = bind(sockfd, (struct sockaddr *)&my_addr, sizeof(struct sockaddr));

    char buffer[BUFSIZ];

    if(res < 0)
    {
        fprintf(stderr, ""bind failed"");
        exit(2);
    }
    else
    {
        int address = my_addr.sin_addr.s_addr;
        fprintf(stdout, ""ConnectDone: %d:%d\n"", address, recv_port);
    }

    received_file = fopen(argv[2], ""w"");
    if (received_file == NULL)
    {
            fprintf(stderr, ""Failed to open file"");
            exit(3);
    }

    int total_bytes = 0;
    int len;
    while (((len = recv(sockfd, buffer, BUFSIZ, 0)) > 0))
    {
            fwrite(buffer, sizeof(char), len, received_file);
            total_bytes += len;
            // fprintf(stdout, ""Receive %d bytes and we hope :- %d bytes\n"", len, remain_data);
    }
    if(recv(sockfd, buffer, BUFSIZ, 0) == 0)
    {
        fprintf(stdout, ""FileWritten: %d bytes\n‚Äù"", total_bytes);
    }

    close(sockfd);
    return 0;
}
