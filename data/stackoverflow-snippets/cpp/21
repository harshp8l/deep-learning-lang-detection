#include<iostream>
#include<vector>
#include<string>
#include<iomanip>

class Person
{
private:
    int idNum;
    std::string name;
public:
    Person(const int& n, const std::string& str)
        :idNum(n), name(str)    {}
    friend std::ostream& operator<<(std::ostream&, const Person& p);
};

std::ostream& operator<<(std::ostream& out,const Person& p)
{
    return out << p.name << " " << p.idNum;
}

std::ostream& personDisplay(std::ostream& s)
{
    std::cout.setf(std::ios::left);
    std::cout.width(12);
    return s;
}
int main()
{
    const int QUIT = 0;
    int MAX = 10;
    int x = 0;
    int id;
    std::string name;

    std::vector<Person> p;
    p.reserve(MAX);       // to reserve memory for 10 Person objects

    std::cout << "Enter an ID number or " << QUIT << " to quit: ";
    std::cin >> id;
    while(id != QUIT && x < MAX)
    {
        std::cout << "Enter name :\t";
        std::cin >> name;
        // this will do your Job, since you have 
        // declared a suitable constructor for that.
        p.emplace_back(id, name); 
        std::cout << "Enter an ID number or " << QUIT << " to quit: ";
        std::cin >> id;
        ++x;
    }

    std::cout << std::endl;
    // avoid unnecessary coding using range based loop
    for(const auto& it: p) 
        std::cout << personDisplay << it << std::endl;

    return 0;
}
