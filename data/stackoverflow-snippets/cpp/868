#define UNICODE 1
#include <windows.h>
#include <wchar.h>

#include <iostream>
#include <string>
#include <memory>

struct FindDeleter
{
    typedef HANDLE pointer;

    void operator()(HANDLE h)
    {
        if(h != INVALID_HANDLE_VALUE)
            FindClose(h);
    }
};

int wmain(int argc, wchar_t **argv)
{
    if (argc < 2)
    {
        std::wcerr << L""Usage: \"""" << argv[0] << L""\"" path"" << std::endl;
        return -1;
    }

    std::wstring path = argv[1];
    if ((!path.empty()) && (path[path.length()-1] != L'\\'))
        path += L'\\';

    WIN32_FIND_DATA FindData;
    std::unique_ptr<HANDLE, FindDeleter> hSearch(FindFirstFileW((path + L""*"").c_str(), &FindData));
    if (hSearch.get() == INVALID_HANDLE_VALUE)
    {
        if (GetLastError() != ERROR_FILE_NOT_FOUND)
        {
            std::wcerr << L""Error looking for first file"" << std::endl;
            return -1;
        }
        std::wcout << L""No files found"" << std::endl;
    }
    else
    {
        do
        {
            std::wstring filePath = path + FindData.cFileName;
            std::wcout << L""Path "" << filePath << std::endl;
        }
        while (FindNextFileW(hSearch.get(), &FindData));

        if (GetLastError() != ERROR_NO_MORE_FILES)
        {
            std::wcerr << L""Error looking for next file"" << std::endl;
            return -1;
        }
    }

    return 0;
}
