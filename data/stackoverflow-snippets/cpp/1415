template<class T>
using less_than_t = decltype(std::declval<T>() < std::declval<T>());

template<class T>
using has_less_than = typename is_detected<less_than_t, T>::type;

template<class T>
void do_compare(const T& lhs, const T& rhs, std::true_type) // for operator <
{
    std::cout << ""use operator <\n"";
}

template<class T>
void do_compare(const T& lhs, const T& rhs, std::false_type)
{
    std::cout << ""Something else \n"";
}

int main()
{
    Has_Less_Than a{1};
    Has_Less_Than b{2};

    do_compare(a, b, has_less_than<Has_Less_Than>{});

    Doesnt_Have_Less_Than c{3};
    Doesnt_Have_Less_Than d{4};
    do_compare(c, d, has_less_than<Doesnt_Have_Less_Than>{});
}
