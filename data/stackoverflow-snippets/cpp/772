template<typename Dst, typename Src>
inline Dst numeric_cast(Src value)
{
    const bool positive_overflow_possible = std::numeric_limits<Dst>::max() < std::numeric_limits<Src>::max();
    const bool negative_overflow_possible =
            std::numeric_limits<Src>::is_signed
            or
            (std::numeric_limits<Dst>::lowest() > std::numeric_limits<Src>::lowest());

    // unsigned <-- unsigned
    if((not std::numeric_limits<Dst>::is_signed) and (not std::numeric_limits<Src>::is_signed)) {
        if(positive_overflow_possible and (value > std::numeric_limits<Dst>::max())) {
            throw std::overflow_error(__PRETTY_FUNCTION__ + std::string("": positive overflow""));
        }
    }
    // unsigned <-- signed
    else if((not std::numeric_limits<Dst>::is_signed) and std::numeric_limits<Src>::is_signed) {
        if(positive_overflow_possible and (value > std::numeric_limits<Dst>::max())) {
            throw std::overflow_error(__PRETTY_FUNCTION__ + std::string("": positive overflow""));
        }
        else if(negative_overflow_possible and (value < 0)) {
            throw std::overflow_error(__PRETTY_FUNCTION__ + std::string("": negative overflow""));
        }

    }
    // signed <-- unsigned
    else if(std::numeric_limits<Dst>::is_signed and (not std::numeric_limits<Src>::is_signed)) {
        if(positive_overflow_possible and (value > std::numeric_limits<Dst>::max())) {
            throw std::overflow_error(__PRETTY_FUNCTION__ + std::string("": positive overflow""));
        }
    }
    // signed <-- signed
    else if(std::numeric_limits<Dst>::is_signed and std::numeric_limits<Src>::is_signed) {
        if(positive_overflow_possible and (value > std::numeric_limits<Dst>::max())) {
            throw std::overflow_error(__PRETTY_FUNCTION__ + std::string("": positive overflow""));
        } else if(negative_overflow_possible and (value < std::numeric_limits<Dst>::lowest())) {
            throw std::overflow_error(__PRETTY_FUNCTION__ + std::string("": negative overflow""));
        }
    }

    // limits have been checked, therefore safe to cast
    return static_cast<Dst>(value);
}
