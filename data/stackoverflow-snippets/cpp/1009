#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <experimental/optional>

template <class T> class Scheduler {
     private:   std::vector<std::queue<T>> queues;

     public:
        Scheduler(int maxSize) {
            queues = std::vector<std::queue<T>>(maxSize);
        };

        void schedule(int priority, const T& object) {
            std::cout << "enqueue on queue #" << priority << std::endl;
            queues[priority].push(object);
        };
        std::experimental::optional<T> take(int priority) {
            std::experimental::optional<T> result;
            if (!queues[priority].empty()) {
                result = std::experimental::optional<T>(queues[priority].front());
                queues[priority].pop();
            }
            return result;

        };
};
