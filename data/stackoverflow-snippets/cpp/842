#include <set>
#include <vector>
#include <iostream>
#include <type_traits>

template <typename>
struct foo { static constexpr std::size_t value { 0U }; };

template <>
struct foo<int> { static constexpr std::size_t value { 1U }; };

template <>
struct foo<double> { static constexpr std::size_t value { 1U }; };

template <>
struct foo<std::size_t> { static constexpr std::size_t value { 1U }; };

template <>
struct foo<std::string> { static constexpr std::size_t value { 2U }; };

template <typename T>
inline typename std::enable_if<0U == foo<T>::value>::type
   writeElement (std::ostream & out, T const & t)
 { std::cout << ""generic case"" << std::endl; }

template <typename T>
inline typename std::enable_if<1U == foo<T>::value>::type
   writeElement (std::ostream & out, T const & t)
 { std::cout << ""int, double, size_t case"" << std::endl; }

template <typename T>
inline typename std::enable_if<2U == foo<T>::value>::type
   writeElement (std::ostream & out, T const & t)
 { std::cout << ""string case"" << std::endl; }

template <typename T>
inline void writeElement (std::ostream & out, std::vector<T> const & v)
 { std::cout << ""vector case"" << std::endl; }

int main ()
 {
   writeElement(std::cout, std::set<int>{});
   writeElement(std::cout, 0);
   writeElement(std::cout, 0.0);
   writeElement(std::cout, std::size_t{});
   writeElement(std::cout, std::string{""0""});
   writeElement(std::cout, std::vector<int>{});
 }
