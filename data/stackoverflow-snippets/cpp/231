#include <iostream>
#include <algorithm>
#include <vector>
#include <string>

// Test class for example
class TestTeam
{
public:
    TestTeam(int16_t p, const std::string& name = ""Empty name""):mPoints(p), mName(name)
    {
    };

    int16_t GetPoints() const {return mPoints;}
    const std::string& GetName() const {return mName;}

    void SetName( const std::string& name ) {mName=name;}

    bool operator < ( const TestTeam& r) const
    {
        return GetPoints() < r.GetPoints();
    }

private:
    int16_t mPoints;
    std::string mName;

};

int main(int argc, const char * argv[])
{
    const uint32_t COUNT_LOWEST_ELEMENTS_TO_FIND = 3;

    // Fill container by test data with a help of non-explicit constructor to solve your task
    std::vector<TestTeam> VecTeam {3,5,8,9,11,2,14,7};

    // Here you can do others manipulations with team data ...

    //Sort vector by GetPoints overloaded in less operator. After sort first three elements will be with lowest points in container
    std::sort(VecTeam.begin(), VecTeam.end());

    //Print results as points - name
    std::for_each( VecTeam.begin(), VecTeam.begin() + COUNT_LOWEST_ELEMENTS_TO_FIND, [] (TestTeam el)
                      {
                          std::cout << el.GetPoints() << "" - "" << el.GetName() << std::endl;
                      } );
}
