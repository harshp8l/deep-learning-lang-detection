template <class Element>
LinkedDeque<Element>::LinkedDeque(){
    //creamos nodos vacios
    frontSentinel = new Node<Element>(NULL);
    rearSentinel  = new Node<Element>(NULL);
    rearSentinel->setPrevious(frontSentinel);
    frontSentinel->setNext(rearSentinel);
    int num_elements = 0;

    cout << "Holi" << endl;
}
template <class Element>
bool LinkedDeque<Element>::isEmpty()const{
    return this->frontSentinel->getNext()->getElement()==NULL;
}

template <class Element>
void LinkedDeque<Element>::insertFront(const Element & element){

    Node<Element> *new_node = new Node<Element>(element); 
    new_node->setNext(frontSentinel->getNext());
    frontSentinel->getNext()->setPrevious(new_node);
    new_node->setPrevious(frontSentinel);
    frontSentinel->setNext(new_node);

    num_elements++;
}

template <class Element>
void LinkedDeque<Element>::insertRear(const Element & element){

    Node<Element> *new_node = new Node<Element> (element); 
    new_node->setPrevious(rearSentinel->getPrevious());
    rearSentinel->getPrevious()->setNext(new_node);
    new_node->setNext(rearSentinel);
    rearSentinel->setPrevious(new_node);

    num_elements++;
}

template <class Element>
void LinkedDeque<Element>::deleteFront(){

    Node<Element> *aux = frontSentinel->getNext();
    aux->getNext()->setPrevious(frontSentinel);
    frontSentinel->setNext(aux->getNext());
    delete aux;

    num_elements--;
}

template <class Element>
void LinkedDeque<Element>::deleteRear(){

    Node<Element> *aux = rearSentinel->getPrevious();
    aux->getPrevious()->setNext(rearSentinel);
    rearSentinel->setPrevious(aux->getPrevious());
    delete aux;

    num_elements--;
}

template <class Element>
void LinkedDeque<Element>::print(){
    Node<Element> *printController = frontSentinel->getNext();
    while (printController->getElement() != NULL) {
        cout << printController->getElement() << endl;
        printController = printController->getNext();
    }
}
