#include <iostream>
#include <cassert>
#include <numeric>

// Method 1
float cci_avg(int cci_buffer[], int index_start, int num_values, int size)
{
    assert(index_start+num_values <= size);
    assert(index_start >= 0);
    assert(num_values > 0);

    float sum = 0;
    for(int i=index_start; i < index_start+num_values; ++i)
    {
        sum += cci_buffer[i];
    }

    return sum/num_values;
}

int main() {
    const int SIZE = 5;
    int CCI_buffer[SIZE] = {100, 50, 0, 50, 100};

    // Call method 1
    std::cout << ""0, 3: "" << cci_avg(CCI_buffer, 0, 3, SIZE) << std::endl;
    std::cout << ""1, 3: "" << cci_avg(CCI_buffer, 1, 3, SIZE) << std::endl;
    std::cout << ""2, 3: "" << cci_avg(CCI_buffer, 2, 3, SIZE) << std::endl;
    // fails
    // std::cout << ""3, 3: "" << cci_avg(CCI_buffer, 3, 3, SIZE) << std::endl;

    // Method 2 with std::accumulate
    int num_values = 3;
    std::cout << ""0, 3 with accumulate: "" << std::accumulate(&CCI_buffer[0], &CCI_buffer[0+num_values], 0)/
                                             static_cast<float>(num_values) << std::endl;
    std::cout << ""1, 3 with accumulate: "" << std::accumulate(&CCI_buffer[1], &CCI_buffer[1+num_values], 0)/
                                             static_cast<float>(num_values) << std::endl;
    std::cout << ""2, 3 with accumulate: "" << std::accumulate(&CCI_buffer[2], &CCI_buffer[2+num_values], 0)/
                                             static_cast<float>(num_values) << std::endl;
    return 0;
}
