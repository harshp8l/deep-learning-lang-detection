#include <EtherCard.h>
#define REQUEST_RATE 5000 // milliseconds

// ethernet interface mac address
static byte mymac[] = { 0x74,0x69,0x69,0x2D,0x30,0x33 };
static byte myip[] = { 192,168,1,15 };
static byte gwip[] = { 192,168,1,1 };
static byte netmask[] = { 255,255,255,255 };//
static byte dnsip[] = { 8,8,8,8 };
static byte hisip[] = { 192,168,1,1 };//

const char website[] PROGMEM = ""192.168.1.1"";


byte Ethernet::buffer[500];
static long timer;

void setup () {
Serial.begin(9600);
Serial.println(""\n[getStaticIP]"");

if (ether.begin(sizeof Ethernet::buffer, mymac, 10) == 0) 
Serial.println( ""Failed to access Ethernet controller"");

ether.staticSetup(myip, gwip);

if(ether.dnsLookup (website, false)){
Serial.println( ""dnsLookup ok"");
}else{
Serial.println( ""dnsLookup faild"");
 ether.parseIp(ether.hisip, ""192.168.1.1""); //IP do servidor manual
}

while (ether.clientWaitingGw())
ether.packetLoop(ether.packetReceive());
Serial.println(""Gateway found"");

ether.printIp(""My IP: "", ether.myip);
ether.printIp(""Netmask: "", ether.netmask);
ether.printIp(""GW IP: "", ether.gwip);
ether.printIp(""DNS IP: "", ether.dnsip);
ether.printIp(""SRV: "", ether.hisip);

timer = - REQUEST_RATE; // start timing out right away
}

void loop () {
ether.packetLoop(ether.packetReceive());

if (millis() > timer + REQUEST_RATE) {
timer = millis();
Serial.println(""\n>>> REQ"");
ether.hisport = 90;//to access  local host

/*char *PATH=""/SafeHome/addevent"";
char *contentType = ""Content-Type: application/json"";
String postDataStr =  """";
char *postDataChar = postDataStr.c_str();*/

ether.httpPost(PSTR(""/SafeHome/addcommand""), website,PSTR(""Content-Type: application/json""), PSTR(""""), my_result_cb);


}
}

// called when the client request is complete
static void my_result_cb (byte status, word off, word len) {

// JSON Body of my post request
Serial.print(""<<<< {\""EXECUTADO\"": \""0\"", \""INSTALACAO_ID\"": \""1\"",\""TPCOMANDO_ID\"": \""1\""}"");
//Serial.print(millis() - timer);
Serial.println("" ms"");
Serial.println((const char*) Ethernet::buffer + off);
}
