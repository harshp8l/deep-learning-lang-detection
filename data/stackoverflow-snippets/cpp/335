#include <iostream>
using namespace std;
unsigned n=65;
int main()
{
    int a[n][29000]; //尽可能大
    int digit = 1; //输出位数，进位时改变
    int temp;   //阶乘的任一元素与临时结果的某位的乘积结果
    int i, j, k, carry; //carry表示进位



    for ( k=1;k<=n-2;k++)
    {
        a[k][0] = 1;   //将结果先初始化为1
    for ( i=2; i<=n-k+1; i++ )  //开始阶乘，从2开始
    {  //按最基本的乘法运算思想来考虑，将临时结果的每位与阶乘元素相乘
        for( j=1, carry=0;  j<=digit; j++ )
        {
            temp = a[k][j-1] * i ; //相应阶乘中的一项与当前所得临时结果的某位相乘（加上进位）
            temp=temp+ carry;

            a[k][j-1] = temp % 10; //更新临时结果的位上信息
            carry = temp / 10; //是否有进位
        }
        while(carry)
        {    //如果有进位
            a[k][++digit-1] = carry % 10; //新加一位，添加信息。位数增1
            carry = carry / 10; //看还能不能进位
        }
    }
   //显示结果
    for(j = digit; j >=1;j--)
    {
        cout<<a[k][j-1];
    }
    printf("\n");
    }


    //计算阶层和，即a[1][]+a[2][]+...+a[48][]+2+1
    int sum[100]={0}; //尽可能大
    int digit1 = digit; //输出位数，进位时改变
    int temp1 = 0;   //相加后到暂位
    int carry1; //carry1表示进位
    int y,u;
    sum[0] = 9;   //初始化为3!+2!+1!

    for ( y=0; y<=digit-1; y++ )  //从个位开始
    {
        for( u=n-3, carry1=0;  u>=1; u-- )   //从第一个数组开始
        {
            temp1 = a[u][y]  + sum[y];


            sum[y] = temp1 % 10; //更新临时结果的位上信息
            carry1 = temp1 / 10; //是否有进位


        while(carry1)
        {    //如果有进位
            sum[y+1] = carry1 % 10 + sum[y+1]; //新加一位，添加信息。位数增1
            carry1 = carry1 / 10; //看还能不能进位
        }

    }
    }

    for(y = digit1-1; y >=0;y--)
    {
        cout<<"the sum of the factorial to n is"<<sum[y];
    }
    printf("\n");
    return 0;
}
