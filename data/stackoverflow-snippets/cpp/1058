#include <complex>
#include <iostream>
#include <cmath>
#include <cfloat>
#include <vector>


int get_type(std::complex<double> c){
  if(std::isinf(c.real()) || std::isinf(c.imag()))
       return 2;
  if(std::isnan(c.real()) || std::isnan(c.imag()))
       return 1;
  return 0;
}

void do_mult(double b, double c, double d){
     std::complex<double> school(-b*d, b*c);
     std::complex<double> f(0.0,b);
     std::complex<double> s(c,d);
     auto cstd=f*s;

     int type1=get_type(school);
     int type2=get_type(cstd);

     #ifdef INFINITE_MATH
                        //not special,    usual            
     if(type1!=type2 || (type1==0 &&  (cstd!=school))){
               std::cout<<"(0.0,"<<b<<")*("<<c<<","<<d<<")="<<school<<"vs."<<cstd<<"\n";
     }

     #endif

     #ifdef SIGNED_ZERO_MATH
                                                //       signed zero
     if(type1!=type2 || (type1==0 &&  (1.0/cstd.real()!=1.0/school.real() || 1.0/cstd.imag()!=1.0/school.imag() ))){
               std::cout<<"(0.0,"<<b<<")*("<<c<<","<<d<<")="<<school<<"vs."<<cstd<<"\n";
     }
     #endif
}

int main(){
       std::vector<double> numbers{0.0, -0.0, 1.0, INFINITY, -INFINITY, NAN, DBL_MAX, -DBL_MAX};
       for(double b: numbers)
         for(double c: numbers)
           for(double d: numbers)
               do_mult(b,c,d);
}
