bool validerTelephone(const std::string& p_telephone)
{
    //
    // Declare this as a vector so that we can use STL to easily search
    // it later
    //
    vector<string> code_reg = { ""403"",""780"",""604"",""236"",""250"",""778"",""902"",""506"",""514"",""408"",""204"",""905"",""519"",""289"",
        ""705"",""613"",""807"",""416"",""647"",""438"",""450"",""579"",""418"",""581"",""819"",""306"",""709"",""867"" };

    //
    // If writing a single-exit function, declare result variable false
    // and only set it to true when the success conditions are met
    //
    bool etat = false;

    //
    // The regex is delimited with start of line (^) and end of line ($)
    // because OP's original code enforced p_telephone.size() == 12
    //
    std::regex pattern(""^([0-9]{3}) [0-9]{3}-[0-9]{4}$"");
    std::smatch match;
    std::string region;  

    //
    // Match the input string to the pattern
    //
    if (std::regex_search(p_telephone, match, pattern)) 
    {
        // 
        // 'region' is the capture group at the start of the regex, i.e. ([0-9]{3})
        // We can access it via a member function of our std::smatch instance
        //
        region = match.str(1);

        //
        // A standard idiom to determine if the region (e.g. 514) is one of the valid
        // code regions contained in the code_reg vector
        //
        if (std::find(code_reg.begin(), code_reg.end(), region) != code_reg.end())
        {           
            etat = true;    // The telephone code region is valid, so all requirements are met
            std::cout << ""format telephone "" << p_telephone << '\n';
        }
    }   

    return etat;
}
