#include <iostream>
#include <deque>

class DataStructure {
protected:
    std::deque<int> data;
public:
    virtual void push(int element) { }

    int pop() {
        if (data.size() == 0)
            return -1;

        int elem = data.back();
        data.pop_back();
        return elem;
    }

    void print() {
        for(std::deque<int>::iterator i=data.begin();i<data.end();i++)
            std::cout << *i;
            std::cout << ""\n"";
    }
};


class Stack: public DataStructure {
public:
    void push(int element) {  
        data.push_back(element);
    }
}; // Stack


class Queue: public DataStructure {
public:
    void push(int element) { 
        data.push_front(element);
    }
}; // Queue

int main()
{
    Stack s;
    Queue q;
    s.push(1);
    s.print();
    s.push(2);
    s.print();
    s.push(3);
    s.push(4);
    s.print();
    s.push(5);
    s.print();
    s.pop();
    s.print();
    s.pop();
    s.print();
    s.pop();
    s.print();
    s.pop();
    s.print();
    s.pop();
    s.print();

    q.push(1);
    q.print();
    q.push(2);
    q.print();
    q.push(3);
    q.push(4);
    q.print();
    q.push(5);
    q.print();
    q.pop();
    q.print();
    q.pop();
    q.print();
    q.pop();
    q.print();
    q.pop();
    q.print();
    q.pop();
    q.print();

}
