bool Train::isValid() const
{
    Car* curr;
    Car* temp;
    Car* Fin;
    Car* MVP;
    bool result;

    //Setting current node to the head node's next, head node will always be a locomotive, hence not involved.
    curr = m_head->getNext();

    //If any of the condition returns false, the loop should break.
    while(curr != NULL)
    {
        temp = curr->getNext();       //Setting first trail node to the current node's next
        if(temp != NULL)
        {
        Fin = temp->getNext();             //Setting second trail node to the first trail node's next

        //Condition for combustible car being next to a oxidizer car
        if((curr->getCargo()==3)&&(temp->getCargo()==2)||(curr->getCargo()==2)&&(temp->getCargo()==3))           
        {
            result = false;break;
        }
        else
            result = true;
        if(Fin != NULL)
        {
        MVP = Fin->getNext();              //Setting third trail node to the second trail node's next

        //Condition for three combustible cars being in a row
        if((curr->getCargo()==3)&&(temp->getCargo()==3)&&(Fin->getCargo()==3))
        {
                result = false;break;
        }

        //Condition for a radioactive car being next to a biological car
        else if((curr->getCargo()==4)&&(temp->getCargo()==0)&&(Fin->getCargo()==4))
        {
                result = false;break;
        }
        else
            result = true;
        if(MVP != NULL)
        {

            //Condition for five biological cars being in a row
        if((curr->getCargo()==0)&&(temp->getCargo()==0)&&(Fin->getCargo()==0)&&(MVP->getCargo()==0)&&((Fin->getNext())->getCargo()==0))
        {
                result = false;break;
        }
        else
            result = true;
        }
        }
        }

        //moving current node to its next
        curr = curr->getNext();
    }
    return result;
}
