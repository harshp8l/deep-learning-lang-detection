template <typename T>
struct Type_Wrapper
{
    using Type = T;
};

template <typename T>
inline constexpr Type_Wrapper<T> _Type{};

template <e_Types Type> inline constexpr auto _GetVarType()
{
    if constexpr( Type == Type_8 )
        return _Type<Byte>;
    else if constexpr( Type == Type_16 )
        return _Type<Word>;
    else if constexpr( Type == Type_32 )
        return _Type<HEX32>;
    else if constexpr( Type == Type_64 )
        return _Type<HEX64>;
    else if constexpr( Type == Type_Pointer )
        return _Type<Pointer>;
    else if constexpr( Type == Type_Size )
        return _Type<size_t>;
    else if constexpr( Type == Type_Array )
        return _Type<Bytes>;
    else
        return _Type<void>;
};

template<e_Types _Type>
using GetVarType_t = typename decltype( _GetVarType<_Type>() );
