class ITeamInitializer
{
public:
    virtual void InitTeam(Player players[], int count) = 0;
    virtual ~ITeamInitializer(){}
};

class HardcordeTeamInitializer : public ITeamInitializer
{
public:
    virtual void InitTeam(Player players[], int count) override
    {

        //players[0].Init(string n, string g, string j, unsigned int a, unsigned int nw, float s, float t, float p) //Some hardcoded data init Goalkeeper))
        //players[1].Init(string n, string g, string j, unsigned int a, unsigned int nw, float s, float t, float p) //Some hardcoded data init
        //...
        //players[9].Init(string n, string g, string j, unsigned int a, unsigned int nw, float s, float t, float p) //Some hardcoded data init
        //players[10].Init(string n, string g, string j, unsigned int a, unsigned int nw, float s, float t, float p) //Some hardcoded data init

    }
};

class FileTeamInitializer : public ITeamInitializer
{
public:
    FileTeamInitializer(const std::string& filename);
    virtual void InitTeam(Player players[], int count) override
    {
        //Read team from file
    }
};

class RandomTeamInitializer : public ITeamInitializer
{
public:
    virtual void InitTeam(Player players[], int count) override
    {
        for ( int i = 0; i < count; i++ )
        {
            players[i].Init( GenarateRandomPlayer() ) //Generating random player
        }
    }
private:
    Player  GenarateRandomPlayer();
};
