#include <iostream>
#include <limits>
#include <chrono>

template<typename T> 
class Myclass {
public:
  // Variable (I want to initialize m_max to the maximum value possible for the 
  // T type)
  T m_max ;

  // Constructor
  Myclass ( ) : m_max(std::numeric_limits<T>::max()) {}
};

template<typename T, typename Ratio> 
class Myclass<std::chrono::duration<T,Ratio> > {
public:
  // Variable (I want to initialize m_max to the maximum value possible for the 
  // T type)
  std::chrono::duration<T,Ratio> m_max ;

  // Constructor
  Myclass ( ) : m_max(std::chrono::duration<T,Ratio>::max()) {}
};

int main() {
    Myclass<int>                       intobj;
    Myclass<float>                     floatobj;
    Myclass<double>                    doubleobj;
    Myclass<std::chrono::nanoseconds>  nanosecondseobj;
    Myclass<std::chrono::milliseconds> millisecondseobj;
    Myclass<std::chrono::seconds>      secondseobj;

    using namespace std;
    cout << ""Maximum value for int = ""          << intobj.m_max << endl;
    cout << ""Maximum value for float = ""        << floatobj.m_max << endl;
    cout << ""Maximum value for double = ""       << doubleobj.m_max << endl;
    cout << ""Maximum value for nanoseconds = ""  << nanosecondseobj.m_max.count( ) << endl;
    cout << ""Maximum value for milliseconds = "" << millisecondseobj.m_max.count( ) << endl;
    cout << ""Maximum value for seconds = ""      << secondseobj.m_max.count( ) << endl;
}
