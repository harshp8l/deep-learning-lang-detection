#include <iostream>
#include <string>
#include <sstream>

using namespace std;

int main(int argc, char* argv[])
{
    unsigned int m;
    unsigned int n;
    argc = 3;
    const char* args[3];
    args[1] = ""-1"";
    args[2] = ""-2"";

    istringstream iss;
    if (argc != 3) // Passes because argument count is 3 
    {
        cerr << ""Usage: "" << argv[0] << "" <integer m> <integer n>"" << endl;
        return 1;
    }

    iss.str(args[1]); // iss now holds ""-1""

                      // istringstream operator >> will set either eofbit, failbit or badbit
                      // on failure. The iss object is convertible to bool so you can check
                      // in an if statement.

    if (!(iss >> m))  // Extracts ""-1"" into unsigned int m.
                      // m holds 4294967295 because it's unsigned.
                      // if statement doesn't fail because istringstream can 
                      // can extract into signed ints also
    {
        cerr << ""Error: The first argument is not a valid nonnegative integer."" << endl;
        return 1;
    }

    iss.clear();
    iss.str(args[2]); // iss object now holds ""-2""
    if (!(iss >> n))  // Same here, extraction into unsigned in doesn't fail
    {
        cerr << ""Error: The second argument is not a valid nonnegative integer."" << endl;
        return 1;
    }

    if (n > m) // This checks if n > m, but still nowhere in the code have you
               // checked if the argv[] values are negative or positive values.
    {
        cerr << ""Error: The second argument is not a valid nonnegative integer."" << endl;
        return 1;
    }

    cout << m << "" x "" << n << "" = "" << endl;
    return 0;
}
