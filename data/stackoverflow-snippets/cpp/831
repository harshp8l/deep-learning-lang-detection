template <typename T>
class Base {
    using data_type = typename T::data_type;
        // this will be a different type for each T - and
        // we don't need to know it in advance

    void Enroll(const vector<int>& v){
        // implementation that can depend on T in many ways.
        // Specifically, you can use `data_type`.
    }

    vector<double> Compare(const vector<int>& v){ /* ... */ }

    // ...
 };

 class SomeDerived : Base<SomeDerived> { /* ... */ };
 class AnotherDerived : Base<AnotherDerived> { /* ... */ };
