template <typename T>
size_t Str_len(const T *s1)
{

    const T *const sStart = s1;
    if (s1)  while (*s1) s1++;    // guard against nullptr
    return s1 - sStart;
}

template <typename T>
T *Str_alloc(size_t nChars)
{
    T * p = new T[nChars + 1];    // plus 1 for end of string character

    p && nChars > 0 && (*p = 0);  // initialize new string with end of string if possible
    return p;
}

template <typename T>
void Str_delete(T *src)
{
    delete [] src;    // new array requires delete array
}

template <typename T>
T *Str_cpy(T *dest, const T *src)
{
    T * const destStart = dest;  // will return beginning of dest
    if (src && dest) {
        while (*dest++ = *src++);    // copy from src to dest including end of string
    }
    return destStart;
}

template <typename T>
T *Str_cat(T *dest, const T *src)
{
    if (src && dest) {
        T * const destStart = dest;  // will return beginning of dest
        while (*dest) dest++;     // find end of string of dest
        Str_cpy(dest, src);       // copy src to end of dest
        return destStart ;
    }
    else {
        return dest;  // bad args so just return dest
    }
}

template <typename T>
T *Str_cat_alloc(const T *s1, const T *s2)
{
    size_t nChars = Str_len(s1) + Str_len(s2);
    auto dest = Str_alloc <T> (nChars);
    if (dest && s1) {
        Str_cpy(dest, s1);
        if (s2) {
            Str_cat(dest, s2);
        }
        return dest;
    }
    else {
        return dest;
    }
}
