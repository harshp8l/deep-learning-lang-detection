#include <iostream>
#include <thread>
typedef void(*fptr)();
void pOne(/**/)
{
    std::cout<<"1"<<std::endl;
}

void pTwo(/**/)
{
    std::cout<<"2"<<std::endl;
}
class A
{
    public:
       void generator(void)
       {
            int i = 1;
            while(1)
            {
                if(i == 1)
                {
                    fptr func = pOne;
                    one(func);//Should be a flag 
                    i = 2;
                }
                else
                {
                     fptr func = pTwo;
                     two(func);//Should be a flag 
                     i = 1;
                }
          }
      }
      template <typename CallbackFunction>
      void one(CallbackFunction&& func)
      {
         func();
      }
      template <typename CallbackFunction>
      void two(CallbackFunction&& func)
      {
        func();
      }

      A()
      {
          std::thread t(&A::generator, this);
          t.detach();
      }
};
int main()
{
  A myA;
  while(1)
  {
  }
  return 0;
}
