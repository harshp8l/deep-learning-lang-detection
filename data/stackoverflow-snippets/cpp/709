#include <iostream>
#include <vector>

using namespace std;

class DataStructure {
protected:
    vector<int> data;
public:
    virtual void push(int element) { }

    void pushAll(vector<int> elements) {
        for (int i = 0; i < elements.size(); i++)
            push(elements[i]);
    } // pushAll()

    int pop() {
        if (data.size() == 0)
            return -1;

        int elem = data.back();
        data.pop_back();
        return elem;
    } // pop()
}; // DataStructure


class Stack: public DataStructure {
public:
    void push(int element) { data.push_back(element); }
}; // Stack


class Queue: public DataStructure {
public:
    void push(int element) { data.insert(data.begin(), element); }
}; // Stack


int main(int argc, const char * argv[]) {

    DataStructure dat = Queue();
    cout << dat.pop() << endl;

    Queue myQueue = Queue();
    myQueue.pushAll({10, 20, 30, 40});

    cout << myQueue.pop() << endl;

//    Stack myStack = Stack();
//    myStack.pushAll({10, 20, 30, 40});
//
//    cout << myStack.pop() << endl;
//    cout << myStack.pop() << endl;

    return 0;
}
