#include <iostream>
#include <numeric>
#include <cassert>

float cci_avg(int cci_buffer[], int index_start, int num_values, int size)
{
    assert(index_start+num_values <= size);
    assert(index_start >= 0);
    assert(num_values > 0);
    auto begin = cci_buffer+index_start;
    auto end = begin + num_values;
    return std::accumulate(begin, end, 0.0f) / num_values;
}

int main() {
    const int SIZE = 5;
    int CCI_buffer[SIZE];

    CCI_buffer[0] = 100;
    CCI_buffer[1] = 50;
    CCI_buffer[2] = 0;
    CCI_buffer[3] = 50;
    CCI_buffer[4] = 100;

    std::cout << ""0, 3: "" << cci_avg(CCI_buffer, 0, 3, SIZE) << std::endl;
    std::cout << ""1, 3: "" << cci_avg(CCI_buffer, 1, 3, SIZE) << std::endl;
    std::cout << ""2, 3: "" << cci_avg(CCI_buffer, 2, 3, SIZE) << std::endl;
    // The next is no good
   // std::cout << ""3, 3: "" << cci_avg(CCI_buffer, 3, 3, SIZE) << std::endl;
    return 0;
}
