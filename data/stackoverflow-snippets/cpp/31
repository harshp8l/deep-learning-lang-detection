class Timer
{
public:
    Timer::Timer()
    {
    }

    Timer::~Timer()
    {
    }

    void Timer::init()
    {
        m_StartTime = std::chrono::system_clock::now();
    }

    void Timer::update()
    {
        m_EndTime = std::chrono::system_clock::now();
        elapsedTime = std::chrono::duration_cast<std::chrono::milliseconds>(m_EndTime - m_StartTime).count()/1000;
        m_StartTime = m_EndTime;
    }

    float Timer::getElapsedTimeInSec()
    {
        return this->elapsedTime;
    }

private:
    float elapsedTime;
    std::chrono::system_clock::time_point m_StartTime;
    std::chrono::system_clock::time_point m_EndTime;

};

int main()
{
    Timer timer;
    timer.init();

    std::this_thread::sleep_for(std::chrono::seconds(2));
    timer.update();
    std::cout << timer.getElapsedTimeInSec() << " sec\n";
    return 0;
}
