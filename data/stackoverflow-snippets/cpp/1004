public class parentClass {
  //Overridden method
   public void disp()
   {
    System.out.println(""Output:  disp() method of parent class"");
   }    
}

public class childClass extends parentClass {

   //You cannot determine whether these methods are polymorphic 
   //or static polymorphic (aka overridden) simply by their signatures.                
   //It is by the way they are invoked which determines this.
   public void disp(){
       System.out.println(""    Output: disp() method of Child class"");
   }

   public long add(long a, long b){
       return a + b;   
   }
   public int add(int a, int b){
       return a+b;
   }
   public String add(String a, String b){
       return a + b;
   }

   public static void main( String args[]) {

        //Here a child class has overridden the disp() method of the
        //parent class.  When a child class reference refers to the child
        //class overriding method this is known as static polymorphism
        //or more simply, overriding.
       System.out.println(""childClass referencing the childClass's overridden, or static polymorphic method"");
        childClass myChildObj = new childClass();
        myChildObj.disp();

        //Another example of static polymorphic, or overridden methods
        System.out.println(""The following are overridden, or static polymorphic methods:"");         
        System.out.printf(""    Long add()override method results:  %d \n"",    
            myChildObj.add(5999999, 1));
        System.out.printf(""    Integer add() override method results: %d \n"",  myChildObj.add(3,2));
        System.out.printf(""    String add() override method results: %s \n"", 
            myChildObj.add(""    First and ..."", "" Second""));


        //When the parent class reference refers to the child class object
        //then the overriding method  is called.
        //This is called dynamic method dispatch and runtime polymorphism
        System.out.println(""True polymorphism, when the parent class object calls the child class's method:"");
        parentClass myParentObj = new childClass();
        myParentObj.disp();

   }
}
