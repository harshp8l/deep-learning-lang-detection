  template <typename D, typename T>
  auto addHelper (T && t, tag<2> const &)
   -> decltype((void)std::declval<D>().push_back(std::forward<T>(t)))
   { c.push_back(std::forward<T>(t)); }

  template <typename D, typename T>
  auto addHelper (T && t, tag<1> const &)
   -> decltype((void)std::declval<D>().insert(std::forward<T>(t)))
   { c.insert(std::forward<T>(t)); }

  template <typename D, typename T>
  auto addHelper (T && t, tag<0> const &)
   -> decltype((void)std::declval<D>().push_front(std::forward<T>(t)))
   { c.push_front(std::forward<T>(t)); }
