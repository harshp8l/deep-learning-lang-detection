#include <iostream>
#include <iterator>
#include <algorithm>
#include <boost/range/adaptor/indirected.hpp>
#include <boost/range/adaptor/transformed.hpp>
#include <boost/range/algorithm/copy.hpp>

int main(int, char**) {
    using namespace boost::adaptors;


    std::vector<int> perm{ 1,2,0 };
    std::vector<std::vector<double>> matrix = { {1.,2.,3.},{4.,5.,6.},{7.,8.,9.} };
    std::vector<std::vector<double>> output;
    auto permutation = perm | transformed( [&matrix](int x) { return matrix.begin() + x; }) | indirected;

    boost::copy(
        permutation,
        std::back_inserter(output));

    std::cout << output[0][0] << "" == "" << matrix[1][0] << std::endl;
    std::cout << output[1][0] << "" == "" << matrix[2][0] << std::endl;
    std::cout << output[2][0] << "" == "" << matrix[0][0] << std::endl;
}
