#include <iostream>
#include <algorithm>
#include <vector>

template <typename ForwardIterator>
ForwardIterator remove_duplicates( ForwardIterator first, ForwardIterator last )
{
    auto new_last = first;

    for ( auto current = first; current != last; ++current )
    {
        if ( std::find( first, new_last, *current ) == new_last )
        {
            if ( new_last != current ) *new_last = *current;
            ++new_last;
        }
    }

    return new_last;
}

int main() 
{
    std::vector<int> v = { 1, 3, 2, 1, 4, 3 };

    for ( int x : v ) std::cout << x << ' ';
    std::cout << std::endl;

    v.erase( remove_duplicates( v.begin(), v.end() ), v.end() );

    for ( int x : v ) std::cout << x << ' ';
    std::cout << std::endl;

    return 0;
}
