#include <iostream>
#include <type_traits>

template <typename T>
using CRef = typename std::remove_reference<T>::type const&;

template<typename Str>
Str StringReplace(Str&& str, CRef<Str> from, CRef<Str> to)
{
    std::cout << __PRETTY_FUNCTION__ << std::endl;

    if (std::is_same<std::string&&, decltype(str)>::value)
        std::cout << ""rvalue-ref\n\n"";
    else if (std::is_same<std::string&, decltype(str)>::value)
        std::cout << ""lvalue-ref\n\n"";

    return std::forward<Str>(str);
}

int main() {
    std::string s1;

    StringReplace(s1, """", """");

    // Forwarding reference will deduce Str to std::string& when passing an lvalue
    StringReplace<std::string&>(s1, """", """");

    StringReplace(std::move(s1), """", """");

    StringReplace<std::string>(std::move(s1), """", """");

    StringReplace<std::string>("""", """", """");

    const std::string& test = s1;
    StringReplace(test, """", """");
}
