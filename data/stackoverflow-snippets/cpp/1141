int main() {
    std::vector<int> v1{ 1,3,5,7,9 };
    std::vector<int> v2{ 2,4,6,8 };
    std::vector<int> v3;

    // print this way
    std::cout << "v1 : ";
    for( auto& v : v1 ) {
        std::cout << v << ' ';
    }
    std::cout << '\n';

    // or print this way
    std::cout << "v2 : ";
    std::copy( v2.begin(), v2.end(), std::ostream_iterator<int>( std::cout, " " ) );
    std::cout << '\n';

    // Merge without binary predicate comp function - functor etc.
    test::merge( v1.begin(), v1.end(), 
                 v2.begin(), v2.end(), 
                 std::back_inserter( v3 ) );

    // using std's functors std::less - std::greater
    test::merge( v1.begin(), v1.end(), 
                 v2.begin(), v2.end(), 
                 std::back_inserter( v3 ), 
                 std::less<int>() );

    test::merge( v1.begin(), v1.end(), 
                 v2.begin(), v2.end(), 
                 std::back_inserter( v3 ), 
                 std::greater<int>() );

    // using lambda's as predicate compare objects.
    test::merge( v1.begin(), v1.end(), 
                 v2.begin(), v2.end(), 
                 std::back_inserter( v3 ), 
                 []( auto&& a, auto&& b ) { return a < b; } );

    test::merge( v1.begin(), v1.end(), 
                 v2.begin(), v2.end(), 
                 std::back_inserter( v3 ), 
                 []( auto&& a, auto&& b ) { return a > b; } );    

    std::cout << "v3 : ";
    std::copy( v3.begin(), v3.end(), std::ostream_iterator<int>( std::cout, " " ) );
    std::cout << '\n';    

    std::cout << "\nPress any key to quit.\n";
    std::cin.get();
    return 0;
}
