class World;

void func(const World& w) {
    std::cout << w; // Okay, only uses reference
    std::cout << w.name; // error
    World w2 = w1; // error, compiler needs to know that class offers copy constructor
    w.do_something(); // error, compiler doesn't know what this is
}

class World {
public:
    std::string name;

    void do_something() const; // Doesn't need implementation to be called
}

std::ostream& operator<<(std::ostream s, const World& w) {
    std::cout << w.name; // OK
    w.do_something(); // OK
    return s;
}
