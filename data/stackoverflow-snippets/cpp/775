using namespace std;

typedef vector<double> MatrixRow;
typedef vector<MatrixRow> Matrix;

Matrix matrix_multiply(const Matrix &left, const Matrix &right)
{
    // Validate conditions of multiplication of matrices
    if (left.empty())
    {
        cerr << "Left matrix is empty." << endl;
        exit(-1);
    }

    if (right.empty())
    {
        cerr << "Right matrix is empty." << endl;
        exit(-1);
    }

    const int leftRowCount = left.size();
    const int leftColumnCount = left.front().size();

    const int rightRowCount = right.size();
    const int rightColumnCount = right.front().size();

    if (leftColumnCount != rightRowCount)
    {
        cerr << "The number of columns of the left matrix is not the same as the number of columns of the right matrix." << endl;
        exit(-1);
    }

    cout << "Calculate steps" << endl
         << "=====" << endl;

    // Calculation
    Matrix matrix(leftRowCount);
    for (int i = 0; i < leftRowCount; i++)
    {
        matrix.at(i).resize(rightColumnCount);
        for (int j = 0; j < rightColumnCount; j++)
        {
            matrix.at(i).at(j) = 0;
            cout << "M(" << i << "," << j << ") = ";
            for (int k = 0; k < leftColumnCount; k++)
            {
                cout << "L(" << i << "," << k << ") + R(" << k << "," << j << ")";
                if (k < leftColumnCount - 1)
                {
                    cout << " + ";
                }
                matrix.at(i).at(j) += left.at(i).at(k) * right.at(k).at(j);
            }
            cout << endl;
        }
    }

    cout << endl;

    return matrix;
}
