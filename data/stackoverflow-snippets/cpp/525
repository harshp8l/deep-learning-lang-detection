int main() 
{
  // vec is undescriptive of what it represents
  std::vector<int> floors {1, 5, 14, 29, 80, 99};

  for(auto iterator = floors.begin(); iterator != floors.end(); ++iterator)
  {
    // << can be chained
    std::cout << ""Floors the lift stop at: "" << *iterator << std::endl;
  }

  // Note that you repeat the ""Floors the lift stop at: "" 
  // If you only want one line, you can instead:      
  /* 
  std::cout << std::cout << ""Floors the lift stop at: "";
  std::copy(floors.begin(), floors.end(), std::ostream_iterator<int>(std::cout, "" ""));
  std::cout << std::endl;
  */

  std::vector<int> diffs = calculateDiffs(vec);

  for(auto iterator = diffs.begin(); iterator != diffs.end(); ++iterator)
  {
    std::cout << ""Floor Difference: "" << *iterator << std::endl;
  }
  // and again, can std::copy into a std::ostream_iterator
}

std::vector<int> calculateDiffs (std::vector<int> values)
{
  // values is already a copy, as you passed by value
  std::adjacent_difference(values.begin(), values.end(), values.begin());
  values.erase(values.begin()); //First element does not give the difference

  return values;
}
