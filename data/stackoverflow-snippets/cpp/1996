#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

#include "Point.h"

int main() {
    std::random_device rd; // Random Device: Used To Seed Mersenne Random Generator
    std::mt19937 gen;      // Mersenne Twister
    gen.seed( rd() );      // Seed The Generator
    std::uniform_int_distribution<> dist(0, 100); // Uniform Int Distribution between [a, max]

    // Point<int>
    std::vector<Point<int>> points;
    points.reserve( NUM_POINTS );

    for ( std::size_t i = 0; i < NUM_POINTS; i++ ) {
        // Instead of creating a temporary stack copy each iteration
        // I chose to use the constructor directly and instead of
        // push_back, I'm using emplace_back.
        // Point<int> p( dist( gen ), dist( gen ) );
        // points.push_back( p );

        points.emplace_back( Point<int>( dist( gen ), dist( gen ) ) );
    }

    std::cout << "Showing 10 points of type int with random (x,y):\n";
    for ( auto& p : points ) {
        std::cout << p;
    }
    std::cout << std::endl;

    // Point<float>
    std::vector<Point<float>> points2;
    points.reserve( NUM_POINTS );
    std::uniform_real_distribution<float> dist2( 0, 100.0f );

    for ( std::size_t i = 0; i < NUM_POINTS; i++ ) {
        // Instead of creating a temporary stack copy each iteration
        // I chose to use the constructor directly and instead of
        // push_back, I'm using emplace_back.
        // Point<float> p( dist( gen ), dist( gen ) );
        // points2.push_back( p );

        points2.emplace_back( Point<float>( dist( gen ), dist( gen ) ) );
    }

    std::cout << "Showing 10 points of type float with random (x,y):\n";
    for ( auto& p : points2 ) {
        std::cout << p;
    }
    std::cout << std::endl;

    // Sorting the containers:
    std::sort( points.begin(), points.end() );
    std::sort( points2.begin(), points2.end() );

    std::cout << "Showing the sorted points with type int (x,y):\n";
    for ( auto& p : points ) {
        std::cout << p;
    }
    std::cout << std::endl;

    std::cout << "Showing the sorted points with type float (x,y):\n";
    for ( auto& p : points2 ) {
        std::cout << p;
    }
    std::cout << std::endl;


    std::cout << std::endl;
    system( "PAUSE" );
    return 0;
}
