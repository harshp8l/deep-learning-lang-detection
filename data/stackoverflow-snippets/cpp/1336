#include "server.h"

Server::Server(QObject *parent) : QObject(parent)
{
    qRegisterMetaType<PeerData>("PeerData");
    qRegisterMetaType<QHostAddress>("QHostAddress");

    m_server = nullptr;
    m_udp_server = nullptr;
}

Server::~Server()
{
    stop();
}

//Disconnect the socket specified by descriptor
void Server::abort(qintptr descriptor)
{
    QTcpSocket *socket = m_socket_hash.value(descriptor);
    socket->abort();
}

//Try to start in listening state
void Server::listen(quint16 port)
{
    if (m_server)
        return;

    m_server = new QTcpServer(this);

    SETTONULLPTR(m_server);

    connect(m_server, &QTcpServer::newConnection, this, &Server::newConnectionPrivate);

    if (port < 1)
    {
        emit error("Invalid port value");
        stop();
        return;
    }

    bool is_listening = m_server->listen(QHostAddress::AnyIPv4, port);

    if (!is_listening)
    {
        emit error(m_server->errorString());
        stop();
        return;
    }

    UDPListen(port);

    emit listening(m_server->serverPort());
}

//Start the udp server, used to perform netowork search
void Server::UDPListen(quint16 port)
{
    if (m_udp_server)
        return;

    m_udp_server = new QUdpSocket(this);

    SETTONULLPTR(m_udp_server);

    connect(m_udp_server, &QUdpSocket::readyRead, this, &Server::UDPReadyRead);

    m_udp_server->bind(port);
}

//ReadyRead specific for udp
void Server::UDPReadyRead()
{
    while (m_udp_server->hasPendingDatagrams())
    {
        QByteArray data;
        QHostAddress address;
        quint16 port;

        data.resize(m_udp_server->pendingDatagramSize());
        m_udp_server->readDatagram(data.data(), data.size(), &address, &port);

        //Test the header used in this udp broadcast, you can freely change this value,
        //but do for both client and server
        if (QLatin1String(data) == QLatin1Literal("TEST"))
        {
            m_udp_server->writeDatagram(data, address, port);
        }
    }
}

//Stop both tcp and udp servers and also
//removes peers that may be connected
void Server::stop()
{
    while (!m_socket_list.isEmpty())
        removeSocket(m_socket_list.first());

    if (m_server)
    {
        m_server->close();
        m_server->deleteLater();
    }

    if (m_udp_server)
    {
        m_udp_server->deleteLater();
    }
}

//Handle new connection
void Server::newConnectionPrivate()
{
    while (m_server->hasPendingConnections())
    {
        QTcpSocket *socket = m_server->nextPendingConnection();

        QHostAddress host = socket->peerAddress();
        qintptr descriptor = socket->socketDescriptor();

        QByteArray m_buffer;
        qint32 size = 0;

        m_descriptor_hash.insert(socket, descriptor);
        m_socket_hash.insert(descriptor, socket);
        m_buffer_hash.insert(socket, m_buffer);
        m_size_hash.insert(socket, size);
        m_socket_list.append(socket);

        connect(socket, &QTcpSocket::disconnected, this, &Server::disconnectedPrivate);
        connect(socket, &QTcpSocket::readyRead, this, &Server::readyReadPrivate);

        PeerData pd;
        pd.host = host;
        pd.descriptor = descriptor;

        emit connected(pd);
    }
}

//Write to specific socket if more than one is connected
void Server::writeToHost(const QByteArray &data, qintptr descriptor)
{
    if (!m_socket_hash.contains(descriptor))
        return;

    QTcpSocket *socket = m_socket_hash.value(descriptor);

    socket->write(getBytes<qint32>(data.size()));
    socket->write(data);
}

//Write to all sockets
int Server::writeToAll(const QByteArray &data)
{
    foreach (QTcpSocket *socket, m_socket_list)
    {
        socket->write(getBytes<qint32>(data.size()));
        socket->write(data);
    }

    return m_socket_list.size();
}

//ReadyRead function shared by all sockets connected
void Server::readyReadPrivate()
{
    QTcpSocket *socket = static_cast<QTcpSocket*>(sender());

    QByteArray *m_buffer = &m_buffer_hash[socket];
    qint32 *size = &m_size_hash[socket];
    Q_UNUSED(size)
#define m_size *size
    while (socket->bytesAvailable() > 0)
    {
        m_buffer->append(socket->readAll());

        while ((m_size == 0 && m_buffer->size() >= 4) || (m_size > 0 && m_buffer->size() >= m_size))
        {
            if (m_size == 0 && m_buffer->size() >= 4)
            {
                m_size = getValue<qint32>(m_buffer->mid(0, 4));
                m_buffer->remove(0, 4);

                if (m_size < 0 || m_size > MAX_NETWORK_CHUNK_SIZE)
                {
                    socket->abort();
                    return;
                }
            }
            if (m_size > 0 && m_buffer->size() >= m_size)
            {
                QByteArray data = m_buffer->mid(0, m_size);
                m_buffer->remove(0, m_size);
                m_size = 0;

                QHostAddress host = socket->peerAddress();
                qintptr descriptor = socket->socketDescriptor();

                PeerData pd;
                pd.data = data;
                pd.host = host;
                pd.descriptor = descriptor;

                emit readyRead(pd);
            }
        }
    }
}

//Handle socket disconnection
void Server::disconnectedPrivate()
{
    QTcpSocket *socket = static_cast<QTcpSocket*>(sender());

    QHostAddress host = socket->peerAddress();
    qintptr descriptor = m_descriptor_hash.value(socket);

    removeSocket(socket);

    PeerData pd;
    pd.host = host;
    pd.descriptor = descriptor;

    emit disconnected(pd);
}

//Handle socket removal
void Server::removeSocket(QTcpSocket *socket)
{
    qintptr descriptor = m_descriptor_hash.value(socket);

    m_socket_hash.remove(descriptor);
    m_descriptor_hash.remove(socket);
    m_buffer_hash.remove(socket);
    m_size_hash.remove(socket);

    m_socket_list.removeAll(socket);

    socket->abort();
    socket->deleteLater();
}
