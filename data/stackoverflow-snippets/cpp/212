void TrieNode::insert(TrieNode *root, string key){

    TrieNode *crawl = root;
    if (!crawl) {
        crawl = new TrieNode();
    } 
    cout << "Adding " << key << " to the trie" << endl;
    for (int index = 0, auto str_iterator = str.begin(); str_iterator < str.end(); ++str_iterator, ++index) {
        char key_char = *str_iterator;
        if(crawl -> checkNull(key_char)){
            // If a node representing the char does not exist then make it 
            crawl -> setNode(key_char);
        }
        crawl = crawl -> getNode(key_char);
        if (index == key.length() - 1) {
            // We are at the last character, time to mark an end of word
            crawl -> setEndWord();
        }
    }
}

bool TrieNode::search(TrieNode *root, string key){

    TrieNode *crawl = root;
    if (!crawl) {
        cout << "Trie is empty!" << endl;
        return false;
    } 
    cout << "Searching for " << key << " in the trie" << endl;
    for (int index = 0, auto str_iterator = str.begin(); str_iterator < str.end(); ++str_iterator, ++index) {
        char key_char = *str_iterator;
        if(crawl -> checkNull(key_char)){
            cout << "Key is not in the trie" << endl;
            return false;
        }
        crawl = crawl -> getNode(key_char);
        if (index == key.length() - 1) {
            if (!(crawl -> getEndWord())) {
                cout << "Word is physically present in trie, but not present as a distinct word" << endl;
                return false;
            } else {
                return true;
            }
        }
    }
    cout << "Code should not reach here" << endl; // IMO throw an exception I guess
    return false;
}
