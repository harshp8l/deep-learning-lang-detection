void quickSort (vector <string> &L, function<int(int,int)> pickPiv, int a, int b){

    if (b ==-1){
        b = L.size();
    }
    const int n = b-a;

    if (n<=1){
        return;
    }
    int piv = pickPiv(a, b);

    std::swap(L[a], L[piv]);
    piv =a;
    for (int i = piv+1; i<b; i++){
        if (L[i] < L[piv]){

            swap(L[i], L[piv+1]);
            swap(L[piv], L[piv+1]);
            ++piv;
        }

    }
    quickSort(L, pickPiv, a, piv);
    quickSort(L, pickPiv, piv+1, b);
}

int main(){
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()

    std::vector<int> vec = { 4, 2, 7, 19, 3 };
    quickSort(vec, [&gen](int a, int b){
        std::uniform_int_distribution<> dis(a, b);
        return dis(gen);
    }, 0, -1);
}
