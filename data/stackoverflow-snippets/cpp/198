class BST
{
public:
      BST (double * arr, int start, int end)
      {
          int mid = (start + end)/2;
          if (start > end)
          {
              std::cerr << ""Invalid BST tree.""
          }
          //because the array will be sorted
          //the root of the tree will contain the item in the middle of the array so everything less than the middle will go in the left subtree
          //and everything greater than the middle will go in the right subtree

          root = new node(arr[mid]);
          node *temp, *parent;
          for (num = arr[mid/2]; start <= end;)
             if (num <= arr[end]){
                parent = temp;
                temp=temp->left;
                end = (start + end)/2;
             } else {
                parent = temp;
                temp=temp->right;
                start = (start + end)/2;
             }
          }
          //recursively make left subtree
          root->right = sortedArrayBST(arr, mid + 1, end);
      }
private :
      node * root;
}
