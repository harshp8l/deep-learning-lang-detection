template<class _PM> 
class GenericDisplayManager {
public:
   typedef  _PM PlatformManager;
   GenericDisplayManager(PlatformManager&& pm):
     pm_( std::forward<PlatformManager>(pm) )
   {}
   GenericDisplayManager():
     pm_()
   {}
   void increase_brightness() {
      pm_.increase_brightness();
   }
   void decrease_brightness() {
      pm_.decrease_brightness();
   }
private:
   PlatformManager pm_;
};

#ifdef PLATFORM_A
typedef GenericDisplayManager<PlatformA> DisplayManager;
#elif defined(PLATFORM_B)
typedef GenericDisplayManager<PlatformB> DisplayManager;
#endif
