#include <napi.h>
#include <omp.h>
#include <iostream>
#include <windows.h>    // for GetCurrentProcessorNumber()

int getThreads(){
    // Get number of threads
    omp_set_num_threads(3);
    int n = 0;
    #pragma omp parallel reduction(+:n)
        n += 1;
    return n;
}

double GetPi(short numOfThreads,long numberOfSteps){
    long i;
    double pi, sum = 0.0;
    double step = 1.0/(double) numberOfSteps;

    omp_set_num_threads(numOfThreads);

    #pragma omp parallel
    {
        std::cout << "This thread is running on processor: " << GetCurrentProcessorNumber() << "\n";
        double x;
        #pragma omp for reduction(+:sum) 
            for(i = 0; i < numberOfSteps; i++) {
                x = ( i + 0.5 ) * step;
                sum += 4.0 / (1 + x*x);
            } 
    }

    std::cout << "Total no. of threads (not processors)" <<getThreads() << std::endl;
    pi =  step * (double)sum;
    return pi;
}

Napi::Value calculatePi(const Napi::CallbackInfo& info ){
     Napi::Env env = info.Env();

    // check for no. of arguments
    if(info.Length()<2){
        Napi::TypeError::New(env, "Wrong number of arguments").ThrowAsJavaScriptException();
        return env.Null();
    }

    if (!info[0].IsNumber() || !info[1].IsNumber()) {
        Napi::TypeError::New(env, "Wrong arguments").ThrowAsJavaScriptException();
        return env.Null();
    }

    double numThreads = info[0].As<Napi::Number>().DoubleValue();
    double numSteps = info[1].As<Napi::Number>().DoubleValue();

    double pi = GetPi(numThreads, numSteps);

    Napi::Number PI = Napi::Number::New(env, pi);

    return PI;
}

Napi::Object Init(Napi::Env env, Napi::Object exports){
    // register the functions that are to be exported    
    exports.Set(Napi::String::New(env, "pi"), Napi::Function::New(env, calculatePi));
    return exports;
}

NODE_API_MODULE(nodeOpenMP, Init);
