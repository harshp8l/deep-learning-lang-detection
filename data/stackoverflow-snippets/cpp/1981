#include <iostream>
#include <vector>

void merge( std::vector<int> &data,  
            std::vector<int>::size_type left,
            std::vector<int>::size_type mid,
            std::vector<int>::size_type right ) 
{
    std::vector<int> L, R;

    for ( std::vector<int>::size_type i = 0; i <  mid - left + 1; i++ ) 
    {
            L.push_back( data[left + i] );
    }

    for ( std::vector<int>::size_type j = 0; j < right - mid; j++ ) 
    {
            R.push_back( data[mid + j + 1]);
    }

    std::cout << L.size() << '\t' << R.size() << std::endl;
}

void mergeSort( std::vector<int> &v, 
                std::vector<int>::size_type left, 
                std::vector<int>::size_type right ) 
{
    if ( left < right ) 
    {
        auto mid = ( left + right ) / 2;
        merge( v, left, mid, right );
    }
}

int main() 
{
    std::vector<int> v( { 1, 2 } );

    mergeSort( v, 0, v.size() );

    return 0;
}
