template <typename T, typename... Args, typename E = evaluate<T>>
std::enable_if_t<!E::value> foo (const T&, const Args&...);

template <typename T, typename... Args, typename E = evaluate<T>>
std::enable_if_t<E::value> foo (const T&, const Args&... args)
 {
   bar<E::size>();
   // Do whatever.
   foo(args...);
 }

template <typename T, typename ... Args, typename E>
std::enable_if_t<!E::value> foo (const T&, const Args&... args)
 {
   hit<E::size>();
   // Do whatever, but different from the previous foo overload.
   foo(args...);
 }
