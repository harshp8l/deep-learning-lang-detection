double boundedSumOP(std::vector<int> x, int lower, int upper) {
    double mySum = 0;
    std::sort(x.begin(), x.end());
    std::vector<int>::iterator it, itEnd = x.begin() + upper;
    for (it = x.begin() + lower; it <= itEnd; it++)
        mySum += *it;
    return mySum;
}

double boundedSumBen(std::vector<int> x, int lower, int upper) {
    double mySum = 0;
    // First partition vector at larger bound
    std::nth_element(x.begin(), x.begin() + upper, x.end());
    // Now create partition of above at lower bound
    std::nth_element(x.begin(), x.begin() + lower, x.begin() + upper);
    std::vector<int>::iterator it, itEnd = x.begin() + upper;
    for (it = x.begin() + lower; it <= itEnd; it++)
        mySum += *it;
    return mySum;
}
