uint8_t char_map[128];
std::string packed_string;

...
// initialize char_map[]
char_map['0'] = 0;
char_map['1'] = 1;
...
char_map['!'] = 15;
...


char ch1 = mystring[i];
char ch2 = mystring[i + 1];
uint8_t idx1 = char_map[static_cast<int>(ch1)];  // integer range 0-15 representing ch1 - char at pos i
uint8_t idx2 = char_map[static_cast<int>(ch2)];  // integer range 0-15 representing ch2 - char at pos i+1
uint8_t packed = idx1 | (idx2 << 4);             // stuff both in a single 8-bit integer (equivalent to a char)

// append the packed character to the "compressed" string
packed_string.push_back(static_cast<char>(packed)); // or packed_string[dst++] = static_cast<char>(packed) if using an C string
i += 2;                                          // advance by 2 (we processed two characters) in the source string
...
