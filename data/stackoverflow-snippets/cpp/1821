#ifndef FIELD_T_H
#define FIELD_T_H

#include <vector>
#include <type_traits>

template<class T>
class fieldT {
private:
    std::vector<T> _data;

public:
    explicit fieldT( std::vector<T>& data ) : _data( data ) {}

    template<class... Args>
    fieldT( Args&&... args ) : 
      _data { std::forward<Args>( args )... } {}

    std::vector<T> data() {
        return _data;
    }
};

template<class T>
bool isItCorrectT( T t, fieldT<T>& f );

template<class T, class... Args>
bool isItCorrectT( T t, Args... args );

#include ""fieldT.inl""  

#endif // FIELD_T_H 
