template<typename T>
struct type_wrap{
    template <typename U,
              std::enable_if_t<std::is_same<int, U>::value
                               && is_same<int, T>::value>* = nullptr>
    type_wrap(U arg) : value(arg){
        // Int case
        std::cout << ""The wrapped type is "" << typeid(value).name() << std::endl;
        std::cout << ""The wrapped value is "" << value << std::endl;
    }

    template <typename U,
              std::enable_if_t<std::is_same<float, U>::value
                               && is_same<float, T>::value>* = nullptr>
    type_wrap(U arg) : value(arg){
        // float case
        std::cout << ""The wrapped type is "" << typeid(value).name() << std::endl;
        std::cout << ""The wrapped value is "" << value << std::endl;
    }
    T value;
};
