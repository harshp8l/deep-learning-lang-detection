#include <iostream>
#include <array>
#include <initializer_list>
#include <vector>

template<class Container, class Action>
void forEach(Container&& cont, Action&& action)
{
    auto first = std::begin(cont);
    auto last = std::end(cont);
    for( ; first != last ; ++first)
    {
        action(*first);
    }
}

int main()
{
    std::array<int, 4> num{1,2,3,4};

    // type of n is ""whatever works""
    auto emit = [](auto&& n) -> void { std::cout << n * n << std::endl;};
    forEach(num, emit);

    forEach(std::array<double, 4> { 1.0, 2.0, 3.0, 4.0 }, emit);
    forEach(std::initializer_list<double>{ 1.0, 2.0, 3.0, 4.0 }, emit);
    forEach(std::vector<double>{ 1.0, 2.0, 3.0, 4.0 }, emit);

    return 0;
}
