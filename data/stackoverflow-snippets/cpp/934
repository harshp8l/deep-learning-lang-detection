// CHAR.h
#include <iostream>
// STRING.h
#include <iostream>
#include <string>
#include <string.h> //sg7

using namespace std;

class CHAR
{
private:
    char content;
public:
    CHAR();
    CHAR(char);
    char GetContent();
    void SetContent(char);
};


class STRING
{
private:
    CHAR * content;
    int length;
public:
    STRING();
    STRING(const char*);
    STRING(char);
    STRING(const CHAR&);
    STRING& expand(const CHAR&);
    ~STRING();
};

// CHAR.cpp
// #include ""CHAR.h""

CHAR::CHAR()
{
    this->content = '\0';
}

CHAR::CHAR(char)
{
    this->content = 'c';
}

char CHAR::GetContent()
{
    return content;
}

void CHAR::SetContent(char C)
{
    content = C;
}

// STRING.cpp

//#include ""STRING.h""
//#include ""CHAR.h""

STRING::STRING()
{
    this->content = NULL;
    this->length = 0;
}

STRING::STRING(const char *c)
{
    this->length = strlen(c);
    this->content = new CHAR[this->length];
    for (int i = 0; i < this->length; i++)
    {
        this->content[i] = CHAR(c[i]);
    }
}

STRING::STRING(char c)
{
    this->length = 1;
    this->content = new CHAR[1];
    this->content[0] = CHAR(c);
}

STRING::STRING(const CHAR &c)
{
    this->length = 1;
    this->content = new CHAR[1];
    this->content[0] = c; //.SetContent(c.GetContent());
}

STRING& STRING::expand(const CHAR &c)
{

    CHAR *new_content = new CHAR[this->length + 1]; 
    for (int i = 0; i < this->length; i++)
    {
        new_content[i] = this->content[i]; 
    }
    new_content[this->length] = c; 
    if(this->content!=NULL)
    {
        delete[] this->content;
    }
    this->content = new_content;
    this->length++;
    return *this;
}

STRING::~STRING()
{
    if (this->content != NULL)
        delete[]this->content;
}

int main()
{
    CHAR c1, c2('c');
    STRING s1, s2(""s2""), s3('a'), s4(c1);

    s1.expand('a');

    return 0;
}
