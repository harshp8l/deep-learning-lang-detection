// Remove delete statements
vector <Expression*> Addition :: getAdditiveTerms() {
vector <Expression*> terms;
if((obj1->getType() == "Addition" || obj1->getType() == "Subtraction") && (obj2->getType() == "Addition" || obj2->getType() == "Subtraction")) {
    if(obj1->getLeftSide()->getType() == "Integer") {
        Expression* LL = obj1->getLeftSide();
        terms.push_back(LL);
    }
    if(obj1->getRightSide()->getType() == "Integer") {
        Expression* LR = obj1->getRightSide();
        terms.push_back(LR);
    }
    if(obj2->getLeftSide()->getType() == "Integer") {
        Expression* RL = obj2->getLeftSide();
        terms.push_back(RL);
    }
    if(obj2->getRightSide()->getType() == "Integer") {
        Expression* RR = obj2->getRightSide();
        terms.push_back(RR);
    }
}
return terms;
}

// Use pointers
int main() {
    Integer* integer1 = new Integer("1");
    Integer* integer2 = new Integer("-2");
    Addition* add1 = new Addition(integer1, integer2);
    Integer* integer3 = new Integer("6");
    Integer* integer4 = new Integer("-9");
    Addition* add2 = new Addition(integer3, integer4);
    Addition* add3 = new Addition(addit1, addit2);

    vector <Expression*> addTerms = add3->getAdditiveTerms();

    for(int i = 0; i < addTerms.size(); i++)
        cout << addTerms[i]->getValue() << endl;

    delete add3;
    delete add2;
    delete add1;
    delete integer4;
    delete integer3;
    delete integer2;
    delete integer1;
}
