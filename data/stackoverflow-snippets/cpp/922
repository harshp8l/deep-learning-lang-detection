// g++ `pkg-config --cflags sdl2` main.cpp `pkg-config --libs glew sdl2`
#include <GL/glew.h>
#include <SDL.h>
#include <iostream>
#include <string>
#include <cstdlib> 

enum class GameState { PLAY, EXIT };

class MainGame
{
public:
    MainGame();
    ~MainGame();

    void run();

private:
    void processInput();
    void drawGame();

    SDL_Window* _window;
    SDL_GLContext _context;
    int _screenWidth;
    int _screenHeight;

    int _errorCount;

    GameState _gameState;
};

//Function To Display A Error Message When Something Doesnt Work As Inteded/Properly.
void fatalError(std::string errorMsg)
{
    std::cout << errorMsg << std::endl;
    exit( EXIT_FAILURE );
}

//When Called, Inits Most Of The Important Vars, Sets Game State And Does An Error Check
MainGame::MainGame()
{
    _errorCount = 0;
    _window = nullptr;
    _screenWidth = 1024;
    _screenHeight = 768;
    _gameState = GameState::PLAY;

    SDL_Init(SDL_INIT_EVERYTHING);

    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
   _window = SDL_CreateWindow(""Game Engine"", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, _screenWidth, _screenHeight, SDL_WINDOW_OPENGL);
    if (_window == nullptr)
    {
        fatalError(""SDL Window Could Not Be Created."");
        _errorCount += 1;
    }

    _context = SDL_GL_CreateContext(_window);
    if (_context == nullptr)
    {
        fatalError(""SDL_GL Context Could Not Be Created."");
        _errorCount += 1;
    }

    GLenum error = glewInit();
    if (error != GLEW_OK)
    {
        fatalError(""Could Not Initialize Glew."");
        _errorCount += 1;
    }
}

MainGame::~MainGame()
{
    SDL_GL_DeleteContext( _context );
    SDL_DestroyWindow( _window );
}

void MainGame::run()
{
    while (_gameState != GameState::EXIT)
    {
        processInput();
        drawGame();
    }
}

void MainGame::processInput()
{
    SDL_Event evnt;
    while (SDL_PollEvent(&evnt) == true)
    {
        switch (evnt.type)
        {
        case SDL_QUIT:
            _gameState = GameState::EXIT;
            break;
        case  SDL_MOUSEMOTION:
            std::cout << evnt.motion.x << "", "" << evnt.motion.y << ""\n"";
            break;
        }
    }
}

void MainGame::drawGame()
{
    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);
    glClearDepth(1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    SDL_GL_SwapWindow(_window);
}

int main(int argc, char** argv)
{
    MainGame mainGame;
    mainGame.run();
    return EXIT_SUCCESS;
}
