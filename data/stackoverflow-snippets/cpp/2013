double BezierCurve::Curvature(double t) const
    {
        // Nice mathematically perfect formula
        //Vector2 d1 = Tangent(t);
        //Vector2 d2 = Deriv2(t);
        //return (d1.x * d2.y - d1.y * d2.x) / pow(d1.x * d1.x + d1.y * d1.y, 1.5);

        // Get the cubic coefficients like this, I store them in the Bezier
        // class
        /*
        a = p3 + 3.0 * p1 - 3.0 * p2 - p0;
        b = 3.0 * p0 - 6.0 * p1 + 3.0 * p2;
        c = 3.0 * p1 - 3.0 * p0;
        d = p0;
        */


        double dx, dy, ddx, ddy;

        dx = 3 * this->ax * t*t + 2 * this->bx * t + this->cx;
        ddx = 6 * this->ax * t + 2 * this->bx;
        dy = 3 * this->ay * t*t + 2 * this->by * t + this->cy;
        ddy = 6 * this->ay * t + 2 * this->by;

        if (dx == 0 && dy == 0)
            return 0;

        return (dx*ddy - ddx*dy) / ((dx*dx + dy*dy)*sqrt(dx*dx + dy*dy));

    }
