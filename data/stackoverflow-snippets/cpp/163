#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <array>
#include <algorithm>
#include <functional>

int main()
{
  // Test cases.
  std::istringstream lineStream("1,2,3,4\n");
  //std::istringstream lineStream("5,,7,\n");
  //std::istringstream lineStream("9,,11,\n");

  // Vector of 10-char arrays
  std::vector<std::array<char, 10>> output;
  // "NaN" array, instead of recreating it each iteration.
  std::array<char, 10> NaN = { 'N', 'a', 'N'};

  // Split lineStream on 10 characters, or comma, in cell variable.
  // NOTE : Here, I assume you have maximum 10 characters field, but adjust
  // this based on your specific case. Also, this will capture the "\n", so
  // we'll need to handle that.
  for (std::array<char, 10> cell; lineStream.getline(&cell[0], 10, ','); )
  {
      // Replace the \n character with an end of string.
      // NOTE : this is basic character filtering, and doesn't handle
      // tabulations, or windows-style endline, so it should probably be
      // more robust.
      std::replace(cell.begin(), cell.end(), '\n', '\0');

      // Check if cell is empty, and assign it "NaN"      
      if((cell[0] == '\0') || (cell.empty()))
        cell = NaN;
      // Push the cell back to the output vector.
      output.push_back(cell);
  }

  // Display the output vector
  for (auto& a : output)
  {
    std::cout << &a[0] << " ";
  }
