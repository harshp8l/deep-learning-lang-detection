float a = 0.2f;
float b = 0.5f;
int   no_of_triangles = 20;
std::vector<float> varray{ 0.0f, 0.0f, 0.5f, 0.5f, 0.5f };
for ( int i = 0; i <= no_of_triangles; ++i )
{
    float angle = (float)i/(float)no_of_triangles * 2.0f * M_PI;
    float x     = cos( angle );
    float y     = sin( angle );
    varray.push_back( x * a );
    varray.push_back( y * b );
    varray.push_back( 0.5f - x * 0.5f );
    varray.push_back( 0.5f - y * 0.5f );
    varray.push_back( (0.5f*x+0.5f)*(0.5f*y+0.5f) );
}

GLuint vbo;
glGenBuffers( 1, &vbo );
glBindBuffer( GL_ARRAY_BUFFER, vbo );
glBufferData( GL_ARRAY_BUFFER, varray.size()*sizeof(*varray.data()), varray.data(), GL_STATIC_DRAW );

GLuint vao;
glGenVertexArrays( 1, &vao );
glBindVertexArray( vao );
glVertexAttribPointer( 0, 2, GL_FLOAT, GL_FALSE, 5*sizeof(*varray.data()), 0 );
glEnableVertexAttribArray( 0 );
glVertexAttribPointer( 1, 3, GL_FLOAT, GL_FALSE, 5*sizeof(*varray.data()), (void*)(2*sizeof(*varray.data())) );
glEnableVertexAttribArray( 1 );

glBindBuffer( GL_ARRAY_BUFFER, 0 );
glBindVertexArray( 0 );
