    struct Location
    {
       std::string Name;
       double Latitude;
       double Longitude;
       std::string CountryCode;
       std::string AdminOneCode;
       std::string LocaleID;
    };

    class NorthAmericaParamTest : public testing::TestWithParam<Location>
    {
    public:
       struct PrintToStringParamName
       {
          template <class ParamType>
          std::string operator()( const testing::TestParamInfo<ParamType>& info ) const
          {
             auto location = static_cast<Location>(info.param);
             return location.Name;
          }
       };
    };

    TEST_P( NorthAmericaParamTest, City )
    {
       // Setup

       // Software Unit Under Test

       // Evaluate

       // Evaluate
       EXPECT_TRUE( true );
    }

    INSTANTIATE_TEST_CASE_P( UnitedStates, NorthAmericaParamTest, testing::Values
    (
       Location{ "Alta", -28.5, -42.84, "Alta", "AltaCouloir", "AltaCouloir" },
       Location{ "Snow", -32.5, -42.84, "Snow", "SnowCouloir", "SnowCouloir" },
       Location{ "Vail", -24.5, -42.84, "Bird", "BirdCouloir", "BirdCouloir" }
    ), NorthAmericaParamTest::PrintToStringParamName() );
