template<bool B, class T = void> struct my_enable_if          {};
template<        class T       > struct my_enable_if<true, T> { typedef T type; };

template< int Value, typename = void > struct Printer {
    static void doIt() {
        std::cout << ""Printer<"" << Value << ""(even)>::doIt()"" << std::endl;
    }
};

template< int Value > struct Printer< Value, typename my_enable_if<Value & 1>::type > {
    static const char *c_prefix;
    static void doIt() {
        std::cout << ""Printer<"" << c_prefix << Value << ""(odd)>::doIt()"" << std::endl;
    }
};

template<> const char *Printer<1>::c_prefix; // Declaration
template<> const char *Printer<3>::c_prefix; // Declaration

// or since C++17, inline static variable.
template<> inline const char *Printer<5>::c_prefix = ""Five_"";
