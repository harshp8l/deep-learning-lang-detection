//#define BOOST_SPIRIT_X3_DEBUG
#include <iomanip>
#include <iostream>
#include <string>
#include <vector>

#include <boost/algorithm/string/case_conv.hpp> // to_lower
#include <boost/fusion/adapted/struct.hpp>
#include <boost/spirit/home/x3.hpp>

/* Synopsis:
 *
 *    LOAD DLL <file-spec>
 *    LOAD PDB <file-spec>
 *    SET DEBUG {/ON | /OFF}
 *    SET TRACE {/ON | /OFF}
 *
 *    SHOW DEBUG
 *    SHOW MODULE <wildcard-expression> [/SYMBOLS]
 *    SHOW SYMBOLS { [/ALL] [/FULL] [/OUT=<file-spec>] [/TYPE=(+{all,exports,imports})] [wild-card-expression] }...
 *    SHOW TRACE
 */

namespace scl {
    namespace util {
        template <typename Tag> struct FlavouredString : std::string {
            using std::string::string;
            using std::string::operator=;
        };

        template <typename Tag> struct Options {
            using type = int; // TODO typed enums? Requires macro tedium

            std::vector<char const*> _options;
            Options(std::initializer_list<char const*> options) : _options(options) {}
            Options(std::vector<char const*> options) : _options(options) {}

            std::string to_string(type id)              const { return _options.at(id); }
            type         to_id(std::string const& name) const { return find(_options.begin(), _options.end(), name) - _options.begin(); }
        };

        template <typename Tag> using Enum = typename Options<Tag>::type;
        template <typename Tag> struct IcOptions : Options<Tag> { using Options<Tag>::Options; };
    }

    namespace ast {

        using namespace util;
        IcOptions<struct DllPdb>  static const dll_pdb { "DLL",   "PDB"   };
        IcOptions<struct Setting> static const setting { "DEBUG", "TRACE" };
        IcOptions<struct OnOff>   static const on_off  { "OFF",   "ON"    };
        IcOptions<struct SymType> static const sym_type{ "all", "imports", "exports" };

        using Wildcard = FlavouredString<struct _Wild>;
        using Filespec = FlavouredString<struct _Filespec>;

        struct LoadCommand {
            Enum<DllPdb> kind = {};
            Filespec     filespec;
        };

        struct SetCommand {
            Enum<Setting> setting = {};
            Enum<OnOff> value     = {};
        };

        struct ShowSettingCommand {
            Enum<Setting> setting;
        };

        struct ShowModuleCommand {
            Wildcard wildcard;
            bool symbols = false;
        };

        using SymbolTypes = std::vector<Enum<SymType> >; 

        struct ShowSymbolsCommand {
            bool all  = false;
            bool full = false;
            Filespec out;
            SymbolTypes types;
            Wildcard wildcard;
        };

        using Command = boost::variant<
            LoadCommand,
            SetCommand,
            ShowSettingCommand,
            ShowModuleCommand,
            ShowSymbolsCommand
        >;
    }
}

#ifndef NDEBUG // for debug printing
namespace scl { namespace ast {
    static inline std::ostream &operator<<(std::ostream &os, Wildcard const &w) { return os << std::quoted(w); }
    static inline std::ostream &operator<<(std::ostream &os, Filespec const &s) { return os << std::quoted(s); }
    static inline std::ostream &operator<<(std::ostream &os, LoadCommand const &cmd) {
        return os << "LOAD " << dll_pdb.to_string(cmd.kind) << " " << cmd.filespec ;
    }
    static inline std::ostream &operator<<(std::ostream &os, SetCommand const &cmd) {
        return os << "SET " << setting.to_string(cmd.setting) << " /" << on_off.to_string(cmd.value);
    }
    static inline std::ostream &operator<<(std::ostream &os, ShowSettingCommand const &cmd) {
        return os << "SHOW " << setting.to_string(cmd.setting);
    }
    static inline std::ostream &operator<<(std::ostream &os, ShowModuleCommand const &cmd) {
        return os << "SHOW MODULE " << cmd.wildcard << (cmd.symbols?" /SYMBOLS":"");
    }
    static inline std::ostream &operator<<(std::ostream &os, ShowSymbolsCommand const &cmd) {
        os << "SHOW SYMBOLS";
        if (cmd.all)          os << " /ALL";
        if (cmd.full)         os << " /FULL";
        if (cmd.out.size())   os << " /OUT=" << cmd.out;
        if (cmd.types.size()) { 
            os << " /TYPE=(";
            bool first = true;
            for (auto type : cmd.types)
                os << (std::exchange(first, false)?"":",") << sym_type.to_string(type);
            os << ")";
        }
        return os << " " << cmd.wildcard;
    }
} } 
#endif

BOOST_FUSION_ADAPT_STRUCT(scl::ast::LoadCommand,        kind, filespec)
BOOST_FUSION_ADAPT_STRUCT(scl::ast::SetCommand,         setting, value)
BOOST_FUSION_ADAPT_STRUCT(scl::ast::ShowSettingCommand, setting)
BOOST_FUSION_ADAPT_STRUCT(scl::ast::ShowModuleCommand,  wildcard, symbols)

// Grammar for simple command language
namespace scl {
    namespace x3 = boost::spirit::x3;

    // (case insensitive) keyword handling
    static auto kw        = [](auto p) { return x3::lexeme[p >> !(x3::graph - x3::char_("/=,()"))]; };
    static auto ikw       = [](auto p) { return x3::no_case [kw(p)]; };
    static auto qualifier = [](auto p) { return x3::lexeme['/' >> ikw(p)]; };

    // Options and CiOptions
    namespace util {
        template <typename Tag>
        auto as_spirit_parser(Options<Tag> const& o, bool to_lower = false) {
            x3::symbols<typename Options<Tag>::type> p;
            int n = 0;
            for (std::string el : o._options) {
                if (to_lower) boost::to_lower(el);
                p.add(el, n++);
            }
            return kw(p);
        }

        template <typename Tag>
        auto as_spirit_parser(IcOptions<Tag> const& o) {
            return x3::no_case [ as_spirit_parser(o, true) ];
        }
    }

    // shorthand rule declarations
    #define RULE(name, Attr) static auto const name = x3::rule<struct _##Attr, ast::Attr>{#Attr}
    #define DEF_RULE(Attr) RULE(Attr, Attr)

    using namespace x3;

    auto const bare_string
        = lexeme[+char_("a-zA-Z0-9$_.\\*?+-")]; // bare string taken from old "param" rule

    auto const quoted_string 
        = lexeme['"' >> *(('\\' > char_) | ~char_('"')) >> '"'];

    DEF_RULE(Filespec) = quoted_string | bare_string;
    DEF_RULE(Wildcard) = lexeme[+char_("a-zA-Z0-9$_.\\*?+-")];

    DEF_RULE(LoadCommand)
        = ikw("load") >> ast::dll_pdb >> Filespec;

    DEF_RULE(SetCommand)
        = ikw("set") >> ast::setting >> qualifier(ast::on_off);

    DEF_RULE(ShowSettingCommand)
        = ikw("show") >> ast::setting;

    DEF_RULE(ShowModuleCommand)
        = ikw("show") >> ikw("module") >> Wildcard >> matches[qualifier("symbols")];

    // Note the IIFE idiom allows for "very local" helper definitions
    DEF_RULE(SymbolTypes) = [] {
            auto type = as_parser(ast::sym_type);
            return '(' >> (type % ',') >> ')' | repeat(1) [ type ];
        }(); // IIFE idiom

    RULE(ShowSymbolsQualifiers, ShowSymbolsCommand)
        = [] {
            auto set = [](auto member, auto p) {
                auto propagate = [member](auto& ctx) {
                    traits::move_to(_attr(ctx), _val(ctx).*(member));
                };
                return as_parser(p)[propagate];
            };

            using T = ast::ShowSymbolsCommand;;
            return qualifier("all")  >> set(&T::all, attr(true))
                 | qualifier("full") >> set(&T::full, attr(true))
                 | qualifier("out")  >> set(&T::out, '=' >> Filespec)
                 | qualifier("type") >> set(&T::types, '=' >> SymbolTypes)
                 | set(&T::wildcard, Wildcard);
        }(); // IIFE idiom

    DEF_RULE(ShowSymbolsCommand)
        = ikw("show") >> ikw("symbols") >> *ShowSymbolsQualifiers;

    DEF_RULE(Command)
        = skip(blank)[ LoadCommand | SetCommand | ShowSettingCommand | ShowModuleCommand | ShowSymbolsCommand ];

#undef DEF_RULE
#undef RULE
} // End namespace scl

int main() {
    for (std::string const str : {
        "load dll test.dll",
        "LOAD pdb \"test special.pdb\"",
        "LOAD pDb test.pdb",
        "set debug /on",
        "show debug",
        "SHOW module test.dll/symbols",
        "SHOW MODULE TEST.DLL /SYMBOLS",
        "SHOW module test.dll / symbols",
        "SHOW module test.dll",
        "show symbols/type=exports test*",
        "show symbols/type=(exports,imports) test*",
        "show symbols test.dll/type=(imports,exports)",
        "show symbols test.dll/tyPE=(imports,exports)",
        "show symbols s*/out=s.txt",
        "show symbols /all /full",
    }) {
        std::cout << " ======== " << std::quoted(str) << std::endl;

        auto b = str.begin(), e = str.end();
        scl::ast::Command cmd;

        if (parse(b, e, scl::Command, cmd))
            std::cout << " - Parsed: " << cmd << std::endl;
        if (b != e)
            std::cout << " - Remaining unparsed: " << std::quoted(std::string(b, e)) << std::endl;
    }
}
