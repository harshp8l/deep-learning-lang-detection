.hpp:
template<typename Type>
Type Qoo(Type const&, std::function<Type(Type)>&&);

template<typename Type, typename UnaryOp>
Type Qoo(Type const&x, UnaryOp&&func)
{
   return Qoo(x, std::function<Type(Type)>{func});
}

.cpp
template<typename Type>
Type Qoo(Type const&t, std::function<Type(Type)>&&func);
{
   // some lengthy code calling func()
}
// explicit instantiations
template int Qoo(int const&, std::function<int(int)>&&);
template short Qoo(short const&, std::function<short(short)>&&);
...
