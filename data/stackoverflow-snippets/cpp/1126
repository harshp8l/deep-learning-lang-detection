// using x1 as origin:
double x1x0 = 0, x1y0 = 0, x2x0 = x2x - x1x, x2y0 = x2y - x1y;

double x2x3x0 = 1;
// calculate y-value, using the fact that dot-product of orthogonal vectors is 0
double x2x3y0 = x2x0*x2x3x0 / (-1 * x2y0);
// calculate length of vector x2x3
double length_e_vec_x2_x30 = sqrt(pow(x2x3x0, 2) + pow(x2x3y0, 2));
// stretch vector to provided witdh
x2x3x0 = x2x3x0*width / length_e_vec_x2_x30;
x2x3y0 = x2x3y0*width / length_e_vec_x2_x30;
// since x2x3 and x1x4 are equal, simple addition remains
double x3x0, x3y0, x4x0, x4y0;
x3x0 = x2x0 + x2x3x0;
x3y0 = x2y0 + x2x3y0;
x4x0 = x1x0 + x2x3x0;
x4y0 = x1y0 + x2x3y0;

// check results
cout << ""X1: "" << x1x0 << ""/"" << x1y0 << endl;
cout << ""X2: "" << x2x0 << ""/"" << x2y0 << endl;
cout << ""X3: "" << x3x0 << ""/"" << x3y0 << endl;
cout << ""X4: "" << x4x0 << ""/"" << x4y0 << endl;

// verify results
cout << ""Dotproduct should be 0: "" << (x2x0*x2x3x0) + (x2y0*x2x3y0) << endl;

// compare results (adding offset before comparing):
cout << ""X3 to X30: "" << x3x0+x1x-x3x << ""/"" << x3y0+x1y-x3y << endl;
cout << ""X4 to X40: "" << x4x0 +x1x-x4x << ""/"" << x4y0 +x1y-x4y << endl;
