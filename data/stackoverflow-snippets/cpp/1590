template <typename T>
struct type_wrapper { using type = T; };

template <typename T>
inline constexpr type_wrapper<T> t{};

template <typename K, typename V>
struct pair 
{ 
    K _k; 
    V _v;

    constexpr pair(K k, V v) : _k{k}, _v{v} { }
};

template <typename... Ts>
struct map : Ts...
{ 
    constexpr map(Ts... xs) : Ts{xs}... { }
};

constexpr auto my_map = map{
    pair{[]{ return "foo"; }, t<FooObject>},
    pair{[]{ return "bar"; }, t<BarObject>},
    pair{[]{ return "baz"; }, t<Object3>}
};
