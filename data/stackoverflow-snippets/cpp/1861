class Test
{
public:
    template <class Class, typename Method>
    void addMemFn(Class* obj, Method method) {
        auto func = std::bind(method, obj, std::placeholders::_1, std::placeholders::_2);
        m_funcs.push_back(func);
    }

private:
    std::list<std::function<void(const std::string&, const std::string&)>> m_funcs;
};


class SomeClass
{
public:
    void funcAll(const std::string& name, const std::string& value) { std::cout << ""SomeClass func""; }
};

class SomeClass2
{
public:
    void func2(const std::string& name, const std::string& value) { std::cout << ""SomeClass2 func""; }
};


int main()
{
    Test test;
    SomeClass someClass;
    SomeClass2 someClass2;

    test.addMemFn(&someClass, &SomeClass::funcAll);
    test.addMemFn(&someClass2, &SomeClass2::func2);

    return 0;
}
