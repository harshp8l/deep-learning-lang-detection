class InterfaceClass {
public:
    virtual void handle() = 0;
};
class Calling{
public:
    Calling(InterfaceClass * owner) {
        this->owner = owner;
    }
    void doStuff() {
        owner->handle();
    }
    ~Calling() { delete owner; }
private :
    InterfaceClass* owner;
};

class Class1 : public InterfaceClass {
public:
    void handle() override
    {
        std::cout << "Class1"<<std::endl;
    }
};

class Class2 : public InterfaceClass {
public:
    void handle()
    {
        std::cout << "Class2" << std::endl;;
    }
};

int main(int argc, char** argv)
{
    Calling c1(new Class1());
    c1.doStuff();
    Calling c2(new Class2());
    c2.doStuff();
}
