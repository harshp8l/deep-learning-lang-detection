#include <stdio.h>
#include <stdbool.h>
#include <pthread.h>

#define startTask(task, priority) startTask(#task, task, priority)
#define stopTask(task) stopTask(#task)

void dictionaryAdd(char *key, pthread_t threadID)
{
    printf(""Adding key: %s\n"", key);
    // add the key with its associated threadID to the dictionary
}

bool dictionaryFind(char *key, pthread_t *threadID)
{
    printf(""Finding key: %s\n"", key);
    // find the key in the dictionary and get the associated threadID
    *threadID = 0;
    return true;
}

void dictionaryRemove(char *key)
{
    // remove the key and associated value from the dictionary
    printf(""Removing key: %s\n"", key);
}

void startTask(char *name, ...)
{
    pthread_t threadID = 0;
    pthread_create(&threadID, ...);
    dictionaryAdd(name, threadID);
}

void stopTask(char *name)
{
    pthread_t threadID;
    if (dictionaryFind(name, &threadID))
    {
        pthread_cancel(threadID);
        dictionaryRemove(name);
    }
}

void *foo(void *arg)
{
    return NULL;
}

int main(void)
{
    startTask(foo, 10);
    stopTask(foo);
}
