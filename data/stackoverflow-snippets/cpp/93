#include <boost/range/adaptors.hpp>
#include <boost/range/algorithm.hpp>
#include <boost/range/irange.hpp>
#include <boost/array.hpp>
#include <boost/foreach.hpp>
#include <boost/assign.hpp>
#include <boost/phoenix.hpp>
#include <iostream>

using namespace boost::adaptors;
using namespace boost::phoenix::arg_names;
using std::vector;

int main() {
    char const* ab[] = { ""a"", ""b"" };
    // who needs c++11 for ranged-for?
    BOOST_FOREACH(char const* sz, ab) std::cout << sz << ""\n"";

    // who needs c++11 for lambdas?
    boost::for_each(ab, std::cout << arg1 << ""\n"");

    // who needs c++11 for initializer lists?
    vector<int> v;
    using boost::assign::operator+=; // very dubious magic, but hey, we're having fun
    v += 1, 2, 3, 4, 5;

    // etc.
    boost::for_each(v | transformed(arg1 * 2) | filtered(arg1 % 3), std::cout << arg1 << ""; "");
    std::cout << '\n';

    boost::for_each(boost::irange(12, 24) | transformed(arg1 * 2) | filtered(arg1 % 3), std::cout << arg1 << ""; "");
    std::cout << '\n';
}
