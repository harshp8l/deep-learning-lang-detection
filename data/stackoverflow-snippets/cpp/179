#include <tuple>

// Implementation detail of a simplified std::apply from C++17
template < typename F, typename Tuple, std::size_t ... I >
constexpr decltype(auto)
apply_impl(F&& f, Tuple&& t, std::index_sequence< I ... >){
    return static_cast< F&& >(f)(std::get< I >(static_cast< Tuple&& >(t)) ...);
}

// Implementation of a simplified std::apply from C++17
template < typename F, typename Tuple >
constexpr decltype(auto) apply(F&& f, Tuple&& t){
    return apply_impl(
        static_cast< F&& >(f), static_cast< Tuple&& >(t),
        std::make_index_sequence< std::tuple_size<
            std::remove_reference_t< Tuple > >::value >{});
}

// Capture args and add them as additional arguments
template < typename Lambda, typename ... Args >
constexpr auto capture_call(Lambda&& lambda, Args&& ... args){
    return [
        lambda = static_cast< Lambda&& >(lambda),
        capture_args = std::make_tuple(static_cast< Args&& >(args) ...)
    ](auto&& ... original_args)mutable{
        return apply([&lambda](auto&& ... args){
            lambda(static_cast< decltype(args)&& >(args) ...);
        }, std::tuple_cat(
            std::forward_as_tuple(original_args ...),
            std::move(capture_args)
        ));
    };
}
