#include <iostream>

class Base {};
class A : Base {};
class B : Base {};
class C : Base {};

template<typename T, typename U> using FPTR = void (*)(const T&, const U&);

// instead of allocating a run-time map, create a map on compiler's heap at compile-time
template<typename U, typename V> static FPTR<U const &, V const &> funcMap;

void nyan(A const &, A const &) { std::cout << ""Nyan"" << std::endl; }
void meow(B const &, B const &) { std::cout << ""Meow"" << std::endl; }

int main() {
    funcMap<A, A> = nyan;
    funcMap<B, B> = meow;
    funcMap<A, A>(A{}, A{});
}
