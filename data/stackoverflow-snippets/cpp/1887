#include <algorithm>
#include <chrono>
#include <fstream>
#include <list>
#include <iostream>
...

struct phone_record {
  std::string name;
  std::string email;
  std::string address;
  std::time_t birth_date;
  std::string phonenumber;
};

std::ostream& operator<<(std::ostream& to, const phone_record& r) {
return to << r.name << ' ' << r.email << ' ' << r.address << ' ' << r.birth_date << ' ' << r.phonenumber;
}

class phone_book {
public:
  explicit phone_book(const std::string& file_name):
    book_()
  { 
   std::ifstream file(file_name);
   // I will load my phone book data from file here
   ....
  }
  void save(const std::string& file_name) {
   std::ofstream out(file_name);
   // this will store my records into file
   std::foreach(book_.begin(), book_.end(), [out] (const phone_record& r) {
      out << r << std::endl;
   } );
   out.close();
  }
  void add_record(const phone_record& record) {
    book_.push_back(record);
  }
  void remove_record_by_name(const std::string& name) {
     book_.remove_if(book_.begin(), book_.end(), [name] (const 
      phone_record& rec) {
        return rec.name == name;
     });
  }
  // I'll add a few more functions to remove records by another search criterias
private:
  std::list<phone_record> book_;
};

int main(int argc, const char **argv) {
  // I'll obtain file name from command line here
  // and check file exit
  phone_book book(file_name);
  book_.remove(""Bob Dylan"");
  std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
  book_.add( {""Bob Dylan"", ""bob_dylan.bob@bob.se"", ""Bobdylansroad"", std::chrono::system_clock::to_time_t(now), ""2343298492384"" } );
  phone_book.save(file_name);
  return 0;
}
