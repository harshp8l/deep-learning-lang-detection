template<typename T>
class VectorWrapper {
public:
    VectorWrapper(const vector<T>& v) : reference(&v) { }
    VectorWrapper(const vector<T*>& v) : pointer(&v) { }

    const T& at(int idx) const {
        if (reference)
           return (*reference)[idx];
        return *(*pointer)[idx];
    }

    // etc. for size() and so on. You could probably have
    // this class derive from std::vector and reimplement its
    // methods to switch between `reference` and `pointer`.

private:
    const vector<T>* reference = nullptr;
    const vector<T*>* pointer = nullptr;
};

void do_thing(VectorWrapper<C> wrapper) {
    wrapper.at(0).whatever();
}
