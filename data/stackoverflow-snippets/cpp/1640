#include <iostream>

using namespace std;

class dlist {

    struct node {
        int value;
        node* next;
        node* prev;
    };

    node* _head = nullptr;
    node* _tail = nullptr;

  public:
    dlist() { }
    ~dlist() {
        node* iter = _head;
        while (iter) {
            node* victim = iter;
            iter = iter->next;
            delete victim;
        }
    }

    node* head() const { return _head; }
    node* tail() const { return _tail; }

    void insert (int value)
    {
        node *newnode = new node {value, nullptr, nullptr};

        if (_head == nullptr)
            _head = newnode;
        else {
            node* iter = _head;
            for (; iter->next; iter = iter->next) {}
            newnode->prev = iter;
            _tail = iter->next = newnode;
        }
    }

    void print () {
        for (node* iter = _head; iter; iter = iter->next)
            cout << " " << iter->value;
        cout << "\n";
    }

    void rprint() {
        for (node* iter = _tail; iter; iter = iter->prev)
        cout << " " << iter->value;
        cout << "\n";
    }
};

int main (void) {

    dlist list;
    int tmp;

    while (cin >> tmp)
        list.insert(tmp);

    list.print();
    list.rprint();
}
