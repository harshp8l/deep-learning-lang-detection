class IMapInitializer
{
public:
    virtual void InitMap(std::vector<std::vector<int>>& map) = 0;
    virtual ~IMapInitializer(){}
};

class HardcordeMapInitializer : public IMapInitializer
{
public:
    virtual void InitMap(std::vector<std::vector<int>>& map) override
    {
        map = {{1,2,3},{1,2,3},{1,2,3}};
    }
};

class FileMapInitializer : public IMapInitializer
{
public:
    virtual void InitMap(std::vector<std::vector<int>>& map) override
    {
        //Read map from file
    }
};

//...
class TForm1 : public TForm
{
private:    ...
public:
    __fastcall TForm1(TComponent* Owner, IMapInitializer& mapInitializer );
    std::vector<std::vector<int>> map;
};

//...
__fastcall TForm1::TForm1(TComponent* Owner, IMapInitializer& mapInitializer ) : TForm(Owner) {

mapInitializer.InitMap(map);
