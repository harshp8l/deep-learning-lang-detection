template <typename ValueType>
struct ValueGetter
{ 
    static Value& get(ValueType& value)
    {
        return value;
    }
};
template <typename Key, typename Value>
struct ValueGetter<std::pair<const Key, Value>>
{ 
    using ValueType = std::pair<const Key, Value>; 
    static Value& get(ValueType& value)
    {
        return value.second;
    }
};

template <typename ValueType>     
auto& getValue(ValueType& value)
{
    return ValueGetter<Value>::get(value);
}

template<typename T>
void foo(T &t)
{
    for (auto iter = t.begin(); iter != t.end(); ++iter)
    {
        printf("%d\n", getValue(*iter)); 
    }

}
