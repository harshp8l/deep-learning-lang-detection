namespace dj {
 // Move a range of values
template<class Ptr, class Ptr2>
Ptr2 move(Ptr src, Ptr end, Ptr2 dest) {
    using value_type = typename std::remove_reference<decltype(*src)>::type;
    if constexpr (std::is_trivially_copyable_v<value_type>) {
        return std::copy(src, end, dest);
    } else {
        while (src != end) {
            *dest = std::move(*src);
            ++src; ++dest;
        }
    }
    return dest;
}

// Merge using move-semantics
template<class inPtr, class outPtr, class Prd>
outPtr merge(inPtr first1, inPtr last1,
    inPtr first2, inPtr last2,
    outPtr d_first,
    Prd comp)
{
    using value_type = typename 
    std::remove_reference<decltype(*first1)>::type;
    if constexpr (std::is_trivially_copyable_v<value_type>) {
        return std::merge(first1, last1, first2, last2, d_first, comp);
    } else {
        for (; first1 != last1; ++d_first) {
            if (first2 == last2) {
                return dj::move(first1, last1, d_first);
            }
            if (comp(*first2 , *first1)) {
                *d_first = std::move(*first2);
                ++first2;
            } else {
                *d_first = std::move(*first1);
                ++first1;
            }
        }
        return dj::move(first2, last2, d_first);
    }
}
}
using namespace std;

using A = int; // Or whatever
void f4( vector<A>& v1,  vector<A>& v2) {
    sort(v2.begin(), v2.end()); 
    vector<A> ret(v1.size() + v2.size());
    dj::merge(v1.begin(), v1.end(), v2.begin(), v2.end(), ret.begin(), less<>());
    ret.erase( unique( ret.begin(), ret.end() ), ret.end() );
    swap(v1, ret);
}
