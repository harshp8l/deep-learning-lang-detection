size_t get_union(short *set1, unsigned size1, short *set2, unsigned size2, short *union_array, unsigned size_union) {
    size_t count = 0;

    // TODO:: Make sure that the arrays are already sort
    // todo:: or use the following two commands:
    qsort(set1, size1, sizeof(*set1), [](const void * a, const void * b) -> int{
        return ( *(short*)a - *(short*)b );
    });
    qsort(set2, size2, sizeof(*set2), [](const void * a, const void * b) -> int{
        return ( *(short*)a - *(short*)b );
    });

    while (size1 && size2) {
        if (*set1 > *set2) {
            ++set2;
            --size2;
        } else if (*set1 < *set2) {
            ++set1;
            --size1;
        } else {
            *union_array++ = *set1++;
            --size1;
            ++set2;
            --size2;
            ++count;
        }
    }

    return count;
}

int main () {
    short set1[] = {1, 0, 15, 35, 200, 12};
    short set2[] = {50, 0, 15, 0, 200, 12};
    size_t size = sizeof(set1) / sizeof(*set1);
    short union_arr[size];
    size_t count;
    count = get_union(set1, size, set2, size, union_arr, size);

    cout << count << endl;
    for (size_t i = 0; i < count; i++) {
        cout << union_arr[i] << "" "";
    }
    cout << endl;

    return 0;
}
