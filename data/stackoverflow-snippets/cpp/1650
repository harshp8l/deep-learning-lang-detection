template<int N>
class Matrix<N>::DiagonalIterator {
    Matrix<N>& m;
    int row;
    int column;
public:
    using difference_type = int;
    using value_type = int;
    using pointer = int*;
    using reference = int&;
    using iterator_category = std::input_iterator_tag;

    DiagonalIterator(Matrix<N>& m, int row, int column)
    : m(m), row(row), column(column) {
    }

    auto operator*() -> int& {
        return m.inner[row*N + column];
    }

    auto operator++() -> Matrix<N>::DiagonalIterator& {
        if (row == N-1) {
            row = N-column;
            column = 0;
        } else if (column == N-1) {
            column = N-2-row;
            row = 0;
        } else {
            ++row;
            ++column;
        }

        return *this;
    }
};
