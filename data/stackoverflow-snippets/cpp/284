template<class Unit, class=void>
struct default_unit_value {};

template<class Unit,
  std::enable_if_t< std::is_integral<Unit>{} >
>
struct default_unit_value:std::integral_constant<Unit, 1> {};

template<class T, class Unit=std::ptrdiff_t>
struct PointerIterator {
  PointerIterator(T* p = nullptr, Unit u = default_unit_value<Unit>::value):
    ptr(p), unit(u)
  {}
private:
  T* ptr;
  Unit unit; // actually use a compressed pair, in case Unit is stateless
};
