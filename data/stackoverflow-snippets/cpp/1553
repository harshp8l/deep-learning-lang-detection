# include <iostream>
# include <typeinfo>

template <class T> 
class A
{
public:
    static const std::type_info& getClassType()
    {
        return typeid(T);
    }
};

class B : public A<B>
{ /* ... */ };

class C : public A<C>
{ /* ... */};

class D : public A<D>
{ /* ... */};

int main()
{
    B b; C c; D d;
    auto& b_type = b.getClassType();
    auto& c_type = c.getClassType();
    auto& d_type = d.getClassType();

    std::cout << b_type.name() << std::endl;
    std::cout << c_type.name() << std::endl;
    std::cout << d_type.name() << std::endl;
}
