template<typename T>
struct type_wrap;

template<>
struct type_wrap<float>
{
    type_wrap(float&& rrT) :value(rrT) {
        cout << ""The wrapped type is "" << typeid(value).name() << endl;
        cout << ""The wrapped value is "" << value << endl;
    }

    float& value;
};

template<>
struct type_wrap<int>
{
    type_wrap(int&& rrT) :value(rrT) {
        cout << ""The wrapped type is "" << typeid(value).name() << endl;
        cout << ""The wrapped value is "" << value << endl;
    }

    int& value;
};
