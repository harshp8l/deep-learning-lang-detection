#include <iostream>
#include <algorithm>
#include <map>
#include <iterator>

int main() 
{
    const size_t M = 5;
    const size_t N = 6;
    int a[M][N] = 
    {
        { 1, 1, 1, 1, 1, 1 },
        { 1, 1, 1, 1, 1, 0 },
        { 1, 1, 1, 1, 0, 0 },
        { 1, 1, 1, 1, 1, 0 },
        { 1, 1, 1, 1, 1, 1 }
    };

    auto comp = []( const int ( *a )[N], const int ( *b )[N] )
    {
        return std::lexicographical_compare( 
            std::begin( *a ), std::end( *a ), 
            std::begin( *b ), std::end( *b ) );
    };

    std::map<const int(*)[N], size_t, decltype( comp )> m( comp );

    for ( const int ( *row )[N] = a; row != a + M; ++row )
    {
        ++m[row];
    }

    for ( const auto &p : m )
    {
        if ( p.second == 1 )
        {
            std::cout << '[' 
                      << std::distance( std::cbegin( a ), p.first ) 
                      << "]: ";
            for ( int x : *p.first ) std::cout << x << ' ';
            std::cout << std::endl;
        }
    }

    return 0;
}
