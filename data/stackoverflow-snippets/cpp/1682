#include <iostream>

using fptr = void (*)();

class B {
    public:
    virtual void func() {
        bfunc();
    }
    static fptr bfunc;
};
fptr B::bfunc;

class A : public B{
    public:
    void func() override {
        afunc();
    }
    static fptr afunc;
};
fptr A::afunc;

class C : public B{
    public:
    void func() override {
        cfunc();
    }
    static fptr cfunc;
};
fptr C::cfunc;

void funcA(){
    std::cout<<""A""<<std::endl;
}
void funcB(){
    std::cout<<""B""<<std::endl;
}
void funcC(){
    std::cout<<""C""<<std::endl;
}

int main(){
    B b=B();
    B b2=B();
    A a=A();
    A a2=A();
    C c=C();
    C c2=C();
    B::bfunc=funcB;
    A::afunc=funcA;
    C::cfunc=funcC;
    a.func();
    b.func();
    c.func();
    a2.func();
    b2.func();
    c2.func();

    B* c3 = new C;
    c3->func();
    delete c3;
}
