{ 
    std::random_device rd; // create an instance of our device to seed with
    std::mt19937 gen;      // create an instance of our generator (engine)
    gen.seed( rd() ); // This seeds the generator (engine)
    // Now we need a distribution along with its data type
    // there are different versions of these distributions for different types
    // Some are for integral types while others are for floating point types

    // Here we want a uniform distribution for int so we default the template
    std::uniform_int_distribution<> dist(0, 100); //random from [0,100]
    // otherwise we could of done
    std::uniform_int_distribution<unsigned int> dist2( 0, 50 ); // random from [0, 50]

    // There are other types of distributions
    std::normal_distribution<> a;
    std::poisson_distribution<> b;
    // etc.

    // If the distributions say ""real"" they are floating point types
    std::uniform_real_distribution<float> f;
    std::uniform_real_distribution<double> d;

    // Just as there are different distributions there also other
    // generators or engines beside the mersenne twister.

    // There is another way besides using `random_device` to seed the generator
    // you can use <chrono> header to use `std::chrono::high_resolution_clock
    // to seed the generator
    // You can also seed by const value 
    // and you can use std::seed_seq;
}
