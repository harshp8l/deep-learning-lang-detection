inline cplx cplx::operator+() const {
    return +std::complex<double>( *this );
}

inline cplx cplx::operator+( const cplx& z ) const {
    return std::complex<double>( *this ) + std::complex<double>( z );
}

inline cplx cplx::operator+( const double& r ) const {
    return std::complex<double>( *this ) + r;
}

inline cplx cplx::operator+( const int& i ) const {
    return std::complex<double>( *this ) + double( i );
}

inline cplx operator+( const double& r, const cplx& z ) {
    return r + std::complex<double>( z );
}

inline cplx operator+( const int& i, const cplx& z ) {
    return double( i ) + std::complex<double>( z );
}

inline cplx cplx::operator-() const {
    return -std::complex<double>( *this );
}

inline cplx cplx::operator-( const cplx& z ) const {
    return std::complex<double>( *this ) - std::complex<double>( z );
}

inline cplx cplx::operator-( const double& r ) const {
    return std::complex<double>( *this ) - r;
}

inline cplx cplx::operator-( const int& i ) const {
    return std::complex<double>( *this ) - double( i );
}

inline cplx operator-( const double& r, const cplx& z ) {
    return r - std::complex<double>( z );
}

inline cplx operator-( const int& i, const cplx& z ) {
    return double( i ) - std::complex<double>( z );
}

inline cplx cplx::operator*( const cplx& z ) const {
    return std::complex<double>( *this )*std::complex<double>( z );
}

inline cplx cplx::operator*( const double& r ) const {
    return std::complex<double>( *this )*r;
}

inline cplx cplx::operator*( const int& i ) const {
    return std::complex<double>( *this )*double( i );
}

inline cplx operator*( const double& r, const cplx& z ) {
    return r * std::complex<double>( z );
}

inline cplx operator*( const int& i, const cplx& z ) {
    return double( i )*std::complex<double>( z );
}

inline cplx cplx::operator/( const cplx& z ) const {
    return std::complex<double>( *this ) / std::complex<double>( z );
}

inline cplx cplx::operator/( const double& r ) const {
    return std::complex<double>( *this ) / r;
}

inline cplx cplx::operator/( const int& i ) const {
    return std::complex<double>( *this ) / double( i );
}

inline cplx operator/( const double& r, const cplx& z ) {
    return r / std::complex<double>( z );
}

inline cplx operator/( const int& i, const cplx& z ) {
    return double( i ) / std::complex<double>( z );
}

inline cplx sin( const cplx& z ) {
    return sin( std::complex<double>( z ) );
}

inline cplx sinh( const cplx& z ) {
    return sinh( std::complex<double>( z ) );
}

inline cplx cos( const cplx& z ) {
    return cos( std::complex<double>( z ) );
}

inline cplx cosh( const cplx& z ) {
    return cosh( std::complex<double>( z ) );
}

inline cplx tan( const cplx& z ) {
    return tan( std::complex<double>( z ) );
}

inline cplx tanh( const cplx& z ) {
    return tanh( std::complex<double>( z ) );
}

inline cplx log10( const cplx& z ) {
    return log10( std::complex<double>( z ) );
}

inline cplx log( const cplx& z ) {
    return log( std::complex<double>( z ) );
}

inline cplx sqrt( const cplx& z ) {
    return sqrt( std::complex<double>( z ) );
}

inline cplx exp( const cplx& z ) {
    return exp( std::complex<double>( z ) );
}

inline cplx pow( const cplx& a, const cplx& b ) {
    return pow( std::complex<double>( a ), std::complex<double>( b ) );
}

inline cplx pow( const cplx& a, const double& b ) {
    return pow( std::complex<double>( a ), b );
}

inline cplx pow( const cplx& a, const int& b ) {
    return pow( std::complex<double>( a ), double( b ) );
}

inline cplx pow( const double& a, const cplx& b ) {
    return pow( a, std::complex<double>( b ) );
}

inline cplx pow( const int& a, const cplx& b ) {
    return pow( double( a ), std::complex<double>( b ) );
}
