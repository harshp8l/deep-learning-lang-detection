#include <boost/graph/adjacency_list.hpp>
#include <fstream>

struct edgeProperties {
    double weight;
};

using Graph = boost::adjacency_list<boost::vecS, boost::vecS,boost::directedS, boost::no_property, edgeProperties>;

void initializeGraph(Graph &g, Graph::vertex_descriptor &start, Graph::vertex_descriptor &end, std::ifstream &fin)
// Initialize g using data from fin.  Set start and end equal to the start and end nodes.
{
    edgeProperties e;

    int n, i, j;
    int startId, endId;
    fin >> n;
    fin >> startId >> endId;
    Graph::vertex_descriptor v;

    // Add nodes.
    for (int i = 0; i < n; i++) {
        v = add_vertex(g);
        if (i == startId)
            start = v;
        if (i == endId)
            end = v;
    }

    while (fin.peek() != '.' && fin >> i >> j >> e.weight) {
        add_edge(i, j, e, g);
    }
}

#include <boost/graph/graph_utility.hpp>

int main() {
    std::ifstream infile("input.txt");
    Graph g;
    Graph::vertex_descriptor start, end/*, curr*/;
    initializeGraph(g, start, end, infile);

    print_graph(g);
}
