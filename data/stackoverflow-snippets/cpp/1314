glm::mat4 model = glm::mat4(1.0f);
model = glm::translate(model,glm::vec3(0.5f,0.7f,0.f));
model = glm::scale(model,glm::vec3(1.f));

glUniformMatrix4fv(glGetUniformLocation(shaderProgram,"model"),1,GL_FALSE,glm::value_ptr(model));
glm::mat4 view = glm::lookAt(glm::vec3(-1,-1,-1),glm::vec3(0,0,0),glm::vec3(0,0,1));
glUniformMatrix4fv(glGetUniformLocation(shaderProgram,"view"),1,GL_FALSE,glm::value_ptr(view));

glm::mat4 project = glm::ortho( -1.0f, 1.0f, -1.0f, 1.0f, -1.0f, 10.0f );
int prj_loc = glGetUniformLocation(shaderProgram,"project");
glUniformMatrix4fv(prj_loc,1,GL_FALSE,glm::value_ptr(project));

bool runOnce=true;
while(!glfwWindowShouldClose(window)){ 
    glClearColor(0.1f,0.1f,0.1f,1.0f);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glDrawArrays(GL_TRIANGLES,0,3);

    if(runOnce){
      model=glm::rotate(model,glm::radians(1200.f),glm::vec3(0.f,0.f,1.f));
      view=glm::lookAt(
        glm::vec3(0.0f, 0.0f, 1.0f),
        glm::vec3(0.0f, 0.0f, 0.0f),
        glm::vec3(0.0f, 1.0f, 0.0f)
      );
    }
    runOnce=false;
    glUniformMatrix4fv(glGetUniformLocation(shaderProgram,"model"),1,GL_FALSE,glm::value_ptr(model));
    glUniformMatrix4fv(glGetUniformLocation(shaderProgram,"view"),1,GL_FALSE,glm::value_ptr(view));

    glfwSwapBuffers(window);
    glfwPollEvents();
}
