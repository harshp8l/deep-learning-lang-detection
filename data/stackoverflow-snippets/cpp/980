#include <utility>
#include <iostream>

template <typename T, std::size_t NumEl>
class MyContainer
 {
   private:
      struct tagAdd { };

      T values[NumEl];

      template <std::size_t ... Is>
      constexpr MyContainer (MyContainer const & mc1,
                             MyContainer const & mc2, 
                             tagAdd const &,
                             std::index_sequence<Is...> const &)
         : values{ mc1.values[Is] + mc2.values[Is] ... }
       { }

   public:
      template <typename ... Args>
      constexpr MyContainer (Args ... tail): values{T(tail)...}
       { static_assert(sizeof...(Args) == NumEl, "wrong # of args"); }

      template <std::uint8_t Index>
      constexpr T const & get() const
       { return values[Index]; }

      friend constexpr MyContainer operator+ (MyContainer const & mc1,
                                              MyContainer const & mc2)
       { return {mc1, mc2, tagAdd{}, std::make_index_sequence<NumEl>{}}; }
 };

int main ()
 {
   constexpr MyContainer<double, 3> a(0.0, 1.0, 3.0);
   constexpr MyContainer<double, 3> b(1., 2.0, 5.0);

   static_assert(a.get<0>() == 0.0, "!");
   static_assert(a.get<1>() == 1.0, "!");

   constexpr auto c = a + b;

   static_assert(c.get<0>() == 1.0, "!");
   static_assert(c.get<1>() == 3.0, "!");
   static_assert(c.get<2>() == 8.0, "!");
 }
