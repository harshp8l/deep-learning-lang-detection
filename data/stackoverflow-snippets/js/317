// PROMISES VERSION
// We can import the promisify function from node util to turn our callbacks into promises.
const { promisify } = require( 'util' );
// Check if status exists.
// If exists, update it. Else create new status and new history.
// If anything throws an error, send it as the response.
const create_a_status = function( request, response ) {
Promise
    .resolve( request.body.hostname )
    .then( host => read_status( { host } ) )
    .then( status => status ? update_status( { 'hostname' : request.params.hostname, 'body' : request.body, 'new' : true } ) : new_status( request.body ) )
    .then( status => response.json( status ) );
    .catch( error => response.send( error ) );
    /* Depending on the function scopes, we might be able to omit all the x => y(x) calls.
    Promise
        .resolve( { 'host' : request.body.hostname } )
        .then( read_status )
        .then( status => status ? update_status( { 'hostname' : request.params.hostname, 'body' : request.body, 'new' : true } ) : new_status( request.body ) )
        .then( response.json );
        .catch( response.send );
    */
};
// Since we just need to return the status or error, we can just promisify the findOne method.
const read_status = promisify( Status.findOne.bind( Status ) );
// Since we just need to run the function and return, the .then().catch() in the create_a_status function will also fix this.
const update_status = promisify( Status.findOneAndUpdate.bind( Status ) );

const new_status = function( body ) {
    const status = new Status( body );
    const save = promisify( status.save.bind( status ) );
    return save
        .then( status => {
            history.create_a_history( body );
            return status;
        } );
};
