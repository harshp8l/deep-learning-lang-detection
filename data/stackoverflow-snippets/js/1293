// Returns a Promise.
// I purposely chose not to use the callback function inside setTimeout in order to demonstrate
// how to combine functions which return Promises, and normal functions which don't.
function sleep(delay, callbackFunction) {
  return new Promise(function(resolve) {
    setTimeout(resolve.bind(null, callbackFunction), delay)
  });
}

// Normal function, does not return a promise.
const myPrint = (message, value) => {
  alert(message + " " + value);
};

// A function combining a promise and then a normal function.
// Returns a Promise.
const sleepPrint = (delay) => {
  return sleep(delay)
    .then(() => {
      myPrint("sleepPrint()", delay);
    });
};

alert("Begin");

const firstDelay = 5000;
const secondDelay = 3000;

// This message is printed third.
sleepPrint(firstDelay)
.then(
  myPrint("This message is printed first", 0)
)
.then(
  // This message is printed fourth.
  () => {sleepPrint(secondDelay)}
)
.then(
  myPrint("This message is printed second", 0)
);
