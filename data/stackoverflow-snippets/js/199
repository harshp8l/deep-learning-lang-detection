    var queue = [], distance = 1, i, j, len;
    len = beginWord.length;
    queue.push(beginWord);

    while (queue.length > 0) {
        // Process all items in queue which contains words on same level
        for (var k=0; k<queue.length; k++) {
            var currentWord = queue.shift();
            if (currentWord === endWord) {
                return distance;
            }

            for (i = 0; i < len; i++) {
                var tempCh = currentWord[i];
                for (j = 'a'; j <= 'z'; j = String.fromCharCode(j.charCodeAt(0)+1)) {
                    if (j !== tempCh) {
                        currentWord = currentWord.replaceAt(i,j);
                        if (wordList.has(currentWord)) {
                            wordList.delete(currentWord);
                            queue.push(currentWord);
                        }
                    }
                }
                currentWord = currentWord.replaceAt(i, tempCh);

            } 
        }
        distance++;
    }
    return 0;
};

String.prototype.replaceAt=function(index, replacement) {
    return this.substr(0, index) + replacement+ this.substr(index + replacement.length);
}
