async function getZipFile() {
  //get the events out of the DB
  return new Promise((resolve, reject) => {
    db.Category.find({}).populate('icons.file').exec(async function(err, cats) {
      if (err) {
        //oh oh something went wrong, better pass the error along
        reject({
          success: false,
          message: err
        });
      } else {
        //all good, build the message and return
        try {
          const result = await buildZip(cats);

          resolve({
            success: true,
            message: result
          });
        } catch (err) {
          console.log(""ZIP Build Failed"")
          reject({
            success: false,
            message: err
          });
        }
      }
    });
  });
}

async function buildZip(cats) {
  let archive = new zip();

  await Promise.all(
    cats.map(cat => Promise.all(cat.icons
      .filter(icon => icon.size === '3x')
      .map(icon => new Promise((resolve, reject) => {
        db.Attachment.readById(icon.file._id, function(err, buffer) {
          if (err) return reject(err);
          archive.add(cat._id + "".png"", buffer);
          resolve();
        });
      }))
    ))
  );

  return archive.toBuffer()
}
