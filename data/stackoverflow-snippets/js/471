    // Simulates getting the current user to compare against
    let user = await User.findOne({
      ""first_name"" : ""Philip"",
      ""last_name"" : ""roi""      
    });

    // Just get the list of _id values from the current user for reference
    let user_hobbies = user.fk_hobbies.map(h => h._id );

    let result = await User.aggregate([
      // Find all users not the current user with at least one of the hobbies
      { ""$match"": {
        ""_id"": { ""$ne"": user._id },
        ""fk_hobbies._id"": { ""$in"": user_hobbies }
      }},
      // Add the count of matches, ""optionally"" we are marking the matched
      // hobbies in the array as well.
      { ""$addFields"": {
        ""numHobbies"": {
          ""$size"": {
            ""$setIntersection"": [
              ""$fk_hobbies._id"",
              user_hobbies
            ]
          }
        },
        ""fk_hobbies"": {
          ""$map"": {
            ""input"": ""$fk_hobbies"",
            ""in"": {
              ""$mergeObjects"": [
                ""$$this"",
                {
                  ""shared"": {
                    ""$cond"": {
                      ""if"": { ""$in"": [ ""$$this._id"", user_hobbies ] },
                      ""then"": true,
                      ""else"": ""$$REMOVE""
                    }
                  }
                }
              ]
            }
          }
        }
      }},
      // Sort the results by the ""most"" hobbies, which is ""descending"" order
      { ""$sort"": { ""numHobbies"": -1 } }
    ]);
