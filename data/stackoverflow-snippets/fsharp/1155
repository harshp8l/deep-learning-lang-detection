type AsyncApiActionInvoker() =
    inherit Controllers.ApiControllerActionInvoker()

    static member internal GetResultConverter(instanceType: Type, actionDescriptor: HttpActionDescriptor) : IActionResultConverter =
        if instanceType <> null && instanceType.IsGenericParameter then
            raise <| InvalidOperationException()

        if instanceType = null || typeof<HttpResponseMessage>.IsAssignableFrom instanceType then
            actionDescriptor.ResultConverter
        else
            let valueConverterType = typedefof<ValueResultConverter<_>>.MakeGenericType instanceType
            let newInstanceExpression = Expression.New valueConverterType
            let ctor = Expression.Lambda<Func<IActionResultConverter>>(newInstanceExpression).Compile()
            ctor.Invoke()

    static member internal StartAsTask<'T>(task, resultConverter: IActionResultConverter, controllerContext, cancellationToken) =
        let computation = async {
            let! comp = Async.AwaitTask task
            let! (value: 'T) = unbox comp
            return resultConverter.Convert(controllerContext, value) }
        Async.StartAsTask(computation, cancellationToken = cancellationToken)

    override this.InvokeActionAsync(actionContext, cancellationToken) =
        if actionContext = null then
            raise <| ArgumentNullException(""actionContext"")

        let actionDescriptor = actionContext.ActionDescriptor
        Contract.Assert(actionDescriptor <> null)

        let returnType = actionDescriptor.ReturnType
        // For now, throw if the result is an IHttpActionResult.
        if typeof<IHttpActionResult>.IsAssignableFrom(returnType) then
            raise <| InvalidOperationException(""IHttpResult is not supported when returning an Async"")

        if returnType.IsGenericType && returnType.GetGenericTypeDefinition() = typedefof<Async<_>> then
            let controllerContext = actionContext.ControllerContext
            Contract.Assert(controllerContext <> null)

            let computation = actionDescriptor.ExecuteAsync(controllerContext, actionContext.ActionArguments, cancellationToken)
            let innerReturnType = returnType.GetGenericArguments().[0]
            let converter = AsyncApiActionInvoker.GetResultConverter(innerReturnType, actionDescriptor)
            this.GetType()
                .GetMethod(""StartAsTask"", BindingFlags.NonPublic ||| BindingFlags.Static)
                .MakeGenericMethod(innerReturnType)
                .Invoke(null, [| computation; converter; controllerContext; cancellationToken |])
                |> unbox

        else base.InvokeActionAsync(actionContext, cancellationToken)
