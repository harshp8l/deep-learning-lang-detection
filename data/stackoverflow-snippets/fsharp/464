let insertGovernment (posGov: Government) (newGov : Government)
(currentStructure : GovernmentStructure<Government>) =

let updateStructure (govPos : Government) (newGov : Government)
    (currentStructure : GovernmentStructure<Government>) =

    // iterate over the nodes to find position and insert. parentId is useless, will fix later 
    let rec findPosAndInsertInto parentId (startStructure : GovernmentStructure<Government>) =
        match startStructure with
        | Node (g, sg) when g = govPos ->
            Node(g, [
                            yield Node(newGov, [])
                            yield! sg
                        ])
        | Node (g, sg) ->
            Node (g, [
                        for x in sg do
                            yield findPosAndInsertInto g.Id x
                    ])
        | Leaf(g) when g = govPos -> 
            Node (g, [Leaf(newGov)])
        // better logic needed, should not hit this
        | node -> node

    match currentStructure with
    // Insert if position is at root
    | Root(gov', subGov) when gov' = govPos ->

        Root(gov', [    
                        yield Node(newGov, [])
                        yield! subGov
                    ]) 
    // Insert if position is at node or leaf
    | node -> 
        match node with
        | Root (gov', subGov) ->
            Root(gov', [
                        for x in subGov do
                            yield findPosAndInsertInto gov'.Id x 
                    ])
        // better logic needed, shouldn't hit this level
        | node -> node

updateStructure posGov newGov currentStructure
