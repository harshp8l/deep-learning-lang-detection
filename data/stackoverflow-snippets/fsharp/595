public static T Reduce<T>(FSharpFunc<T, FSharpFunc<T, T>> reduction, T[] array)
{
  if (array == null)
  {
    throw new ArgumentNullException("array");
  }
  int num = array.Length;
  if (num == 0)
  {
    throw new ArgumentException(LanguagePrimitives.ErrorStrings.InputArrayEmptyString, "array");
  }
  OptimizedClosures.FSharpFunc<T, T, T> fSharpFunc = OptimizedClosures.FSharpFunc<T, T, T>.Adapt(reduction);
  T t = array[0];
  int num2 = 1;
  int num3 = num - 1;
  if (num3 >= num2)
  {
    do
    {
      t = fSharpFunc.Invoke(t, array[num2]);
      num2++;
    }
    while (num2 != num3 + 1);
  }
  return t;
}
