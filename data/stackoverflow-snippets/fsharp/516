let byteCode (l : sInstr list) : string = 
    let rec byteCode' l =
        match l with 
        | [] -> []
        | (SC    n :: l)     -> "0" :: string n :: byteCode' l
        | (SAdd    :: l)     -> "1" :: byteCode' l
        | (SSub    :: l)     -> "2" :: byteCode' l
        | (SMul    :: l)     -> "3" :: byteCode' l
        | (SNeg    :: l)     -> "4" :: byteCode' l
        | (SLess   :: l)     -> "5" :: byteCode' l
        | (SIfze n :: l)     -> "6" :: string n :: byteCode' l 
        | (SJump n :: l)     -> "7" :: string n :: byteCode' l

    l |> byteCode' |> String.concat " "
