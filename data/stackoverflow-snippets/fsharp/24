type Stack = Stack of int list

type Instruction =
    | ADD
    | MULT
    | ABS
    | PUSH of int

let push num (Stack stack) = Stack (num::stack)

let pop (Stack stack) =
    match stack with
    | [] -> []
    | _::tail -> tail

let tryGetFirstItem (Stack stack) = List.tryHead stack

let exec instr (Stack stack) =
    match stack, instr with
    | s1::s2::tail, ADD    -> Stack (s1+s2::tail)
    | s1::s2::tail, MULT   -> Stack (s1*s2::tail)
    | s1::tail,     ABS    -> Stack (abs(s1)::tail)
    | _,            PUSH x -> push x (Stack stack)        
    | x,            _      -> Stack x

Stack []
|> exec (PUSH 1)
|> exec (PUSH 2)
|> exec ADD
|> tryGetFirstItem
|> printfn "%A" //prints "Some 3"
