// A matcher state holds a string and the position
[<Struct>]
type MatcherState =
  {
    Input : string
    Pos   : int
  }

  static member New i p : MatcherState = { Input = i       ; Pos = p         }

  member x.Reposition p : MatcherState = { Input = x.Input ; Pos = p         }
  member x.AdvanceBy i  : MatcherState = { Input = x.Input ; Pos = x.Pos + i }

  member x.Current      = x.Input.[x.Pos]
  member x.InRange      = x.Pos >= 0 && x.Pos < x.Input.Length
  member x.Eos          = x.Pos >= x.Input.Length

// A Matcher is a function that given a MatcherState
//  returns Some MatcherState with a new position if successful
//  otherwise returns None
type Matcher  = MatcherState -> MatcherState option
