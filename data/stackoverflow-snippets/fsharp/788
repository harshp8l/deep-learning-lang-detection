type RomanNumerals = | I    // 1
                     | IV   // 4
                     | V    // 5
                     | X    // 10
                     | L    // 50
                     | C    // 100
                     | D    // 500
                     | M    // 1000

let getOccurrances integer unit symbol = 
    [for i in [1..(integer / unit)] -> symbol]

let rec convertInteger (romanList: RomanNumerals list) v = 
    match v with
    | v when v >= 1000 -> let temp = getOccurrances v 1000 M
                          convertInteger (temp|> List.append(romanList)) (v - temp.Length * 1000)
    | v when v >= 500  -> let temp = getOccurrances v 500  D
                          convertInteger (temp |> List.append(romanList)) (v - temp.Length * 500)
    | v when v >= 100  -> let temp = getOccurrances v 100  C
                          convertInteger (temp |> List.append(romanList)) (v - temp.Length * 100)
    | v when v >= 50   -> let temp = getOccurrances v 50  L
                          convertInteger (temp |> List.append(romanList)) (v - temp.Length * 50)
    | v when v >= 10   -> let temp = getOccurrances v 10  X
                          convertInteger (temp |> List.append(romanList)) (v - temp.Length * 10)
    | v when v >= 5    -> let temp = getOccurrances v 5  V
                          convertInteger (temp |> List.append(romanList)) (v - temp.Length * 5)
    | v when v >= 4    -> let temp = getOccurrances v 4  IV
                          convertInteger (temp |> List.append(romanList)) (v - temp.Length * 4)
    | v when v >= 1    -> let temp = getOccurrances v  1  I
                          convertInteger (temp|> List.append(romanList)) (v - temp.Length * 1)
    | _ -> romanList   


[<EntryPoint>]
let main argv = 
    let romanNumerals = convertInteger [] 3001
    printf "%A" romanNumerals
    //returns [M; M; M; I]
    0 // return an integer exit code
