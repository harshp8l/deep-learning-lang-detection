type Person = 
    { Name : string
      Age : int
      Weight : int
      Height : int }

type Result = 
    | Ok of Person
    | Fail

let bind f m = 
    match m with
    | Ok p -> f p
    | _ -> Fail

let (>=>) f1 f2 = f1 >> (bind f2)

let checkAge p = 
    if p.Age > 18 then Ok(p)
    else Fail

let checkWeight p = 
    if p.Weight < 80 then Ok(p)
    else Fail

let checkHeight p = 
    if p.Height > 150 then Ok(p)
    else Fail

let checks = [ checkAge; checkWeight; checkHeight ]
let allcheckfunc = checks |> List.reduce (>=>)

let combinedChecks =
   checkAge
   >=> checkWeight
   >=> checkHeight 


let p1 = 
    { Name = ""p1""
      Age = 10
      Weight = 20
      Height = 110 }

let p2 = 
    { Name = ""p2""
      Age = 19
      Weight = 65
      Height = 180 }

allcheckfunc p1
combinedChecks p1

allcheckfunc p2
combineChecks p2
