type Node = {
    Name  : string
    Childs: Node list}

let rec genNodes nodes ls =
    match (nodes, ls) with
    | (n , []   ) -> n
    | ([], x::xs) -> [{Name = x; Childs = genNodes [] xs}]
    | ({Name = nm; Childs = ch}::ns, x::xs) ->
        if nm = x then {Name = nm; Childs = genNodes ch xs}::ns
        else           {Name = nm; Childs = ch}::genNodes ns ls

// Test

let paths = seq {
    yield [""A""; ""B""; ""D""; ""E""]
    yield [""A""; ""B""; ""D""; ""F""]
    yield [""A""; ""B""; ""D""; ""G""]
    yield [""A""; ""C""; ""D""; ""G""]
    }

let result = Seq.fold genNodes [] paths
