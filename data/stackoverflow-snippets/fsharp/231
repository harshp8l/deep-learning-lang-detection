open System

type IFruit = interface end

type Avocado = 
  { color : string; age : int } 
  interface IFruit
  static member tryFromIFruit(x:IFruit) = 
    match x with
    | :? Avocado -> Some(x:?>Avocado)
    | _ -> None

let (|Firm|Mushy|) (a : Avocado) = if a.age < 7 then Firm else Mushy

let texture (fruit : IFruit) =
    match fruit |> Avocado.tryFromIFruit with  // we're not sure if it's an Avocado.
    | Some(Firm) -> "firm"                     // use Some(SomethingElse()) when you want to collapse an extra layer of "match" statements.
    | Some(Mushy) -> "mushy"
    | None -> ""

texture ( { color = "green"; age = 4 } :> IFruit)
