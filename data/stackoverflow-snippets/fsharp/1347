let span p = 
    let rec loop k = function
    | x :: xs' when p x ->
        let f (ys, zs) = x :: ys, zs
        loop (f >> k) xs'
    | xs -> k ([], xs)
    loop id

let groupBy eq = 
    let rec loop k = function
    | [] -> k []
    | x :: xs ->
        let (ys, zs) = span (eq x) xs
        let f zss = (x :: ys) :: zss
        loop (f >> k) zs
    loop id

//Special case of 'groupBy', group by equality.
let group xs = groupBy (=) xs

group <| List.ofSeq "Mississippi" 
// val it : char list list =
//   [['M']; ['i']; ['s'; 's']; ['i']; ['s'; 's']; ['i']; ['p'; 'p']; ['i']]
