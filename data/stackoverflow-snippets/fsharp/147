type Result<'TSuccess> = 
    | Success of 'TSuccess
    | Failure of List<string>

type Foo = {
    a: int
    b: string
    c: bool
}

type EitherBuilder (msg) =
    let mutable errors = [msg]
    member this.Bind(x, fn) =
        match x with
        | Success s -> fn s
        | Failure f ->
            errors <- List.concat [errors;f] 
            fn (Unchecked.defaultof<_>)

    member this.Return x =
        if List.length errors = 1 then
            Success x
        else
            Failure errors

let either msg = EitherBuilder (msg)

let Ok = either(""OK"") {
    let! a = Success 1
    let! b = Success ""foo""
    let! c = Success true
    return 
        {
                a = a
                b = b
                c = c
        }
}

let fail1 = either(""Fail1"") {
    let! a = Success 1
    let! b = Failure [""Oh nose!""]
    let! c = Success true
    return 
        {
                a = a
                b = b
                c = c
        }
} //returns fail1 = Failure [""Fail1""; ""Oh nose!""]


let fail2 = either(""Fail2"") {
    let! a = Success 1
    let! b = Failure [""Oh nose!""]
    let! c = Failure [""God damn it, uncle Bob!""]
    return 
        {
                a = a
                b = b
                c = c
        }
} //should return fail2 = Failure [""Fail2""; ""Oh nose!""; ""God damn it, uncle Bob!""]
