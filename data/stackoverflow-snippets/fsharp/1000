open System.Data
open System
open System.Data.SqlClient
open Microsoft.FSharp.Reflection

let createSqlTableFromRecordTSql protoType =
    let net2SqlTypeMapper = function
    | "System.Int32" -> "int"
    | "System.String" -> "nvarchar(max)"
    | "System.DateTime" -> "datetime"
    | _ -> failwith "Unsupported type yet!"

    if FSharpType.IsRecord protoType then
        let fields = FSharpType.GetRecordFields protoType
        new String(
            seq {
                yield protoType.Name |> sprintf "CREATE TABLE %s (\n"
                for field in fields do
                    yield sprintf "[%s] %s,\n" field.Name (net2SqlTypeMapper field.PropertyType.FullName)
                yield ")"
            } |> Seq.concat |> Seq.toArray)
    else
        failwith "Can make table from f# record types only!"

type Car = {make: string; model: string; year: int; purchased: DateTime}

let connectionString = "Data Source=(localdb)\ProjectsV12;Initial Catalog=myDB;Integrated Security=True;Pooling=False;Connect Timeout=30"
let conn = new SqlConnection(connectionString)
conn.Open()
let cmd = new SqlCommand((createSqlTableFromRecordTSql typeof<Car>),conn)
cmd.CommandType <- CommandType.Text
cmd.ExecuteNonQuery()
conn.Close()
