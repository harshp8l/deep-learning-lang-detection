module ChangeLib =

   type Changed<'T> = Changed of 'T
   type Unchanged<'T> = Unchanged of 'T

   type Changer<'T> = 'T -> Changed<'T>
   type Unchanger<'T> = 'T -> Unchanged<'T>

   let mapC f (Changed v) = Changed (f v) 
   let mapU f (Unchanged v) = Unchanged (f v) 

   /// if input is Unchanged and f returns a Changed, 
   /// the whole expression is Changed
   let bindUC (f:'a Changer) (Unchanged v) = f v 

   /// if input is Unchanged and f returns a Unchanged, 
   /// the whole expression is Unchanged
   let bindUU (f:'a Unchanger) (Unchanged v) = f v 

   /// if input is Changed and f returns a Unchanged, 
   /// the whole expression is Changed
   let bindCU (f:'a Unchanger) (Changed v) = 
        let (Unchanged u) = f v 
        Changed u

   /// if input is Changed and f returns a Changed, 
   /// the whole expression is Changed
   let bindCC (f:'a Changer) (Changed v) = f v
