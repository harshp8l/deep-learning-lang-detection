type Country      = string
type Neighbours   = Set<Country*Country>
type SharesColour = Set<Country>

let areNeighbours (ns : Neighbours) (ct1 : Country) (ct2 : Country) : bool =
  Set.contains (ct1,ct2) ns || Set.contains (ct2,ct1) ns

let canShareColour (ns : Neighbours) (ct : Country) (s : SharesColour) : bool =
  s |> Seq.exists (areNeighbours ns ct) |> not

let neighbours : Neighbours = 
  set [| 
    ("Andorra", "Benin")  ; ("Andorra", "Canada") ; ("Andorra", "Denmark");
    ("Benin"  , "Canada") ; ("Benin"  , "Denmark"); ("Canada" , "Denmark");
    ("Estonia", "Canada") ; ("Estonia", "Denmark"); ("Estonia", "Finland");
  |]

let sharesColour : SharesColour =
  set [|
    "Andorra"
  |]

[<EntryPoint>]
let main argv =
  printfn "%A" <| canShareColour neighbours "Estonia" sharesColour
  printfn "%A" <| canShareColour neighbours "Benin"   sharesColour
  0
