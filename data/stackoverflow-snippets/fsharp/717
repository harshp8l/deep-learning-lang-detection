namespace Workspace

module main =

    [<EntryPoint>]
    let main argv = 

        let theList = []
        let input : string  = 
            "add 1 2 3 4" + System.Environment.NewLine +
            "delete 1 2" + System.Environment.NewLine +
            "add 1" + System.Environment.NewLine +
            "delete 4 2" + System.Environment.NewLine + 
            "modify 1 5" + System.Environment.NewLine

        let lines = input.Split([| '\n';'\r' |])
        let lines = List.ofArray lines
        let lines = List.filter  (fun (x : string) -> x.Length > 0) lines
        let commands = List.map(fun (line:string) -> line.Split([| ' ' |])) lines
        let commands = List.map(List.ofArray) commands
        let convertCommand (input : string list) : (string * string list) =
            let command = List.head input
            let values = List.tail input
            (command,values)
        let commands = List.map(convertCommand) commands
        let rec merge master items = 
            match master,items with
            | [],l | l,[] -> l
            | x::xs', y::ys' -> 
                if x = y then x :: (merge xs' ys')
                elif x < y then x :: (merge xs' items)
                else y :: (merge master ys')
        let deleteItems master items =
            let deleteItem master item =
                let rec deleteItem master item acc =
                    match master with
                    | (h::t) when h <> item ->
                        let acc = h :: acc
                        deleteItem t item acc
                    | (h::t) ->
                        deleteItem t item acc
                    | [] -> List.rev acc
                deleteItem master item []
            let rec deleteItemsInner master items =
                match items with
                | (item::t) ->
                    let master = deleteItem master item
                    deleteItemsInner master t
                | [] -> master
            deleteItemsInner master items     
        let modifyItems master v1 v2 =
            let rec modifyInner master v1 v2 acc =
                match master with
                | (h::t) when h = v1 ->
                    let acc = v2 :: acc
                    modifyInner t v1 v2 acc
                | (h::t) ->
                    let acc = h :: acc
                    modifyInner t v1 v2 acc
                | [] -> List.rev acc
            modifyInner master v1 v2 []
        let processEventType (event : (string * string list)) (theList : string list) : string list =
            let (command,eventValues) = event
            match command with
            | "add" -> 
                printfn "Adding: %A" eventValues
                let newList = merge theList eventValues
                printfn "result: %A" newList
                newList
            | "delete" ->
                printfn "Deleting: %A" eventValues
                let newList = deleteItems theList eventValues
                printfn "result: %A" newList
                newList 
            | "modify" ->
                match eventValues with
                | v1::v2::[] -> 
                    printfn "Modifying: %A %A" v1 v2
                    let newList = modifyItems theList v1 v2
                    printfn "result: %A" newList
                    newList
                | _ -> failwith "Error with modify parameters"
            | _ -> failwith "Error processing event"


        let rec processEvents commands theList =
            match commands with
            | (command::t) ->
                let newList = processEventType command theList
                processEvents t newList
            | [] -> theList

        let newList = processEvents commands theList

        printfn "theList: %A" newList

        printf "Press any key to exit: "
        System.Console.ReadKey() |> ignore
        printfn ""

        0 // return an integer exit code
