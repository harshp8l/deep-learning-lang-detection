let convertInteger i =
    // Define an inner recursive function that carries the intermediate state as an argument
    let rec loop result i =
        // Base case: We've reached zero, so return the current result
        if i = 0 then
            result
        // Otherwise...
        else
            // Try to find the first symbol for which the value is <= of the remaining input
            match List.tryFind (fun (symbol, value) -> value <= i) RomanNumerals.values with
            | Some (symbol, value) ->
                // If there is one, prepend the state to the result
                // Since we're always prepending, we'll have to reverse
                // the list once we're done but that's okay
                let newResult = symbol :: result // `a :: b` means ""prepend element a to list b""
                // Note that this is a tail call, since nothing is done with
                // the result once the function returns. This allows for tail call optimization
                loop newResult (i - value)
            | None ->
                // If there is non, we've messed up somehow so throw an exception.
                // Since we have a case for I = 1, this should never happen but we
                // still have to handle it explicitely - otherwise, the compiler complains
                // about a missing case in the match.
                failwithf ""Got a non-zero integer that isn't matched by an existing numeral: %i"" i

    // Then call the function with an initial state - an empty list in this case
    let result = loop [] i
    // And reverse the result, since it was built backwards
    List.rev result
