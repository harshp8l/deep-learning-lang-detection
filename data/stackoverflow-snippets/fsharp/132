// http://www.fssnip.net/29/title/Regular-expression-active-pattern
module Solution = 

   open System
   open System.Text.RegularExpressions

   open FSharp.Data

   let (|Regex|_|) pattern input =
      let m = Regex.Match(input, pattern)
      if m.Success then Some(List.tail [ for g in m.Groups -> g.Value ])
      else None

   let ptrnFraction = @""^([0-9]?[0-9]?)(\/)([0-9]?[0-9]?)$""
   let ptrnDateTime = @""(\d{2})\/(\d{2})\/(\d{4}) (\d{2}):(\d{2}):(\d{2})""

   let ToFraction input = 
      match input with
      | Regex ptrnFraction [ numerator; operator; denominator ] ->
        (numerator + operator + denominator).ToString()
      | Regex ptrnDateTime [ day; month; year; hours; minutes; seconds ] ->
        (day + ""/"" + month).ToString()
      | _ -> ""Not valid!""

   let dtInput = @""05/09/2017 00:00:00""
   let frcInput = @""13/20""

   let outDate = ToFraction dtInput
   printfn ""Out Date: %s"" outDate

   let outFraction = ToFraction frcInput
   printfn ""Out Fraction: %s"" outFraction

   //Output:> Out Date: 05/09 Out Fraction: 13/20
