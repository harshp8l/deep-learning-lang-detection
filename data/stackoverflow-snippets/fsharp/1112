[<AbstractClass>]
type Indexer<'index, 'result> () =
    abstract Get : 'index -> 'result
    member this.Item with get key = this.Get key

type IMyInterfaceType =   
    abstract MyProperty : MyType1 with get
    // F# indexed propetties
    abstract MyIndexedProperty : MyType2 -> MyType3 with get
    // C# workaround
    abstract MyCSharpIndexedProperty : Indexer<MyType2, MyType3> with get

type MyInterfaceType () as this =
    let proxy =
      { new Indexer<MyType2, MyType3> () with
          member __.Get key = (this :> IMyInterfaceType).MyIndexedProperty key }
    interface IMyInterfaceType with
        member __.MyProperty with get () = new MyType1 ()
        member __.MyIndexedProperty with get key = new MyType3 ()
        member __.MyCSharpIndexedProperty with get () = proxy
