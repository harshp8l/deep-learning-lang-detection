open System.Diagnostics

let n = 8000
let maxSum = 10000 

let random = System.Random 543252

let randomlists = 
  [for i in [1..n] -> [ for i in [1..n] -> random.Next (0, 10)]]


let stopWatch = 
  let sw = Stopwatch ()
  sw.Start ()
  sw


let timeIt (name : string) (a : int list -> 'T) : unit = 
  let t = stopWatch.ElapsedMilliseconds
  let v = a (randomlists.[0]) 
  randomlists |> List.tail 
              |> List.map (fun list -> a list) 
              |> ignore
  let d = stopWatch.ElapsedMilliseconds - t
  printfn "%s, elapsed %d ms, result %A" name d v



let alg1 list = 
    let smallestIndexRef maxSum list =
        let sum = ref 0
        let indexWhereSumIsTooMuch =
            list
            |> List.findIndex (fun i ->
                sum := !sum + i
                !sum >= maxSum
            )
        indexWhereSumIsTooMuch - 1
    smallestIndexRef maxSum list

let alg2 list = 
    let rec smallestIndexRecursive sumTotal currIndex maxSum list =
        match list with
        | [] -> currIndex
        | head::tail -> match head with
                        | head when (head + sumTotal) < maxSum -> 
                        smallestIndexRecursive  (head + sumTotal) (currIndex + 1) maxSum tail
                        | _ when currIndex <= 0 -> 0
                        | _ -> currIndex - 1
    smallestIndexRecursive 0 0 maxSum list

[<EntryPoint>]
let main argv =  
    timeIt "findIndex" alg1 
    timeIt "Recursive" alg2
    0
