// Example 2
type ComplicatedRecord = { ... }
[<StructuredFormatDisplay(""{LeafCountAsString}"")>]
type Tree =
    | Leaf of ComplicatedRecord
    | Node of Tree list
    with
        member x.LeafCount =
            match x with
            | Leaf _ -> 1
            | Node leaves -> leaves |> List.sumBy (fun x -> x.LeafCount)
        member x.LeafCountAsString = x.ToString()
        override x.ToString() =
            // For test output, we don't care about leaf data, just count
            match x with
            | Leaf -> ""Tree with a total of 1 leaf""
            | Node -> sprintf ""Tree with a total of %d leaves"" x.LeafCount
