let byteCode (l : sInstr list) : string = 
  let instrToString (bc : sInstr) =
    (match bc with 
    | SC    n -> [0; n]
    | SAdd    -> [1]
    | SSub    -> [2]
    | SMul    -> [3]
    | SNeg    -> [4]
    | SLess   -> [5]
    | SIfze n -> [6; n]
    | SJump n -> [7; n])

  String.Join("" "", (l |> List.map instrToString |> List.fold (fun acc lst -> acc @ lst) []))

let toInstr (bcString : string) : sInstr list = 
  let rec recToInstr bcList = 
    match bcList with
    | [] -> []
    | head :: tail -> 
        match head with
        | ""0"" -> SC(Int32.Parse(tail.[0])) :: recToInstr (tail |> List.skip 1)
        | ""1"" -> SAdd :: recToInstr tail
        | ""2"" -> SSub :: recToInstr tail
        | ""3"" -> SMul :: recToInstr tail
        | ""4"" -> SNeg :: recToInstr tail
        | ""5"" -> SLess :: recToInstr tail
        | ""6"" -> SIfze(Int32.Parse(tail.[0])) :: recToInstr (tail |> List.skip 1)
        | ""7"" -> SJump(Int32.Parse(tail.[0])) :: recToInstr (tail |> List.skip 1)
        | _ -> []

  recToInstr (bcString.Split(' ') |> Array.toList)
