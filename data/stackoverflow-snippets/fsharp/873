type Player = {Name: string; Points: int}
type State = {Players: Player list}

// I've been overly explicit here!
// You could just use a choice of | Int | Bool | State, etc)
type QueryResult = 
| HowMany of int
| HasAny of bool
| ShowAll of State 

type CommandResult = 
| Player of Player

type Message =
| Query of (State -> QueryResult) * AsyncReplyChannel<QueryResult>
| Command of (State -> CommandResult * State) * AsyncReplyChannel<CommandResult>

type Model(initialState: State) =

    let agent = MailboxProcessor.Start(fun inbox ->

        let rec messageLoop (state: State) =
            async {
                let! msg = inbox.Receive()
                match msg with
                | Query (q, replyChannel) ->
                    let result = q state             
                    replyChannel.Reply(result)
                    return! messageLoop state
                | Command (c, replyChannel) ->
                    let result, newState = c state
                    replyChannel.Reply(result)
                    return! messageLoop(newState)
            }

        messageLoop initialState)

    member this.Query queryFunction =
        agent.PostAndReply(fun chan -> Query(queryFunction, chan))

    member this.Command commandFunction =
        agent.PostAndReply(fun chan -> Command(commandFunction, chan))


// ===========================
// test 
// ===========================

// Query Methods
// Note that the return values have to be lifted to QueryResult
let howMany (s: State) =  HowMany (List.length s.Players)
let hasAny (s: State) = HasAny (List.length s.Players > 0)
let showAll (s: State) = ShowAll s

// Command Methods
// Note that the return values have to be lifted to CommandResult
let addPlayer (p: Player) (s: State) = (Player p, {s with Players = p::s.Players})

// setup a model
let initialState = {Players = []}
let model  = new Model(initialState)
model.Command (addPlayer {Name=""Sandra""; Points=1000})
model.Query hasAny   // HasAny true
model.Query howMany  // HowMany 1
model.Query showAll  // ShowAll {...}
