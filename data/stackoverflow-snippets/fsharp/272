// A matcher state holds a string and the position
[<Struct>]
type MatcherState =
  {
    Input : string
    Pos   : int
  }

  static member New i p : MatcherState = { Input = i       ; Pos = p         }

  member x.Reposition p : MatcherState = { Input = x.Input ; Pos = p         }
  member x.AdvanceBy i  : MatcherState = { Input = x.Input ; Pos = x.Pos + i }

  member x.Current      = x.Input.[x.Pos]
  member x.InRange      = x.Pos >= 0 && x.Pos < x.Input.Length
  member x.Eos          = x.Pos >= x.Input.Length

// A Matcher is a function that given a MatcherState
//  returns Some MatcherState with a new position if successful
//  otherwise returns None
type Matcher  = MatcherState -> MatcherState option

let mgood ms  = Some ms
let mbad      = None

// Matches EOS
let meos : Matcher =
  fun ms ->
    if ms.Eos then 
      mgood ms
    else 
      mbad

// Matches a specific character
let mch ch : Matcher =
  fun ms ->
    if not ms.InRange then
      mbad
    elif ms.Current = ch then 
      mgood <| ms.AdvanceBy 1 
    else mbad

// Matches zero or more whitespaces
let mws : Matcher =
  fun ms ->
    let rec loop pos =
      if pos < ms.Input.Length then
        let ch = ms.Input.[pos]
        if ch = ' ' then 
          loop (pos + 1) 
        else 
          mgood <| ms.Reposition pos
      else
        mgood <| ms.Reposition pos
    loop (max ms.Pos 0)

// Active patterns
let (|Eos|_|)   = meos
let (|Comma|_|) = mch ','
let (|Cr|_|)    = mch '\r'
let (|Ln|_|)    = mch '\n'
let (|Ws|_|)    = mws

// Matches a line start
let mlineStart =
  fun ms ->
    match ms with
    // Bad cases, new line followed by WS + Comma
    | Cr (Ln (Ws (Comma _ | Eos _)))
    | Ln (Ws (Comma _ | Eos _))     -> mbad
    // Good cases, new line not followed by WS + Comma
    | Cr (Ln (Ws ms))
    | Ln (Ws ms)                    -> mgood ms
    // All other cases bad
    | _                             -> mbad

// Matches a line end
let mlineEnd =
  fun ms ->
    match ms with
    // Good cases, new line or EOS
    | Cr (Ln ms)
    | Ln ms
    | Eos ms      -> mgood ms
    // All other cases bad
    | _           -> mbad

// Scans either backward or forward looking for a match
let scan steps input pos (m : Matcher) =
  let rec loop ms =
    match m ms with
    | Some mms  ->
      if steps < 0 then
        Some mms.Pos
      else
        Some ms.Pos
    | None      ->
      if steps = 0 then 
        None
      elif steps > 0 && ms.Pos >= ms.Input.Length then
        None
      elif steps < 0 && ms.Pos < 0 then
        None
      else
        loop <| ms.AdvanceBy steps
  loop (MatcherState.New input (min input.Length (max 0 pos)))

let scanForward   = scan 1
let scanBackward  = scan -1

[<EntryPoint>]
let main argv =
  // Some test cases
  let testCases = 
    [|
    """1,2,3,4
4,5,6,7"""
    """1,2,3,4
4,5,6,7
"""
    """1,2,3,4
4,5,6,7
,2,3,4
"""
    """1,2,3,4
  4,5,6,7
,2,3,4
"""
    |]

  for testCase in testCases do
    // Scan backwards from end until we find a line start
    match scanBackward testCase testCase.Length mlineStart with
    | None          -> printfn "No matching line start found"
    | Some startPos ->
      // Scan forwards from line start until we find a line end
      match scanForward testCase startPos mlineEnd with
      | None        -> printfn "Line start found @%d, but no matching line end found" startPos
      | Some endPos ->
        let line = testCase.Substring (startPos, endPos - startPos)
        printfn "Line found: %s" line

  0    
