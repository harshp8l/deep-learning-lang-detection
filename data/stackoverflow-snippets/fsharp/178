type [<AbstractClass>] MyEnumDefinition() = 
    inherit DynamicEnumDefinitionBase<MyEnumDefinition> ()

    abstract member GetMyEntries: unit -> ObservableCollection<string>

    override this.GetEntriesChangedObservable() =
        Observable.FromEventPattern<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>( 
            (fun h -> this.GetMyEntries().CollectionChanged.AddHandler h), 
            (fun h -> this.GetMyEntries().CollectionChanged.RemoveHandler h)))

let mkMyEnumDefinition() =
   let MyEntries = ObservableCollection<string>()
   { new MyEnumDefinition() with override __.GetMyEntries() = MyEntries }
