type MoreFun<'T> = 'T -> int

type X<'T> = 
    { 
        B: int 
        F: MoreFun<'T>
    }
    static member (|==) (a: X<_>, b: int) = { B = b; F = fun (f:int) -> b}
    static member (|==) (a: X<_>, b: MoreFun<_>) = { a with F = b }

module Tests = 
    let one (f: int) = 1
    let t1() = { B = 1; F = one } |== 2
    // let t2() = { B = 1; F = one } |== (fun _ -> int) // Does not work
    let three: MoreFun<_> = (fun _ -> 3)
    let t3() = { B = 1; F = one } |== three
    // You don't need to cast three to be of type MoreFun:
    let t4() = { B = 1; F = one } |== (fun _ -> 3)
