type MainPage = Moonmile.XamarinFormsTypeProvider.XAML<""MainPage.xaml"">

type MainPageEx() as this =
    inherit BindObject<MainPage>(new MainPage())

    // Add handlder by reflection
    let AddHandler(target:obj, eventName:string, eventMethod: obj*obj -> unit ) =
        let hdr = Action<obj,obj>( fun s e  -> eventMethod(s,e))

        let ei = target.GetType().GetRuntimeEvent(eventName)
        let dt = ei.AddMethod.GetParameters().[0].ParameterType
        let handler = new Action<obj,obj>(fun s e -> hdr.Invoke( s, new EventArgs() ))
        let handlerInvoke = handler.GetType().GetRuntimeMethod(""Invoke"", [|typeof<obj>; typeof<Type[]>|])
        let dele = handlerInvoke.CreateDelegate( dt, handler )
        let add = new Func<Delegate, EventRegistrationToken> ( fun t -> 
            let para = ei.AddMethod.GetParameters()
            let ret  = ei.AddMethod.Invoke( target, [|t|])
            if ret <> null then
                ret :?> EventRegistrationToken
            else
                new EventRegistrationToken()
            )
        let remove = new Action<EventRegistrationToken>( fun t -> ei.RemoveMethod.Invoke(target, [|t|]) |> ignore )
        // WindowsRuntimeMarshal.AddEventHandler<Delegate>(add, remove, dele)
        add.Invoke( dele ) |> ignore
        ()

        let mutable count = 0
        do
        (*  // build error
            target.btn1.Clicked.Add( fun e ->
                count <- count + 1
                target.btn1.Text <- ""Clicked "" + count.ToString())
        *)
            // add handler by reflection
            AddHandler( base.Target.btn1, ""Clicked"", this.ButtonClick ) 
            ()

        member this.CurrentPage
            with get() = this.Target.CurrentPage

        member this.ButtonClick(s,e) =
            count <- count + 1
            base.Target.text1.Text <- ""clicked "" + count.ToString()
