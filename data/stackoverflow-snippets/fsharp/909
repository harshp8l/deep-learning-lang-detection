// multiplicate a polynomial with a constant
// polymulconst: float -> float list -> float list
let rec polymulconst c = function
    | []      -> []
    | a::rest -> c*a::polymulconst c rest

// multiplying a polynomial by x
// polymulx: float list -> float list
let polymulx = function
    | []      -> []
    | lst     -> 0.0::lst 

// add two polynomials
// polyadd: float int -> float int -> float int
let rec polyadd ps qs =
    match (ps, qs) with
    | ([], ys)       -> ys
    | (xs, [])       -> xs
    | (x::xs, y::ys) -> (x+y)::polyadd xs ys

// polymul: float int -> float int -> float int
let rec polymul qs = function
    | []    -> []
    | p::ps -> polyadd (polymulconst p qs) 
                       (polymulx (polymul qs ps))

let ( .++. ) p q = polyadd p q
let ( .**. ) p q = polymul p q
