let reachedNodes graph start fullPath =
    let rec loop path acc node =
        match path with
        | [] -> node :: acc
        | v :: rest ->
            let next =
                graph
                |> Seq.tryPick (fun (prev, value, next) ->
                    if prev = node && value = v then Some next
                    else None)
            match next with
            | Some c -> loop rest (node :: acc) c
            | None -> node :: acc
    loop fullPath [] start
    |> Set.ofList

let clearEdges graph start path =
    let reachedNodes' = reachedNodes graph start path
    let notInReachedNodes n = Set.contains n reachedNodes' |> not
    graph
    |> Set.filter (fun (prev, _, next) -> notInReachedNodes prev && notInReachedNodes next)
