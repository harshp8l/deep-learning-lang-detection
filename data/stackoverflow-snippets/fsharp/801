let findPaths n =
  let rec path n x y p = seq {
    if x < 1 || x > n || y < 1 || y > n then failwith (sprintf "Invalid position (%d, %d)" x y)
    match (x, y) with
    | (_, _) when x = n && y = n ->
      printfn "Done"
      yield (x, y)::p
    | (_, _) when x = n && y < n ->
      printfn "At (%d, %d), can only move down" x y
      for subPath in path n x (y + 1) p do
        yield (x, y)::subPath
    | (_, _) when x < n && y = n ->
      printfn "At (%d, %d), can only move right" x y
      for subPath in path n (x + 1) y p do
        yield (x, y)::subPath
    | (_, _) ->
      printfn "At (%d, %d), can move right or down" x y
      for subPath in path n x (y + 1) p do
        yield (x, y)::subPath
      for subPath in path n (x + 1) y p do
        yield (x, y)::subPath }
  path n 1 1 []
