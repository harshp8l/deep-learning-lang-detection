open System

let f (x:obj) =
    let tOption = typeof<option<obj>>.GetGenericTypeDefinition()
    match x with
    | null -> printfn ""null""; true
    | :? DBNull -> printfn ""dbnull""; true
    | _ when x.GetType().IsGenericType && x.GetType().GetGenericTypeDefinition() = tOption ->
        match x.GetType().GenericTypeArguments with
        | [|t|] when t = typeof<int> -> printfn ""option int""; true
        | [|t|] when t = typeof<obj> -> printfn ""option obj""; true
        | _                          -> printfn ""option 't"" ; true

    | _ -> printfn ""default""; false


let x = 4 :> obj
let x' = f x  //default

let y = Some 4 :> obj
let y' = f y  // option int

let z = Some 0.3 :> obj
let z' = f z  // option 't
