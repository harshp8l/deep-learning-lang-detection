type imagechannel = int * int

type IObject =
    abstract Value : obj with get, set

type ImageChannel() =
    let mutable value : option<imagechannel> = None    
    interface IObject with
      member this.Value with get() = value :> obj and set v = value <- v :?> option<imagechannel>

type ImageChannel2() =
    let mutable value : string = """"    
    interface IObject with
      member this.Value with get() = value :> obj and set v = value <- v :?> string

type Message = 
   | Greet of string
   | Hi
   | New of IObject

type Greeter() = 
   inherit Actor<Message>()   

   override this.Receive message reply = task {
      match message with
      | Greet who -> printfn ""Hello %s"" who
      | Hi -> printfn ""Hello from F#!""
      | New iObj -> printfn ""Obj %s"" (iObj.Value.ToString())
   }

[<EntryPoint>]
let main argv = 

    printfn ""Running demo. Booting cluster might take some time ...\n""

    use system = ActorSystem.Configure()
                            .Playground()
                            .Register(Assembly.GetExecutingAssembly())
                            .Done()

    let actor = system.ActorOf<Greeter>(Guid.NewGuid().ToString())
    let imgChannel = ImageChannel() :> IObject
    imgChannel.Value <- Some(5,1) :> obj    

    let imgChannel2 = ImageChannel2() :> IObject
    imgChannel2.Value <- ""asdasdasd"" :> obj    

    let job() = task {
      do! actor <! New imgChannel
      do! actor <! New imgChannel2
      do! actor <! Hi
      do! actor <! Greet ""Yevhen""
      do! actor <! Greet ""AntyaDev""
    }
