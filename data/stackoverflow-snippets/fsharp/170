// If our function is callable from C# we can use active patterns as a neat way to protect our
//  F# code from null values
//  Functions that are only callable from F# code we don't need to protect as long as we protect
//  the entry points
let inline (|DefaultTo|) dv v = if System.Object.ReferenceEquals (v, null) then dv else v
let inline (|NotNull|) v      = if System.Object.ReferenceEquals (v, null) then raise (System.NullReferenceException ()) else v

let emptySet : string [] = [||]

let indexOfSet (DefaultTo """" str) (DefaultTo emptySet set) : Result<int*int, unit> =
    // In F# tail recursion is used as a more powerful looping construct
    //  F# suppports tail call elimination meaning under the hood this is
    //  implemented as an efficient loop
    //  Note: I pass str and set as argument in order to make F# doesn't
    //  create new lambda object that closes over them (reduces GC load)
    let rec loop (str : string) (set : string []) i =
        if i < set.Length then
            let index = str.IndexOf set.[i]
            if index = -1 then loop str set (i + 1)
            else Ok (i, index)
        else
          Error ()
    loop str set 0

printfn ""%A"" <| indexOfSet null null
printfn ""%A"" <| indexOfSet null     [| ""abc""; ""ab""; ""a"" |]
printfn ""%A"" <| indexOfSet """"       [| ""abc""; ""ab""; ""a"" |]
printfn ""%A"" <| indexOfSet ""a""      [| ""abc""; ""ab""; ""a"" |]
printfn ""%A"" <| indexOfSet ""ab""     [| ""abc""; ""ab""; ""a"" |]
printfn ""%A"" <| indexOfSet ""abc""    [| ""abc""; ""ab""; ""a"" |]
printfn ""%A"" <| indexOfSet ""da""     [| ""abc""; ""ab""; ""a"" |]
printfn ""%A"" <| indexOfSet ""dab""    [| ""abc""; ""ab""; ""a"" |]
printfn ""%A"" <| indexOfSet ""dabc""   [| ""abc""; ""ab""; ""a"" |]
