let applyEachToEveryOther f =

    let rec aux2 k = function
    | [], _, [] -> k []
    | [], x, r::rs -> aux2 (k << fun ys -> f x r::ys) ([], x, rs)
    | l::ls, x, rs -> aux2 (k >> fun ys -> f x l::ys) (ls, x, rs)

    let rec aux ls acc = function
    | [] -> List.rev acc
    | x::xs -> aux (x::ls) ((x, aux2 id (ls, x, xs))::acc) xs

    aux [] []

applyEachToEveryOther (+) [1..5]
(* [(1, [3; 4; 5; 6]);
    (2, [3; 5; 6; 7]);
    (3, [4; 5; 7; 8]);
    (4, [5; 6; 7; 9]);
    (5, [6; 7; 8; 9])] *)
