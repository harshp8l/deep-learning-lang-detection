type BST =
| Empty
| TreeNode of int * BST * BST

let nodeTestBase = function
  | Empty -> false
  | _ -> true

let nodeTestEven = function
  | Empty -> false
  | TreeNode(value, left, right) ->
      if (value % 2 = 0) then true
      else false

let count f (t:BST) : int =
  let rec count f (t:BST) : int = 
    match t with
    | Empty -> 0                                                     // left or right could be empty (see case 3).
    | TreeNode(n,left,right) -> (if f n then 1 else 0) + (count f left) + (count f right)                // a leaf, so test and count.
    | TreeNode(_,left,right)  -> (count f left) + (count f right)    // count left and right branches
  count f t

let count2 f (t:BST) : int =
  let rec count f (t:BST) : int = 
    match t with
    | Empty -> 0                                                     // left or right could be empty (see case 3).
    // *** pass in predicate f : (BST -> bool) to decide
    // *** when to count the node. i.e. function takes a
    // ***  BST and returns a bool
    // see pattern matching docs on use of & https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/pattern-matching        
    | TreeNode(_,left,right) & x when f x -> 1 + (count f left) + (count f right)
    | TreeNode(_,left,right)  -> (count f left) + (count f right)    // count left and right branches
  count f t
