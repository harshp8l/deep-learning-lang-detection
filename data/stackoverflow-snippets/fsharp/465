// This approach assumes the data is comma-delimited.
let data = "one, two, three, one, one, two"
let dataArray = data.Split([|','|]) |> Array.map (fun x -> x.Trim())
let countSubstrings searchTerm = dataArray |> Array.filter (fun x -> x = searchTerm) |> Array.length
let countOnes = countSubstrings "one"

let data' = "onetwothreeoneonetwoababa"

// This recursive approach makes no assumptions about a delimiter,
// and it will count overlapping occurrences (e.g., "aba" twice in "ababa").
// This is similar to Jake Lishman's answer.
let rec countSubstringFromI s i what = 
    let len = String.length what
    if i + len - 1 >= String.length s then 0
    else (if s.Substring(i, len) = what then 1 else 0) + countSubstringFromI s (i + 1) what

let countSubStrings' = countSubstringFromI data' 0 "one"
