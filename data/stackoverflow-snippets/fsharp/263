module net_utilF_mod

open System
open System.Text
open System.Threading
open System.Net
open System.Net.Sockets
open System.IO

type Smtp1() = 
    member this.X = "F#"

let send_data (socket : Socket) (data : string) =
    let dataArray : byte [] = Encoding.ASCII.GetBytes(data)
    socket.Send(dataArray, 0, dataArray.Length, SocketFlags.None)

let check_response (socket:Socket) expectedResultCode =
    while socket.Available = 0 do
        System.Threading.Thread.Sleep 100  

    let responseArray : byte [] = Array.zeroCreate 1024
    socket.Receive(responseArray, 0, socket.Available, SocketFlags.None) |> ignore
    let responseData : string = Encoding.ASCII.GetString(responseArray)
    let responseCode : int = Convert.ToInt32(responseData.Substring(0,3))
    if responseCode = expectedResultCode then
        true
    else
        false

let test_smtp (smtp_server_address : string) (port : int) =
    let helo_msg = String.Format("HELO {0}\r\n", Dns.GetHostName())
    let hostEntry : IPHostEntry =  
        try 
            Dns.GetHostEntry(smtp_server_address)
        with
            | :? System.Net.Sockets.SocketException as ex when ex.SocketErrorCode = SocketError.HostNotFound ->
                 let tempEntry : IPHostEntry = Dns.GetHostEntry(@"localhost")
                 tempEntry

    let email_server_reachable =
        match hostEntry.HostName with
        | @"localhost" -> false
        | _ ->  true


    if false = email_server_reachable then
        false
    else
        let endPoint : IPEndPoint = new IPEndPoint (hostEntry.AddressList.[0], port)
        ( use tcpSocket = new Socket(endPoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp) 
          tcpSocket.Connect(endPoint) |> ignore

          let temp_response = 
              if true = check_response tcpSocket  220 then
                send_data tcpSocket helo_msg  |> ignore
                check_response tcpSocket 250              
              else
                false

          temp_response 
        )
