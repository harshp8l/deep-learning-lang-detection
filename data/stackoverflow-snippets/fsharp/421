let getFn e =
    let rec name e =
        match e with
            | Call (x, mi, y) -> mi
            | Lambda (_, body) -> name body
            | _ -> failwith <| sprintf "not a function %A" e
    name e

let join sep (ss: string []) = String.Join(sep, ss)

let wrap sepB sepE s = sprintf "%s%s%s" sepB s sepE

let generics (ts:Type[]) = 
    if Array.length ts > 0 then
        ts
        |> Array.map (fun x -> x.Name)
        |> join ","
        |> wrap "<" ">"
    else ""

let genericDef (mi:MethodInfo) = mi.GetGenericMethodDefinition()
