open Hopac
open Hopac.Stream
open System

let requestDetailAsync url = async {
   Console.WriteLine (""Simulating request "" + url)
   try
       do! Async.Sleep(1000) // let's say each request takes about a second
       return Ok (url + "":body..."")
   with :? Exception as e ->
       return Error e
 }

let requestMasterAsync() : Stream<Result<string,exn>> =
    [| ""http://www.example.com/1""
       ""http://www.example.com/2""
       ""http://www.example.com/3""
       ""http://www.example.com/4""
       ""http://www.example.com/5""
       ""http://www.example.com/6""
       ""http://www.example.com/7""
       ""http://www.example.com/8""
       ""http://www.example.com/9""
       ""http://www.example.com/10"" |]
    |> Stream.ofSeq
    |> Stream.mapPipelinedJob 3 (requestDetailAsync >> Job.fromAsync)

requestMasterAsync()
|> Stream.iterFun (printfn ""%A"")
|> queue //prints all results asynchronously

let allResults : Result<string,exn> list = 
    requestMasterAsync()
    |> Stream.foldFun (fun results cur -> cur::results ) []
    |> run //fold stream into list synchronously
