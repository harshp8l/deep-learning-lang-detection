type Message = 
    | Ping
    | Back

type State = {Behavior: State -> Message -> State; Previous: State -> Message -> State}

let rec pong state message =
    match message with 
    | Ping -> 
        printfn ""Pong""
        {state with Behavior = superpong} 
    | Back ->
        {state with Behavior = state.Previous}
and superpong state message = 
    match message with 
    | Ping ->
        printfn ""Super pong""
        {state with Behavior = pong} 
    | Back ->
        {state with Behavior = state.Previous}

let agent = new MailboxProcessor<Message>(fun inbox ->
    let setPrevious oldState newState = 
        {newState with Previous = oldState.Behavior}
    let rec loop state = 
        async {
            let! msg = inbox.Receive()
            return! loop (msg |> state.Behavior state |> setPrevious state)
        }
    loop {Behavior = pong; Previous = pong})

agent.Start()
agent.Post(Ping)
agent.Post(Ping)
agent.Post(Back)
agent.Post(Ping)
agent.Post(Ping)
