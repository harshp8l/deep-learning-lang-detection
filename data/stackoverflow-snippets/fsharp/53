// NOTE: I'm not sure if this logic is correct. You'll have to verify it.
//
// For the i-th ID:
//    * if all previous IDs are non-empty, 
//      but the i-th ID itself is empty, 
//      then the condition should check for i-th ID being non-empty.
//      This means "query rows of i-th level".
//    * if all previous IDs are non-empty, 
//      and the i-th ID itself is non-empty,
//      then the condition should check for i-th ID being equal to
//      This means "query rows of j-th level", where j > i
//    * Otherwise, the condition should check for
//      the i-th ID being empty.
//      This means "query rows of j-th level", where j < i
let compare prevIds thisId =
    if List.all ((<>) "") prevIds 
        then if thisId = ""
               then <@ fun id -> id <> "" @>
               else <@ fun id -> id = thisId @>
        else <@ fun id -> id = "" @>

let private queryForChild (db: dbml.MobileDataContext) id1 id2 id3 id4 id5 et = 
    query {
        for rows in db.ItemType do
        where (
           (% compare [] id1) rows.Id1 &&
           (% compare [id1] id2) rows.Id2 &&
           (% compare [id1; id2] id3) rows.Id3
           (% compare [id1; id2; id3] id4) rows.Id4
           (% compare [id1; id2; id3; id4] id5) rows.Id5 && 
           rows.EntityType = et )
        select rows 
    }
