open System
open System.Collections.Generic

type MultidimensionalIndex<'T>() =

    let data = Dictionary<DateTime, Dictionary<string, Dictionary<string, Dictionary<int, Dictionary<int, 'T>>>>>()

    let getOrAddEmpty key (d : Dictionary<_,_>) =
        match d.TryGetValue key with
        | true, innerDict -> innerDict
        | false, _ ->
            let innerDict = Dictionary<_,_>()
            d.[key] <- innerDict
            innerDict

    let selectValues keyOpt (dicts : Dictionary<_,_> array) =
        dicts
        |> Array.collect (fun d ->
            match keyOpt with
            | Some key ->
                match d.TryGetValue key with
                | true, v -> [| v |]
                | false, _ -> [||]
            | None ->
                Seq.toArray(d.Values))

    member __.Add (k1, k2, k3, k4, k5) value =
        let innermostDict =
            data
            |> getOrAddEmpty k1
            |> getOrAddEmpty k2
            |> getOrAddEmpty k3
            |> getOrAddEmpty k4
        innermostDict.[k5] <- value

    // None represents a wildcard
    member __.Query (k1Opt, k2Opt, k3Opt, k4Opt, k5Opt) =
        [| data |]
        |> selectValues k1Opt
        |> selectValues k2Opt
        |> selectValues k3Opt
        |> selectValues k4Opt
        |> selectValues k5Opt
