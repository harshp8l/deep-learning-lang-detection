open System

type CategoryAssessment =
    { fieldIndex: int
      value: int
      ruleAssessments: list<int> }

let MatchRule rVal fVal  =
        rVal = fVal

let AssessRule cMatches (inputs:int[][]) (rIndex, rVal) =
//    printfn ""START - Assess""  // uses more cpu than the code itself
    let matches = inputs.[rIndex] |> 
                  Array.map2 (fun cVal fVal -> (MatchRule rVal fVal) = cVal) cMatches
    let assessment = matches |> 
                     Array.map ( fun v -> if v then 1 else 0  ) |> 
                     Array.sum
//    printfn ""END - Assess""
    assessment

let Assess categorizeFields rules (inputs:int[][]) =
    categorizeFields |> List.map (fun (catIndex, catValue) ->
        let catMatches = inputs.[catIndex] |> Array.map( fun v -> v = catValue )
        let assessments = rules |> Array.Parallel.map 
                                    (AssessRule catMatches inputs) 
                                 |> Array.toList
        { CategoryAssessment.fieldIndex = catIndex; 
          value = catValue; 
          ruleAssessments = assessments }  
    )

let numRecords = 10000
let numFields = 20
let numRules = 10000
let inputs = [| for j in 1 .. numFields ->
                [| for i in 1 .. numRecords -> (i % 10) + j |] |]
let categorizeFields = [ (1, 6); (2, 3); (2, 4); (3, 2) ]
let rules = [| for i in 1 .. numRules -> (i % numFields, i) |]
let assessments = Assess categorizeFields rules inputs
printfn ""Assessments: %A"" assessments
