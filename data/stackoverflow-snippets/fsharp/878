// initial variable count
let variablecnt = dict <| Seq.empty<string*int>

/// Convert from KeyValuePair to tuple of (k*v)
let keyVal =
    function
    |KeyValue(k, v) -> (k, v+1)

// split dictionary into twp lists containing values which are
// less than or greater than or equal to 100 respectively
let splitAt100 = 
    Seq.map (keyVal) // map to KeyValuePairs
    >> Seq.toList // convert to list
    >> List.partition (fun (k,v) -> v < 100) // split into tuples based on v < 100

// apply the splitat100 function to the variable count
let lThan100, grEq100 = splitAt100 variablecnt 
// variables is a dictionary of the key value pairs, where the values are less than 100
let variables = lThan100 |> dict
// trash is a list of 0s equal in length to the number of key value pairs with 100+ values
let trash = grEq100 |> List.map (fun _ -> 0)
