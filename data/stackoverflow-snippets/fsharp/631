#r ""Newtonsoft.Json.dll""
#r ""Suave.dll""
#r ""Suave.Testing.dll""
#r ""System.Net.Http.dll""
#r ""Fuchu.dll""

open System.Net
open System.Net.Http

open Suave
open Suave.Operators
open Newtonsoft.Json
open Suave.Filters
open Suave.Testing

let Ok o = o |> JsonConvert.SerializeObject |> Successful.OK
let NotOk o = o |> JsonConvert.SerializeObject |> RequestErrors.BAD_REQUEST

type Result<'T> =
| Success of 'T
| Failure of string

let DoThing someParam anotherParam =
    let stats = Success(999) // <- business code here
    match stats with
    | Success s -> s |> Ok
    | Failure m -> m |> NotOk

let checkHeader ctx =
    asyncOption {
        match ""key"" |> ctx.request.header with
        | Choice1Of2 k1 ->
            printfn ""Header k1: %s"" k1
            return ctx
        | Choice2Of2 k2 ->
            printfn ""Header k2: %s"" k2
            return { ctx with
                        response = { ctx.response with
                                        status = HTTP_400 } } }

let app =
    choose
        [ GET >=> choose
            [
                pathScan ""/someroute/%i/%i"" (fun (p1, p2) ->
                        DoThing p1 p2)
                >=> checkHeader
            ]
        ]

let emptyCont = new ByteArrayContent([||]) |> Some

runWith defaultConfig app
|> reqResp HttpMethod.GET 
           ""/someroute/1/2"" """" 
           None 
           None 
           DecompressionMethods.None
           id
           id
