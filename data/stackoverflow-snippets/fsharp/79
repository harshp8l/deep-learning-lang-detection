open System
open System.IO
open System.Linq
open System.Security.AccessControl
open System.Security.Principal

let checkSecurity  =
    let account = sprintf @""%s\%s"" Environment.UserDomainName Environment.UserName
    let identity = WindowsIdentity.GetCurrent()
    let principal = identity |> WindowsPrincipal
    let isAdmin = identity.Owner = identity.User
    fun (dir: DirectoryInfo) ->
        try
            let acl = dir.GetAccessControl(AccessControlSections.All)
            let rules = acl.GetAccessRules(true, true, typeof<NTAccount>)
            rules.OfType<FileSystemAccessRule>() 
            |> Seq.filter (fun rule -> rule.IdentityReference.Value.Equals(account, StringComparison.CurrentCultureIgnoreCase) || 
                           (if rule.IdentityReference.Value.Equals(""BUILTIN\Administrators"", StringComparison.CurrentCultureIgnoreCase) 
                            then isAdmin && principal.IsInRole(rule.IdentityReference.Value)
                            else principal.IsInRole(rule.IdentityReference.Value)))
            |> Seq.exists (fun rule -> (rule.FileSystemRights &&& FileSystemRights.Read = FileSystemRights.Read) && rule.AccessControlType <> AccessControlType.Deny)
        with | _ -> 
            false

let rec getFiles (dir: DirectoryInfo) =
    [ if checkSecurity dir
      then for file in dir.GetFiles(""*"") do yield file
           for subDir in dir.GetDirectories(""*"") do yield! getFiles subDir
    ]

let dir = DirectoryInfo(@""C:\Temp"")
dir |> getFiles
