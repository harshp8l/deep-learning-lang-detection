let chunkBy2 (f : 'T-> 'Key) (g : 'T->'Result)  =
    chunkBy f >> Seq.map (fun (k, gs) -> k, List.map g gs)
// val chunkBy2 :
//   f:('T -> 'Key) -> g:('T -> 'Result) -> (seq<'T> -> seq<'Key * 'Result list>)
//      when 'Key : equality

["a", 1; "a", 2; "a", 111; "b", 3; "bb", 1; "bb", -1]
|> chunkBy2 fst snd
// val it : seq<string * int list> =
//   seq [("a", [1; 2; 111]); ("b", [3]); ("bb", [1; -1])]

Seq.initInfinite (fun x ->
    if (x / 2) % 2 = 0 then "a", x else "b", x)
|> chunkBy2 fst snd
|> Seq.skip 50000
// val it : seq<string * int list> =
//   seq
//     [("a", [100000; 100001]); ("b", [100002; 100003]); ("a", [100004; 100005]);
//      ("b", [100006; 100007]); ...]
