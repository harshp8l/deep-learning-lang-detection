open System

type DBRow1 = {
    id: string
    createdAt: DateTime
}

type DBRow2 = {
    id: string
    createdAt: DateTime
    address: string
}

/// The types are defined above without an interface

let row1 = {id = ""Row1""; createdAt = DateTime.Now}
let row2 = {id = ""Row2""; createdAt = DateTime.Now; address = ""NYC""}

type IDBRow<'A> =
    abstract member Data:(string * DateTime) 

// Object expression implements the interface
let Data1 (x:DBRow1)  = {
    new IDBRow<_> with
        member __.Data = (x.id, x.createdAt)
}

let Data2 (x: DBRow2) = {
    new IDBRow<_> with
    member __.Data = (x.id, x.createdAt)
}

//pass in both the object expression and the record
let getData (ifun: 'a -> IDBRow<'b>) xrec = 
    (ifun xrec).Data

// You could partially apply the functions: `getData1 = getData Data1` 
getData Data1 row1 //(""Row1"", 2018/02/05 9:24:17)
getData Data2 row2 //(""Row2"", 2018/02/05 9:24:17)
