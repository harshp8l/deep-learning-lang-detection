type Vars<'a> private () =
    static let dict = System.Collections.Generic.Dictionary<string,Quotations.Var>()
    static member Var(nm) = 
        match dict.TryGetValue nm with
        | true, v -> v
        | _ -> 
            let v = Quotations.Var(nm, typeof<'a>)
            dict.[nm] <- v
            v

[<GeneralizableValue>]
let x<'a> : Quotations.Expr<'a> = Quotations.Expr.Var(Vars<'a>.Var "x") |> Quotations.Expr.Cast

[<GeneralizableValue>]
let y<'a> : Quotations.Expr<'a> = Quotations.Expr.Var(Vars<'a>.Var "y") |> Quotations.Expr.Cast


let q1 = <@ %x + %y * (1 + %x) @>

let q2 = <@ "test" + %x @>
