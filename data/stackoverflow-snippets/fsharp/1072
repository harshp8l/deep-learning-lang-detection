open Microsoft.FSharp.Quotations.Patterns
open Microsoft.FSharp.Quotations.DerivedPatterns

let ModelValidator (validator : 'T -> bool) (valueToValidate : 'T) : 'T = 
    failwith ""Don't call me!""

type Invoker private () =
    static let CallMethodInfo = 
        let flags = System.Reflection.BindingFlags.NonPublic ||| System.Reflection.BindingFlags.Static
        typeof<Invoker>.GetMethod(""DoCall"", flags).GetGenericMethodDefinition()

    static member private DoCall<'T>(validator: obj, value: obj): bool =
        let validator: 'T -> bool = unbox validator
        let value: 'T = unbox value
        validator value

    static member Call(validator: obj, value: obj, typeOfValue: System.Type): bool =
        CallMethodInfo.MakeGenericMethod(typeOfValue).Invoke(null, [|validator; value|]) :?> _

let foo expr =
    match expr with
    | SpecificCall <@ ModelValidator @> (None, [genericTypeInstantiation], [ Value(validator, validatorType); source ]) ->
        let value = getValue source // Will return an 'obj'
        Invoker.Call(validator, value, genericTypeInstantiation)
    | _ -> failwith ""...""
