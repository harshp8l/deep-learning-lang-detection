//record to describe a club member
type ClubMember = {   
    age: int
    handi: int
}

//Discriminated Union to describe possible sub-types of club member
type MemberType = Open | Senior

//list of club members
let ageAndHandi2 = [{age=18;handi=20}
                    {age=45;handi=2}
                    {age=61;handi=12}]

//function to return the type of club member, notice that it's not a string
//but you could do that as well 
let selectMember (mem:ClubMember) =
    match mem with 
    | x when (mem.age >= 55) && (mem.handi > 7)  -> Senior
    | _ -> Open

//pipe the member list into the selection function, which return a MemberType List
ageAndHandi2
|> List.map selectMember
//val it : MemberType list = [Open; Open; Senior]
