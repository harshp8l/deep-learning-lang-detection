type HideCloseButtonOnWindow() =
    inherit Behavior<Window>() 

    let GWL_STYLE = -16;
    let WS_SYSMENU = 0x80000;

    [<DllImport(""user32.dll"", SetLastError = true)>]
    static extern int GetWindowLong(IntPtr hWnd, int nIndex);

    [<DllImport(""user32.dll"")>]
    static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);

    override x.OnAttached() =
        base.OnAttached()
        x.AssociatedObject.Loaded.AddHandler(fun s e -> x.OnLoaded(s,e))

    override x.OnDetaching() =
        x.AssociatedObject.Loaded.RemoveHandler(fun s e -> x.OnLoaded(s,e))
        base.OnDetaching()


    member x.OnLoaded(sender:obj, e:RoutedEventArgs) =
        let hwnd = (new WindowInteropHelper(x.AssociatedObject)).Handle
        SetWindowLong(hwnd, GWL_STYLE, GetWindowLong(hwnd, GWL_STYLE) &&& ~~~WS_SYSMENU)
        |> ignore
