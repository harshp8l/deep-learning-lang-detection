type SomeClass() =
    member
        this.SomeMethod(?a:int, ?b:int) = 
            match a,b with
            | Some x, Some y -> x + y
            | _, _ -> 0
    member 
        this.SomeMethod (a:int,b:int) = a + b

let inline someMethod (a: ^T when ^T : (member SomeMethod: int option*int option->int)) = 
    (^T : (member SomeMethod: int option*int option->int) (a,Some 2,Some 3))

let inline someMethod2 (a: ^T when ^T : (member SomeMethod2: int*int->int)) = 
    (^T : (member SomeMethod2: int*int->int) (a,2,3))

let a = new SomeClass()
someMethod a
