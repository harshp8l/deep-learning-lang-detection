type IExp = interface end

type NumExp =
        | Num of float
        interface IExp
type Exp =
        | Dot of NumExp * NumExp
        | Op of string * IExp * IExp
        interface IExp

// This function accepts both NumExp and Exp
let f (x:IExp) = match x with
    | :? NumExp as e -> match e with
        | Num v -> ""Num""
    | :? Exp as e -> match e with
        | Dot (e1,e2) -> ""Dot""
        | Op (op,e1,e2) -> ""Op""
    | _ -> invalidArg ""x"" ""Unsupported expression type""

// This function accepts only NumExp
let g = function
    | Num v -> ""Num""
