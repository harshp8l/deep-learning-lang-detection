namespace Unsafe
{
  using System;
  using System.Diagnostics;
  using System.Runtime.CompilerServices;
  using System.Runtime.InteropServices;

  [StructLayout(LayoutKind.Sequential)]
  public struct Matrix5x10
  {
    double m_c0_r0;
    double m_c1_r0;
    double m_c2_r0;
    double m_c3_r0;
    double m_c4_r0;
    double m_c0_r1;
    double m_c1_r1;
    double m_c2_r1;
    double m_c3_r1;
    double m_c4_r1;
    double m_c0_r2;
    double m_c1_r2;
    double m_c2_r2;
    double m_c3_r2;
    double m_c4_r2;
    double m_c0_r3;
    double m_c1_r3;
    double m_c2_r3;
    double m_c3_r3;
    double m_c4_r3;
    double m_c0_r4;
    double m_c1_r4;
    double m_c2_r4;
    double m_c3_r4;
    double m_c4_r4;
    double m_c0_r5;
    double m_c1_r5;
    double m_c2_r5;
    double m_c3_r5;
    double m_c4_r5;
    double m_c0_r6;
    double m_c1_r6;
    double m_c2_r6;
    double m_c3_r6;
    double m_c4_r6;
    double m_c0_r7;
    double m_c1_r7;
    double m_c2_r7;
    double m_c3_r7;
    double m_c4_r7;
    double m_c0_r8;
    double m_c1_r8;
    double m_c2_r8;
    double m_c3_r8;
    double m_c4_r8;
    double m_c0_r9;
    double m_c1_r9;
    double m_c2_r9;
    double m_c3_r9;
    double m_c4_r9;

    public const int Columns  = 5;
    public const int Rows     = 10;

    unsafe public double this[int x, int y]
    {

      [MethodImpl (MethodImplOptions.AggressiveInlining)]
      get
      {
        var i = 5 * y + x;

        if (i < 0 || i >= 50)
        {
          throw new IndexOutOfRangeException (""0 <= x <= 5 && 0 <= y <= 10"");
        }

        fixed (double * ms = &m_c0_r0)
        {
          return ms[i];
        }
      }

      [MethodImpl (MethodImplOptions.AggressiveInlining)]
      set
      {
        var i = 5 * y + x;

        if (i < 0 || i >= 50)
        {
          throw new IndexOutOfRangeException (""0 <= x <= 5 && 0 <= y <= 10"");
        }

        fixed (double * ms = &m_c0_r0)
        {
          ms[i] = value;
        }
      }
    }

    public void Update (Func<int, int, double, double> updater)
    {
      if (updater == null)
      {
        return;
      }
      m_c0_r0 = updater (0, 0, m_c0_r0);
      m_c1_r0 = updater (1, 0, m_c1_r0);
      m_c2_r0 = updater (2, 0, m_c2_r0);
      m_c3_r0 = updater (3, 0, m_c3_r0);
      m_c4_r0 = updater (4, 0, m_c4_r0);
      m_c0_r1 = updater (0, 1, m_c0_r1);
      m_c1_r1 = updater (1, 1, m_c1_r1);
      m_c2_r1 = updater (2, 1, m_c2_r1);
      m_c3_r1 = updater (3, 1, m_c3_r1);
      m_c4_r1 = updater (4, 1, m_c4_r1);
      m_c0_r2 = updater (0, 2, m_c0_r2);
      m_c1_r2 = updater (1, 2, m_c1_r2);
      m_c2_r2 = updater (2, 2, m_c2_r2);
      m_c3_r2 = updater (3, 2, m_c3_r2);
      m_c4_r2 = updater (4, 2, m_c4_r2);
      m_c0_r3 = updater (0, 3, m_c0_r3);
      m_c1_r3 = updater (1, 3, m_c1_r3);
      m_c2_r3 = updater (2, 3, m_c2_r3);
      m_c3_r3 = updater (3, 3, m_c3_r3);
      m_c4_r3 = updater (4, 3, m_c4_r3);
      m_c0_r4 = updater (0, 4, m_c0_r4);
      m_c1_r4 = updater (1, 4, m_c1_r4);
      m_c2_r4 = updater (2, 4, m_c2_r4);
      m_c3_r4 = updater (3, 4, m_c3_r4);
      m_c4_r4 = updater (4, 4, m_c4_r4);
      m_c0_r5 = updater (0, 5, m_c0_r5);
      m_c1_r5 = updater (1, 5, m_c1_r5);
      m_c2_r5 = updater (2, 5, m_c2_r5);
      m_c3_r5 = updater (3, 5, m_c3_r5);
      m_c4_r5 = updater (4, 5, m_c4_r5);
      m_c0_r6 = updater (0, 6, m_c0_r6);
      m_c1_r6 = updater (1, 6, m_c1_r6);
      m_c2_r6 = updater (2, 6, m_c2_r6);
      m_c3_r6 = updater (3, 6, m_c3_r6);
      m_c4_r6 = updater (4, 6, m_c4_r6);
      m_c0_r7 = updater (0, 7, m_c0_r7);
      m_c1_r7 = updater (1, 7, m_c1_r7);
      m_c2_r7 = updater (2, 7, m_c2_r7);
      m_c3_r7 = updater (3, 7, m_c3_r7);
      m_c4_r7 = updater (4, 7, m_c4_r7);
      m_c0_r8 = updater (0, 8, m_c0_r8);
      m_c1_r8 = updater (1, 8, m_c1_r8);
      m_c2_r8 = updater (2, 8, m_c2_r8);
      m_c3_r8 = updater (3, 8, m_c3_r8);
      m_c4_r8 = updater (4, 8, m_c4_r8);
      m_c0_r9 = updater (0, 9, m_c0_r9);
      m_c1_r9 = updater (1, 9, m_c1_r9);
      m_c2_r9 = updater (2, 9, m_c2_r9);
      m_c3_r9 = updater (3, 9, m_c3_r9);
      m_c4_r9 = updater (4, 9, m_c4_r9);
    }

  }
}
