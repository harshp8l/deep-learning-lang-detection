type UnaryFunction = int -> int
type BinaryFunction = int -> int -> int
type BooleanFunction = int -> int -> bool

type Functions =
    | Unary of UnaryFunction    
    | Binary of BinaryFunction
    | Boolean of BooleanFunction

// ...

let evaluate f = // signature: Functions -> string
    match f with
    | Unary u ->
        let test_result = u 3
        sprintf ""the result of the unary function is %d"" test_result
    | Binary b ->
        let test_result = b 315 42
        sprintf ""the result of the binary function is %d"" test_result
    | Boolean o ->
        let test_result = o 315 42
        if test_result then ""yeah"" else ""nope""
