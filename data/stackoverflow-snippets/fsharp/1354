// Two-way communication processing a string
type ProcessMessage = 
  PM of string * AsyncReplyChannel<string>

type ProcessAgent() = 
  let agent = MailboxProcessor.Start(fun inbox -> async {
    while true do 
      let! (PM(s, repl)) = inbox.Receive()
      repl.Reply("Echo: " + s) })
  // Takes input, processes it and asynchronously returns the result
  member x.Process(input) =
    agent.PostAndAsyncReply(fun ch -> PM(input, ch))

type SaveAgent() = 
  let flushed = Event<_>()
  let agent = (* ... *)
  // Action to be called to save a new processed value
  member x.Add(res) =
    agent.Post(res)
  // Notification triggered when the cache is flushed
  member x.Flushed = flushed.Publish
