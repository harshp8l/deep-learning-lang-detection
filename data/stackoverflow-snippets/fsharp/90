let (|IsType|_|) (a: FSharp.Quotations.Expr<System.Type>) (t: System.Type) : unit option = 
    match a with
    | FSharp.Quotations.Patterns.Call (None, m, []) when m.Name = "TypeOf" -> 
        let testAgainst = m.GetGenericArguments().[0]
        if testAgainst.IsAssignableFrom t
            then Some()
            else None
    | _ -> 
        None

match t with
| IsType <@ typeof<Enum> @> -> "enum"
| IsType <@ typeof<Int32> @> -> "int"
| _ -> "don't know"
