let f x = x+1

// Normal application
f 5  

// Complex expression as argument
f (5+6)

// Let-expression as argument
f (let x = 5 in x + 6)

// Replacing the `in` with a newline
f ( let x = 5
    x + 6 )

// Replacing parentheses with pipe
f <| 
  let x = 5
  x + 6

// Operators (of which the pipe is one) have an exception to the offset rule.
// This is done to support flows like this:
[1;2;3] |>
List.map ((+) 1) |>
List.toArray

// Applying this exception to the `f` + `let` expression:
f <|
let x = 5
x + 6
