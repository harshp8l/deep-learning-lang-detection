type ViewModelBase() =

  /// Evaluates an expression. From http://www.fssnip.net/h1
  let rec eval = function
    | Value (v, _) -> v
    | Coerce (e, _) -> eval e
    | NewObject (ci, args) -> ci.Invoke (evalAll args)
    | NewArray (t, args) -> 
        let array = Array.CreateInstance (t, args.Length) 
        args |> List.iteri (fun i arg -> array.SetValue (eval arg, i))
        box array
    | NewUnionCase (case, args) -> FSharpValue.MakeUnion (case, evalAll args)
    | NewRecord (t, args) -> FSharpValue.MakeRecord (t, evalAll args)
    | NewTuple args ->
        let t = FSharpType.MakeTupleType [| for arg in args -> arg.Type |]
        FSharpValue.MakeTuple (evalAll args, t)
    | FieldGet (Some (Value (v, _)), fi) -> fi.GetValue v
    | PropertyGet (None, pi, args) -> pi.GetValue (null, evalAll args)
    | PropertyGet (Some x, pi, args) -> pi.GetValue (eval x, evalAll args)
    | Call (None, mi, args) -> mi.Invoke (null, evalAll args)
    | Call (Some x, mi, args) -> mi.Invoke (eval x, evalAll args)
    | x -> raise <| NotSupportedException(string x)
  and evalAll args = [| for arg in args -> eval arg |]

  let propertyChanged = new Event<_,_>()

  interface INotifyPropertyChanged with
    [<CLIEvent>]
    member __.PropertyChanged = propertyChanged.Publish

  member this.OnPropertyChanged(propertyName : string) =
    propertyChanged.Trigger(this, new PropertyChangedEventArgs(propertyName))

  /// Given a property-getter quotation, calls the callback with the value of
  /// the expression every time INotifyPropertyChanged is raised for this property.
  member this.Observe (expr: Expr<'a>) (callback: 'a -> unit) : unit = 
    match expr with
    | PropertyGet (_, propInfo, _) ->
        (this :> INotifyPropertyChanged).PropertyChanged
        |> Observable.filter (fun args -> args.PropertyName = propInfo.Name)
        |> Observable.map (fun _ -> eval expr :?> 'a)
        |> Observable.add callback
    | _ -> failwith "Expression must be a property getter"
