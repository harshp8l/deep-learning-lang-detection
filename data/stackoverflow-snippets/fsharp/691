type J = JsonProvider<""sample.json"">

// The type `J.Car` is the type of the car elements in the array    
// but also of the car record directly nested in the ""car"" field
let printBrand (car:J.Car) =
  printfn ""%s"" car.Brand

// Now you can use pattern matching to check if the current element
// has an array of cars or just a single record - then you can call
// `printBrand` either on all cars or on just a single car
let doc = J.GetSample()
for set in doc.Set do
  match set.Car.Record, set.Car.Array with
  | Some c, _ -> printBrand c
  | _, Some a -> for c in a do printBrand c
  | _ -> failwith ""Wrong input""
