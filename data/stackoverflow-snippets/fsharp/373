type myResultType = 
   | Number of float
   | StringItem of string

// I fleshed out your `myFunction` example so it actually compiles
let myFunction (input:string) = 
  match input.[input.Length-1] with
  | 'F' -> input.[0..input.Length-2] |> float |> Number
  | 'S' -> input.[0..input.Length-2] |> StringItem

// Use this one for unary operators (no examples given here)
let floatOp op result =
    match result with
    | Number n -> op n |> Number
    | anythingElse -> anythingElse

// Use this one to define operators where the "real" float is the first operand
let floatOp2 op floatArg result =
    match result with
    | Number n -> op floatArg n |> Number
    | anythingElse -> anythingElse

// Use this one to define operators where the "real" float is the second operand
let floatOp2' op result floatArg =
    match result with
    | Number n -> op n floatArg |> Number
    | anythingElse -> anythingElse

let (+.) = floatOp2 (+)
let ( *. ) = floatOp2 (*)   // Spaces needed so this doesn't look like a comment
// etc.
let (.+) = floatOp2' (+)
// etc.

let finalValue = (10.0) +. (myFunction "200F")
let finalValue' = (myFunction "200F") .+ 10.0
