let map f x = 
    match x with
    | Success (s, msg) -> Success (f s, msg)
    | Failure f -> Failure f

// This will automatically be inferred to be of type Result<(int list * string), 'a>
let myFirstResult = Success ([1;2], ""I've created an int list"")
// This will automatically be inferred to be of type Result<(string list * string), 'a>
let mySecondResult = Success ([""foo""; ""bar""], ""Here's a string list"")
// Process functions for specific result types. No type tests needed!
let processIntList (l: int list) = Seq.sum l
let processStringList = String.concat ""; ""
// This will automatically be inferred to be of type Result<(int * string), 'a>
let mapFirst = myFirstResult |> map processIntList
// This will automatically be inferred to be of type Result<(string * string), 'a>
let mapSecond = mySecondResult |> map processStringList
