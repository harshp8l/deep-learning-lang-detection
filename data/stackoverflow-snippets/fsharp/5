open System

module MonteCarlo = 

    let processMin = 14
    let processMax = 21
    let randInt = new Random()
    let sampleCount = 1000000
    let results = [for i in 1 .. sampleCount -> (randInt.Next(processMin, processMax))] |> List.map(fun x-> float x)
    let MCResults = List.average results
    let MCCount = float (List.length results)
    let MCTotal = float (List.sum results)
    printfn "%A" MCResults
    let groups = (List.countBy(fun i -> int i) results) |> List.map ( fun (v,c) -> ( v, Math.Round(float (c *100) / MCCount,2)))
    printfn "%A" groups
    groups |> List.iter( fun (v,c) -> (printfn "%A %A%%" v c))
