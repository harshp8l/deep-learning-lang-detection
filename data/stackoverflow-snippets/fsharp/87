let tripleExponentialSmoothing series slen alpha beta gamma nPreds =
    let result = ResizeArray<_>()
    let mutable smooth = 0.
    let mutable trend = 0.
    let seasonals = initialSeasonalComponents series 12
    for i in 0..(series.Length+nPreds-1) do
      match i with
      | 0 ->     // initial values        
          smooth <- series |> Array.head |> float
          trend <- initialTrend series slen
          result.Add(series |> Array.head |> float)
      | i when i >= series.Length -> // we are forecasting
          let m = i - series.Length + 1
          result.Add((smooth + float m * trend) + seasonals.Item(i%slen))
      | _ -> 
          let v = series |> Array.head  |> float
          let lastSmooth = smooth
          smooth <- alpha*(v-seasonals.Item(i%slen)) + (1.-alpha)*(smooth+trend)
          trend <- beta * (smooth-lastSmooth) + (1.-beta)*trend
          seasonals.Item(i%slen) <- gamma*(v-smooth) + (1.-gamma)*seasonals.Item(i%slen)
          result.Add(smooth + trend + seasonals.Item(i%slen))
