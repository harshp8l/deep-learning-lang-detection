open System
open System.Threading

let e = Event<_>()

let sleeper timeToFire = async{
    do! Async.Sleep timeToFire
    e.Trigger() }

let waiter = async{
    do! Async.AwaitEvent e.Publish
    return Ok() }

let foo timeToFire timeOut = async{
    Async.Start(sleeper timeToFire)
    let! child = Async.StartChild(waiter, timeOut)
    try return! child
    with :? TimeoutException -> return Error() }

foo 500 1000 |> Async.RunSynchronously
// val it : Result<unit,unit> = Ok null
foo 1000 500 |> Async.RunSynchronously
// val it : Result<unit,unit> = Error null
