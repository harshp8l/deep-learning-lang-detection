#r @"C:\packages\alglibnet2\lib\alglibnet2.dll"

open System

let function1_grad(x : float [], func : float byref, grad : float [], obj_ : obj) =
    func <- 100.*System.Math.Pow(x.[0]+3.,4.) + System.Math.Pow(x.[1]-3., 4.)        
    grad.[0] <- 400.*System.Math.Pow(x.[0]+3. ,3.)
    grad.[1] <- 4.*System.Math.Pow(x.[1]-3. ,3.)

let runOptim() =

    let x = ref [|0.; 0.|]
    let epsg = 0.0000000001
    let epsf = 0.
    let epsx = 0.
    let stpmax = 0.1
    let maxits = 0

    let state = alglib.minlbfgscreate(1, !x)
    alglib.minlbfgssetcond(state, epsg, epsf, epsx, maxits)
    alglib.minlbfgssetstpmax(state, stpmax)
    alglib.minlbfgsoptimize(state, (fun a b c d -> function1_grad(a, &b, c, d)), null, null)
    let rep = alglib.minlbfgsresults(state, x)

    printfn "%s" (alglib.ap.format(!x, 2))

    let x = ref [|10.; 10.|]
    alglib.minlbfgsrestartfrom(state, !x)
    alglib.minlbfgsoptimize(state, (fun a b c d -> function1_grad(a, &b, c, d)), null, null)
    alglib.minlbfgsresults(state, x, ref rep)

    printfn "%i" rep.terminationtype
    printfn "%s" (alglib.ap.format(!x, 2))
    System.Console.ReadLine() |> ignore
