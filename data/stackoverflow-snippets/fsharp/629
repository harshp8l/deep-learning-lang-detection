type Vector2 = float * float

type Component = 
    | Position of Vector2
    | Velocity of Vector2 
    | Appearance of string

type Components = list<Map<string,Component>> // this is not strictly necessary

let pos = Position(10.,20.)
let app = Appearance "here"

let compMap1= Map.empty<string,Component> // define an empty map for Component
let compMap1 = compMap1.Add("key1",pos).Add("key2",app) // or: let compMap1' = dict(["key1",pos;"key2",app])
let compMap2 = ["key3",pos;"key4",pos] |> Map.ofList // you can create map from a list
let (components:Components) = [compMap1;compMap2] // make a list of your maps
let components' = [compMap1;compMap2] // or just use a generic F# list
(*
val components' : Map<string,Component> list =
  [map [("key1", Position (10.0, 20.0)); ("key2", Appearance "here")];
   map [("key3", Position (10.0, 20.0)); ("key4", Position (10.0, 20.0))]]
*)
