type HfsmOp<'R> =
  abstract Invoke<'T> : State<'T,'R> -> 'R

let rec depth =
  { new HfsmOp<int> with
      member x.Invoke(state) =
        let childDepth = 
          { new InvokeWithState<int> with
              member x.Invoke<'T>(states:State<'T, int> list) : int = 
                if List.isEmpty states then 0
                else states |> List.map (fun s -> depth.Invoke<'T> s) |> List.max }
          |> state.SubStates 
        childDepth + 1}

depth.Invoke hfsm
