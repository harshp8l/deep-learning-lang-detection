siftDown(int index)
{
    while (index < n/2)
    {
        // find the smallest child
        int ixChild = (ix * 2) + 1;
        if (ixChild < n-1 && a[ixChild] > n[ixChild + 1])
        {
            ixChild = ixChild + 1;
        }
        // if the item is <= the smallest child, we're done
        if (a[i] < a[ixChild]) break;

        // otherwise, swap with the smallest child
        swap(i, ixChild);

        // and do it again
        i = ixChild;
    }
}            
