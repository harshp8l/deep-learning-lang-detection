let inline mask (n:int) (m:int) = (# ""and"" n m : int #)

[<NoDynamicInvocation>]
let inline (<<<) (x: ^T) (n:int) : ^T = 
     (^T: (static member (<<<) : ^T * int -> ^T) (x,n))
     when ^T : int32      = (# ""shl"" x (mask n 31) : int #)
     when ^T : uint32     = (# ""shl"" x (mask n 31) : uint32 #)
     when ^T : int64      = (# ""shl"" x (mask n 63) : int64 #)
     when ^T : uint64     = (# ""shl"" x (mask n 63) : uint64 #)
     when ^T : nativeint  = (# ""shl"" x n : nativeint #)
     when ^T : unativeint = (# ""shl"" x n : unativeint #)
     when ^T : int16      = (# ""conv.i2"" (# ""shl"" x (mask n 15) : int32  #) : int16 #)
     when ^T : uint16     = (# ""conv.u2"" (# ""shl"" x (mask n 15) : uint32 #) : uint16 #)
     when ^T : sbyte      = (# ""conv.i1"" (# ""shl"" x (mask n 7 ) : int32  #) : sbyte #)
     when ^T : byte       = (# ""conv.u1"" (# ""shl"" x (mask n 7 ) : uint32 #) : byte #)

[<NoDynamicInvocation>]
let inline (>>>) (x: ^T) (n:int) : ^T = 
     (^T: (static member (>>>) : ^T * int -> ^T) (x,n))
     when ^T : int32      = (# ""shr""    x (mask n 31) : int32 #)
     when ^T : uint32     = (# ""shr.un"" x (mask n 31) : uint32 #)
     when ^T : int64      = (# ""shr""    x (mask n 63) : int64 #)
     when ^T : uint64     = (# ""shr.un"" x (mask n 63) : uint64 #)
     when ^T : nativeint  = (# ""shr""    x n : nativeint #)
     when ^T : unativeint = (# ""shr.un"" x n : unativeint #)
     when ^T : int16      = (# ""conv.i2"" (# ""shr""    x (mask n 15) : int32  #) : int16 #)
     when ^T : uint16     = (# ""conv.u2"" (# ""shr.un"" x (mask n 15) : uint32 #) : uint16 #)
     when ^T : sbyte      = (# ""conv.i1"" (# ""shr""    x (mask n 7 ) : int32  #) : sbyte #)
     when ^T : byte       = (# ""conv.u1"" (# ""shr.un"" x (mask n 7 ) : uint32 #) : byte #)
