// You can put the input string 
// as the LAST parameter not first
let shortenRomanNumeral (k:string,v:string) (input:string)  =
    input.Replace(k,v)

// This allows you to do partial application like this
let replace4 = shortenRomanNumeral ("IIII", "IV")
let replace9 = shortenRomanNumeral ("VIIII", "IX")

// replace9 and replace4 have the signature string->string
// they are now simple string transformation functions
replace4 "abcIIIIdef" |> printfn "result is '%s'"
replace9 "abcVIIIIdef" |> printfn "result is '%s'"

// and they can be composed together.
// Order is important. Do 9 before 4.
let replace4and9 = replace9 >> replace4 

replace4and9 "VIIII abc IIII" |> printfn "result is '%s'" 

// With this approach, you can now transform a list of tuples 
// into a list of string transforms using List.map
let listOfTransforms = 
    [("VIIII", "IX"); ("IIII", "IV");] 
    |> List.map shortenRomanNumeral 

// and you can combine all these into one big transformation 
// function using composition
let transformAll = 
    listOfTransforms 
    |> List.reduce (>>)

// finally you can apply the big function
transformAll "VIIII abc IIII" |> printfn "result is '%s'" 
