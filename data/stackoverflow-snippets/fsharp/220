open System
open System.Threading.Tasks

let clock =
  let sw = System.Diagnostics.Stopwatch ()
  sw.Start ()
  fun () -> sw.ElapsedMilliseconds

let timeIt n a = 
  let r                 = a ()  // Warm-up

  GC.Collect (2, GCCollectionMode.Forced, true)

  let inline cc g       = GC.CollectionCount g
  let bcc0, bcc1, bcc2  = cc 0, cc 1, cc 2
  let before            = clock ()

  for i = 1 to n do
    a () |> ignore

  let after             = clock ()
  let acc0, acc1, acc2  = cc 0, cc 1, cc 2

  after - before, acc0 - bcc0, acc1 - bcc1, acc2 - bcc2, r

// compute implemented using tail recursion
module TailRecursion =
  let compute (vs : float []) : float =
    let rec loop s i =
      if i < vs.Length then
        let v = vs.[i]
        loop (s + sqrt (1000. * v + 1.)) (i + 1)
      else
        s
    loop 0. 0

// compute implemented using Array.fold
module SequentialFold =
  let compute (vs : float []) : float =
    vs |> Array.fold (fun s v -> s + sqrt (1000. * v + 1.)) 0. 

// compute implemented using Array.map + Array.fold
module SequentialArray =
  let compute (vs : float []) : float =
    vs |> Array.map (fun v -> sqrt (1000. * v + 1.)) |> Array.fold (+) 0. 

// compute implemented using Array.Parallel.map + Array.fold
module ParallelArray =
  let compute (vs : float []) : float =
    vs |> Array.Parallel.map (fun v -> sqrt (1000. * v + 1.)) |> Array.fold (+) 0. 

// compute implemented using Parallel.For
module ParallelFor =
  let compute (vs : float []) : float =
    let lockObj         = obj ()
    let mutable sum     = 0.
    let options         = ParallelOptions()
    let init ()         = 0.
    let body i pls s    =
      let v = i |> float
      s + sqrt (1000. * v + 1.)
    let localFinally ls =
      lock lockObj <| fun () -> sum <- sum + ls
    let pls = Parallel.For  (                                             0
                            ,                                             vs.Length
                            ,                                             options
                            , Func<float>                                 init          
                            , Func<int, ParallelLoopState, float, float>  body          
                            , Action<float>                               localFinally  
                            )
    sum

// compute implemented using Parallel.For with batches of size 100
module ParallelForBatched =
  let compute (vs : float []) : float =
    let inner           = 100
    let outer           = vs.Length / inner + (if vs.Length % inner = 0 then 0 else 1)
    let lockObj         = obj ()
    let mutable sum     = 0.
    let options         = ParallelOptions()
    let init ()         = 0.
    let rec loop e s i  =
      if i < e then
        let v = vs.[i]
        loop e (s + sqrt (1000. * v + 1.)) (i + 1)
      else
        s
    let body i pls s    =
      let b = i * inner
      let e = b + inner |> min vs.Length
      loop e s b
    let localFinally ls =
      lock lockObj <| fun () -> sum <- sum + ls
    let pls = Parallel.For  (                                             0
                            ,                                             outer
                            ,                                             options
                            , Func<float>                                 init          
                            , Func<int, ParallelLoopState, float, float>  body          
                            , Action<float>                               localFinally  
                            )
    sum

[<EntryPoint>]
let main argv =
  let count   = 100000000
  let outers  =
    [|
      //10000000
      100000
      1000
      10
    |]

  for outer in outers do
    let inner     = count / outer
    let vs        = Array.init inner float
    let testCases = 
      [|
        "TailRecursion"         , fun ()  -> TailRecursion.compute    vs 
        "Fold.Sequential"       , fun ()  -> SequentialFold.compute   vs
        "Array.Sequential"      , fun ()  -> SequentialArray.compute  vs
        "Array.Parallel"    , fun ()  -> ParallelArray.compute    vs
        "Parallel.For"          , fun ()  -> ParallelFor.compute      vs
        "Parallel.For.Batched"  , fun ()  -> ParallelForBatched.compute      vs
      |]
    printfn "Using outer = %A, inner = %A, total is: %A" outer inner count
    for nm, a in testCases do
      printfn "  Running test case: %A" nm
      let tm, cc0, cc1, cc2, r = timeIt outer a
      printfn "   it took %A ms with GC collects (%A, %A, %A), result is: %A" tm cc0 cc1 cc2 r
  0
