open System

let rec distribute e = function
  | [] -> [[e]]
  | x::xs' as xs -> (e::xs)::[for xs in distribute e xs' -> x::xs]

let arrayHeadTail = function [||] -> None | xs -> Some (xs.[0], Array.tail xs)

let rec permute xs =
    match arrayHeadTail xs with
    | None -> [| [] |]
    | Some (e, xs) -> Array.Parallel.collect (distribute e >> List.toArray) (permute xs)

let genAnagrams word = 
  word
  |> Seq.toArray
  |> permute
  |> Array.map String.Concat<char>
