type RomanNumerals =
| I     // 1
| IV    // 4
| V     // 5
| IX    // 9
| X     // 10
| XL    // 40
| L     // 50
| XC    // 90
| C     // 100
| CD    // 400
| D     // 500
| CM    // 900
| M     // 1000
with
    // This associates the DU cases to their values
    static member values = [
        M, 1000
        CM, 900
        D, 500
        CD, 400
        C, 100
        XC, 90
        L, 50
        XL, 40
        X, 10
        IX, 9
        V, 5
        IV, 4
        I, 1
    ]

let rec convertInteger i =
    // Base case: We've reached zero, so return an empty list
    if i = 0 then
        []
    // Otherwise...
    else
        // Try to find the first symbol for which the value is <= of the remaining input
        match List.tryFind (fun (symbol, value) -> value <= i) RomanNumerals.values with
        | Some (symbol, value) ->
            // If there is one, prepend it to the result of recursion
            symbol :: convertInteger (i - value)
        | None ->
            // If there is non, we've messed up somehow so throw an exception.
            // Since we have a case for I = 1, this should never happen but we
            // still have to handle it explicitely - otherwise, the compiler complains
            // about a missing case in the match.
            failwithf ""Got a non-zero integer that isn't matched by an existing numeral: %i"" i

[<EntryPoint>]
let main argv =
    let input = 3001
    let romanNumerals = convertInteger input

    // Print the resulting list
    printfn ""%A"" romanNumerals // prints [M; M; M; I]

    // Alternatively, print each character individually:
    List.iter (printf ""%A"") romanNumerals // prints MMMI
    printfn """"

    0
