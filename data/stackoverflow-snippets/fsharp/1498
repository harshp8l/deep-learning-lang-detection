let Calc() = 
  // Start with initial state (600851475143L, 2L) and generate a sequence
  // of "limits" by generating new states & returning limit in each step
  (600851475143L, 2L) 
  |> Seq.unfold (fun (limit, factor) ->
    // End the sequence when factor is greater than limit
    if factor >= limit then None
    // Update limit when divisible by factor
    elif limit % factor = 0L then 
      let limit = limit / factor
      Some(limit, (limit, factor))
    // Update factor
    else 
      Some(limit, (limit, factor + 1L)) ) 
  // Take the last generated limit value
  |> Seq.last
