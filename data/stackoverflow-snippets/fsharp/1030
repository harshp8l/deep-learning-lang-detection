open Microsoft.FSharp.Reflection

type Union<'U>() =
    static member val Cases = 
        FSharpType.GetUnionCases(typeof<'U>)
        |> Array.sortBy (fun case -> case.Tag)
        |> Array.map (fun case -> FSharpValue.MakeUnion(case, [||]) :?> 'U)

let ofEnum e = 
    let i = LanguagePrimitives.EnumToValue e
    Union.Cases.[i - 1]

let toEnum u = 
    let i = Union.Cases |> Array.findIndex ((=) u)
    LanguagePrimitives.EnumOfValue (i + 1)

let du : MyValues = ofEnum ConsoleColor.DarkGreen
let enum : ConsoleColor = toEnum Three
