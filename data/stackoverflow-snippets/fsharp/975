let get (|Empty|Node|) k t =
    let rec get' k = function
    | Empty -> None
    | Node (k', v, l, r) ->
        if k < k' then get' k l
        elif k > k' then get' k r
        else Some v

    get' k t

type T1<'k, 'v> =
    | Empty
    | Node of 'k * 'v * T1<'k, 'v> * T1<'k, 'v>

let getT1 k t =
    let (|Empty|Node|) = function
    | Empty -> Empty
    | Node (k, v, l, r) -> Node (k, v, l, r)

    get (|Empty|Node|) k t

type T2<'k, 'v> =
    | Empty2
    | Node2 of 'k * 'v * T2<'k, 'v> * T2<'k, 'v>

let getT2 k t =
    let (|Empty|Node|) = function
    | Empty2 -> Empty
    | Node2 (k, v, l, r) -> Node (k, v, l, r)

    get (|Empty|Node|) k t
