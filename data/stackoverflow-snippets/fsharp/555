type MyButtonSimple() as self =
    inherit Button()

    static let tapEvent = 
       EventManager.RegisterRoutedEvent
            ( "Tap", RoutingStrategy.Bubble, 
              typeof<RoutedEventHandler>, typeof<MyButtonSimple>)

    // Create a custom event so you can override AddHandler/RemoveHandler behavior
    let tapEvent = 
        { new IDelegateEvent<RoutedEventHandler> with
            member this.AddHandler del = self.AddHandler(MyButtonSimple.TapEvent, del)
            member this.RemoveHandler del = self.RemoveHandler(MyButtonSimple.TapEvent, del) }

    // Raise via routed eventing strategy
    let raiseTapEvent() =
        let newEventArgs = new RoutedEventArgs(MyButtonSimple.TapEvent)
        self.RaiseEvent newEventArgs

    // This isn't exactly the same, but public static fields aren't allowed in F#, and
    // this works for WPF
    static member TapEvent with get() = tapEvent  

    [<CLIEvent>]
    member x.Tap = tapEvent

    // For demonstration purposes we raise the event when clicked
    override self.OnClick() =
        raiseTapEvent()
