type IValueItem =
    [<CLIEvent>]
    abstract PropertyChanged : 
        Control.IEvent<System.ComponentModel.PropertyChangedEventHandler, 
                        System.ComponentModel.PropertyChangedEventArgs>

    abstract ConvertedX : double with get, set

    abstract Y : double with get, set

    abstract CreateCopy : obj

    abstract NewTrendItem : obj

[<AbstractClass>]
type ValueItem<'TX>() =
    let mutable y = 0.0

    let propertyChanged = Event<_, _>()

    interface IValueItem with

        [<CLIEvent>]
        member __.PropertyChanged : Control.IEvent<_, _> = propertyChanged.Publish

        member this.ConvertedX 
            with get() = this.ConvertedX 
            and set(x) = this.ConvertedX <- x 

        member this.CreateCopy = this.CreateCopy
        member this.NewTrendItem = this.NewTrendItem

        member this.Y
            with get() = this.Y 
            and set(y) = this.Y <- y

    abstract ConvertedX : double with get, set
    abstract CreateCopy : obj
    abstract NewTrendItem : obj

    member this.Y
        with get() = y
        and set(value) =
            if y <> value then
                y <- value
                this.NotifyPropertyChanged("Y")

    abstract X : 'TX with get, set

    member this.NotifyPropertyChanged(propertyName) =
        propertyChanged.Trigger(this, System.ComponentModel.PropertyChangedEventArgs(propertyName))
