open System

type Record = { Name : string; Time : DateTime }

type Summary = { Name : String; Start : DateTime; End : DateTime }

let records = [ { Name = ""A""; Time = DateTime(2015, 7, 24, 10, 1, 0) }
                { Name = ""A""; Time = DateTime(2015, 7, 24, 10, 2, 0) }
                { Name = ""A""; Time = DateTime(2015, 7, 24, 10, 3, 0) }
                { Name = ""B""; Time = DateTime(2015, 7, 24, 11, 15, 0) }
                { Name = ""B""; Time = DateTime(2015, 7, 24, 11, 25, 0) }
                { Name = ""B""; Time = DateTime(2015, 7, 24, 11, 30, 0) }
                { Name = ""C""; Time = DateTime(2015, 7, 24, 12, 0, 0) }
                { Name = ""A""; Time = DateTime(2015, 7, 24, 13, 1, 0) }
                { Name = ""A""; Time = DateTime(2015, 7, 24, 13, 5, 0) } ] 

let createSummary records =
    let times = records |> Seq.map (fun r -> r.Time)
    { Name = (Seq.head records).Name
      Start = Seq.min times
      End = Seq.max times }

let summarize records =
    records
    |> Seq.unfold (fun (restOfRecords : seq<Record>) ->
        if Seq.isEmpty restOfRecords then None
        else
            let firstRecord = Seq.head restOfRecords
            let belongsToSameGroup (r : Record) = firstRecord.Name = r.Name
            let thisGroup = restOfRecords |> Seq.takeWhile belongsToSameGroup
            let newRest = restOfRecords |> Seq.skipWhile belongsToSameGroup
            Some (createSummary thisGroup, newRest) )

summarize records
|> Seq.iter (fun s -> printfn ""Name: %s, Start: %s, End: %s"" s.Name (s.Start.ToString()) (s.End.ToString()))
