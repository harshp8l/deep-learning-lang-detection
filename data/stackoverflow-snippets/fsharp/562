let anotherStupidTransformation =
    function
    | A(t,_) -> (t.UnitPrice, t.Qty)
    | B(t,_) -> (t.UnitPrice, t.Qty)
    | C(t) -> (t.UnitPrice, t.Qty)
    | D(t) -> (t.UnitPrice, t.Qty)

let x4y x y tp q =
   if q%x = 0 then y*q/x else tp/q*(q%x)+(q-q%x)/x*y  

let ``34130`` = x4y 3 130
let ``2445`` = x4y 2 45      

let getRealStupidTotal =
    function 
    | (s, (tp,q)) -> 
        (s|> List.ofSeq, (tp,q))
        |>  function
            | (h::t, (tp,q)) ->
                match t |> List.toArray |> System.String with 
                | "34130" -> ``34130`` tp q
                | "2445" -> ``2445`` tp q
                | _ -> tp



let totalPrice = 
    items
    |> List.groupBy(stupidTransformation)
    |> List.map(fun (i, l) -> i, 
                    l 
                    |> List.map(anotherStupidTransformation)
                    |> List.unzip
                    ||> List.fold2(fun acc e1 e2 ->
                         ((fst acc + e1) * e2, snd acc + e2)  ) (0,0))
    |> List.map(getRealStupidTotal)
    |> List.sum

val totalPrice : int = 160
