type SignaturePrinter = class end
    with
    static member Print ([<ReflectedDefinition>] f : Expr<'a -> 'b>) =
        let mi = getFn f |> genericDef
        let typeSig (t:Type) =
            let sanitizedName (n:string) = n.Split('`') |> Array.head
            [|sanitizedName t.Name; generics t.GenericTypeArguments|]
            |> join """"
        let fnParams (m:MethodInfo) = 
            m.GetParameters()
            |> Array.map (fun x -> typeSig x.ParameterType)
            |> join "" -> ""

        [|
            [|mi.Name; mi.GetGenericArguments() |> generics; "" ::""|] |> join """"
            fnParams mi
            typeSig mi.ReturnType
        |]
        |> join "" -> ""
