let rec transpose = function
| (_::_)::_ as M -> List.map List.head M :: transpose (List.map List.tail M)
| _ -> []

// (a (b (c))) -> (a (c (b)))
let transpose0 m = m |> List.map transpose

// (a (b (c))) -> (b (a (c)))
let transpose1 m = m |> transpose

// (a (b (c))) -> (b (c (a)))
let transpose2 m = m |> transpose |> List.map transpose

// (a (b (c))) -> (c (a (b)))  
let transpose3 m = m |> List.map transpose |> transpose

// (a (b (c))) -> (c (b (a)))  
let transpose4 m = m |> transpose |> List.map transpose |> transpose
