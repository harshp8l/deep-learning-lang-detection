[<Struct; CustomComparison; CustomEquality>] 
type ApproxFloat(f:float) = 
  member x.Value = f
  override x.GetHashCode() = f.GetHashCode()
  override x.Equals(another) =
    match another with
    | :? ApproxFloat as y -> abs (x.Value - y.Value) <= 0.001
    | _ -> false
  interface System.IComparable with
    member x.CompareTo(another) = 
      match another with
      | :? ApproxFloat as y -> compare x.Value y.Value
      | _ -> failwith "Cannot compare"

type Complex = 
  | Complex of ApproxFloat * ApproxFloat

type Result = 
  | Result of Complex

Result(Complex(ApproxFloat(1.0), ApproxFloat(1.0))) =
  Result(Complex(ApproxFloat(1.0001), ApproxFloat(1.0001))) 
