// set default values and parameters from attributes
    // this will override explicit calls to DefineParameters
    let props = 
      ty
          .GetProperties(BindingFlags.Public ||| BindingFlags.NonPublic ||| BindingFlags.Instance)
          .Where(fun p -> 
                  p.GetCustomAttributes<ParameterAttribute>(false) //.Count() > 0)
                    .SingleOrDefault(fun attr -> attr.UnitPeriod = OptionalValue.Missing || attr.UnitPeriod = OptionalValue(this.BarUnitPeriod)) <> Unchecked.defaultof<ParameterAttribute>)

    for p in props do
      let attr = p.GetCustomAttributes<ParameterAttribute>(false).SingleOrDefault(fun attr -> attr.UnitPeriod = OptionalValue.Missing || attr.UnitPeriod = OptionalValue(this.BarUnitPeriod)) //:?> ParameterAttribute , typeof<ParameterAttribute>
      if attr.IsString then
        this.DefineParameter(attr.Code, attr.DefaultValue :?> string, attr.Description)
      else
        this.DefineParameter(attr.Code, attr.DefaultValue :?> float, attr.Min, attr.Max, attr.Step, attr.Description)
        optPropInfos.Add(attr.Code, p)
      let value = this.GetParam(attr.Code) // this function gets a value from an attribute
      match p.PropertyType with
      | x when x = typeof<Int32> -> p.SetValue(this, Convert.ToInt32(value), null)
      | x when x = typeof<Int64> -> p.SetValue(this, Convert.ToInt64(value), null)
      | x when x = typeof<decimal> -> p.SetValue(this, Convert.ToDecimal(value), null)
      | x when x = typeof<float> -> p.SetValue(this, Convert.ToDouble(value), null)
      | x when x = typeof<string> -> p.SetValue(this, Convert.ToString(value), null)
      | _ -> failwith "ParameterAttribute could be applied to Int32/64, decimal, float or string types only"
