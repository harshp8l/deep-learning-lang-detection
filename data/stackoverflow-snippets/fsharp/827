let counter = ref 0
let work = async {
    let computation = async {
        System.Threading.Interlocked.Increment(counter) |> ignore
        let blockingWork = Async.Sleep(2000) 
        do! blockingWork 
        System.Threading.Interlocked.Increment(counter) |> ignore
    }
    do! computation
}

let doit() =
    use cts = new System.Threading.CancellationTokenSource(1000)
    let tryCancelled = Async.TryCancelled(work, fun _ -> printf "Cancelled")
    do Async.Start(tryCancelled, cts.Token) 
    System.Threading.Thread.Sleep(3000) //Simulate other work
    counter.contents // |> should equal 1

doit() 
