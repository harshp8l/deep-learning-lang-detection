open System
open System.Diagnostics
open System.Runtime.InteropServices

[<Literal>]
let MAGIC_NUMBER : int32 = 0x5f3759df 
[<Literal>]
let THREE_HALVES  = 1.5F
[<Literal>]
let HALF          = 0.5F

[<Literal>]
let OUTER         = 1000
[<Literal>]
let INNER         = 10000

let inline invSqr (x : float32) : float32 = 1.F / sqrt x

let fInvSqr (x : float32) : float32 =
  let x2 = x * 0.5f
  // Allocates two byte arrays creating GC pressure ==> hurts performance
  let i = MAGIC_NUMBER - (BitConverter.ToInt32(BitConverter.GetBytes(x), 0) >>> 1)
  let y = BitConverter.ToSingle(BitConverter.GetBytes(i), 0)
  y * (THREE_HALVES - (x2 * y * y))

// Susceptible to race conditions & endianess issues
[<StructLayout (LayoutKind.Explicit)>]
type Bits =
  struct
    [<FieldOffset(0)>]
    val mutable f: float32
    [<FieldOffset(0)>]
    val mutable i: int32
  end   

let mutable bits = Bits ()

let fInvSqr2 (x : float32) : float32 =
  let x2 = x * 0.5F
  bits.f <- x
  let i = MAGIC_NUMBER - (bits.i >>> 1)
  bits.i <- i
  let y = bits.f
  y * (THREE_HALVES - (x2 * y * y))


let timeIt n (a : unit -> 'T) : int64 * 'T = 
  let r = a ()

  let sw = Stopwatch ()

  sw.Start ()

  for i = 1 to n do
    ignore <| a ()

  sw.Stop ()

  sw.ElapsedMilliseconds, r

[<EntryPoint>]
let main argv = 

  let testCases =
    [|
      ""invSqr""    , fun () -> 
                      let mutable sum = 0.F
                      for x = 1 to INNER do 
                        sum <- sum + invSqr (float32 x)
                      sum
      ""fInvSqr""   , fun () ->
                      let mutable sum = 0.F
                      for x = 1 to INNER do 
                        sum <- sum + fInvSqr (float32 x)
                      sum
      ""fInvSqr2""  , fun () ->
                      let mutable sum = 0.F
                      for x = 1 to INNER do 
                        sum <- sum + fInvSqr2 (float32 x)
                      sum
    |]

  for name, action in testCases do
    printfn ""Running %s %d times..."" name (OUTER*INNER)
    let elapsed, result = timeIt OUTER action
    printfn ""... it took %d ms product result: %f"" elapsed result

  0
