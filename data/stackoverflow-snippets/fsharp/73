type UserContent = 
    { declined: Declined array option
      matches : Match array option
      searchSettings : SearchSettings option
      user_listings : ListingUser array option;
    }

type OptionConverter() =
    inherit JsonConverter()

    override __.CanConvert(t) = 
        t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<option<_>>

    override __.WriteJson(writer, value, serializer) =
        let value = 
            if value |> isNull 
            then null
            else let _,fields = FSharpValue.GetUnionFields(value, value.GetType())
                 fields.[0]  
        serializer.Serialize(writer, value)

    override __.ReadJson(reader, t, existingValue, serializer) =        
        let innerType = t.GetGenericArguments().[0]
        let innerType = 
            if innerType.IsValueType 
            then (typedefof<Nullable<_>>).MakeGenericType([|innerType|])
            else innerType        
        let value = serializer.Deserialize(reader, innerType)
        let cases = FSharpType.GetUnionCases(t)
        if value |> isNull 
        then FSharpValue.MakeUnion(cases.[0], [||])
        else FSharpValue.MakeUnion(cases.[1], [|value|]) 

let serializer = JsonSerializer.Create(JsonSerializerSettings(Converters = [| OptionConverter() |]))

use stringReader = new StringReader(html)
use jsonReader = new JsonTextReader(stringReader)
serializer.Deserialize<Types.UserContent>(jsonReader)
