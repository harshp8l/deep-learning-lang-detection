module Async = 
    // val map : f:('a -> 'b) -> x:Async<'a> -> Async<'b>
    let map f x = async.Bind(x, async.Return << f)

    // val apply : f:Async<('a -> 'b)> -> x:Async<'a> -> Async<'b>
    let apply f x = async.Bind(f, fun fe -> map fe x)

    // val inline ( <!> ) : f:('a -> 'b) -> x:Async<'a> -> Async<'b>
    let inline (<!>) f x = map f x

    // val inline ( <*> ) : f:Async<('a -> 'b)> -> x:Async<'a> -> Async<'b>
    let inline (<*>) f x = apply f x

    // val map4 : f:('a -> 'b -> 'c -> 'd -> 'e) -> x:Async<'a> -> y:Async<'b> -> z:Async<'c> -> a:Async<'d> -> Async<'e>
    let map4 f x y z a = f <!> x <*> y <*> z <*> a
