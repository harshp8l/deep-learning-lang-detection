open CsPerfs
open Nessos.Streams
open System.Diagnostics
open System.Linq
open System.Numerics


// now () returns current time in milliseconds since start
let now : unit -> int64 =
  let sw = Stopwatch ()
  sw.Start ()
  fun () -> sw.ElapsedMilliseconds

// time estimates the time 'action' repeated a number of times
let time repeat action =
  let inline cc i       = System.GC.CollectionCount i

  let v                 = action ()

  System.GC.Collect (2, System.GCCollectionMode.Forced, true)

  let bcc0, bcc1, bcc2  = cc 0, cc 1, cc 2
  let b                 = now ()

  for i in 1..repeat do
    action () |> ignore

  let e = now ()
  let ecc0, ecc1, ecc2  = cc 0, cc 1, cc 2

  v, (e - b), ecc0 - bcc0, ecc1 - bcc1, ecc2 - bcc2

[<EntryPoint>]
let main argv = 
  let count = 10000000

  let outers = 
    [|
      1000
    |]

  for outer in outers do
    let inner = count / outer

    let fsImperativeTest () = 
      let mutable sum = 0
      for n = 0 to inner-1 do
        sum <- sum + n % 2
      sum

    let fsLinqTest () = 
      Enumerable.Range(0, inner).Select(fun n -> n % 2).Sum()
    let fsNessosTest () = 
      Stream.initInfinite id
      |> Stream.take inner
      |> Stream.map (fun n -> n % 2)
      |> Stream.sum
    let fsOpTest () = 
      let remainder x = x % 2   
      let sumORemainders (input:seq<int>)  =
          let mutable sum = 0
          use en = input.GetEnumerator()
          while (en.MoveNext()) do 
              sum <- sum + remainder en.Current 
          sum
      let seqb = Seq.init inner id
      sumORemainders seqb
    let fsSseTest () = 
      let inc         = Vector<int>.One
      let one         = Vector<int>.One
      let mutable sum = Vector<int>.Zero
      let mutable n   = Vector<int> [|0..3|]
      for n4 = 0 to inner/4-1 do
        n <- n + inc
        sum <- sum + (n &&& one)
      sum.[0] + sum.[1] + sum.[2] + sum.[3]
    let fsSeqTest () = 
      Seq.init inner id 
        |> Seq.map (fun n -> n % 2)
        |> Seq.sum
    let fsSeqVariantTest () = 
      seq { for n = 0 to inner-1 do yield n }
        |> Seq.map (fun n -> n % 2)
        |> Seq.sum

    let csImperativeTest = 
      let f = Perfs.CsImperativeTest inner
      fun () -> f.Invoke ()
    let csLinqTest = 
      let f = Perfs.CsLinqTest inner
      fun () -> f.Invoke ()
    let csOpTest =
      let f = Perfs.CsOpTest inner
      fun () -> f.Invoke ()

    let tests =
      [|
        ""fsImperativeTest""  , fsImperativeTest
        ""fsLinqTest""        , fsLinqTest
        ""fsNessosTest""      , fsNessosTest
        ""fsOpTest""          , fsOpTest
        ""fsSeqTest""         , fsSeqTest
        ""fsSeqVariantTest""  , fsSeqVariantTest
        ""fsSseTest""         , fsSseTest
        ""csImperativeTest""  , csImperativeTest
        ""csLinqTest""        , csLinqTest
        ""csOpTest""          , csOpTest
      |]

    printfn ""Test run - total count: %d, outer: %d, inner: %d"" count outer inner

    for name, test in tests do
      printfn ""Running %s..."" name
      let v, ms, cc0, cc1, cc2 = time outer test
      printfn ""  it took %d ms - collection count is %d,%d,%d - result is %A"" ms cc0 cc1 cc2 v 


  0
