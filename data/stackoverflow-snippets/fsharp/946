let cross3 l1 l2 l3 =
    [
        for x in l1 do
            for y in l2 do
                for z in l3 do
                yield x, y, z ]

module Tuple3 =
    let distinct (x, y, z) =
        let l = [x; y; z]
        l |> List.distinct |> List.length = l.Length

    let snd (x, y, z) = snd x, snd y, snd z

    let inline sum (x, y, z) = x + y + z

let inline isAnyThreeGreaterThan limit (x1, x2, x3, x4, x5) =
    let l = [x1; x2; x3; x4; x5] |> List.indexed
    let legalCombinations =
        cross3 l l l
        |> List.filter Tuple3.distinct
        |> List.map Tuple3.snd
    legalCombinations |> List.exists (fun t3 -> Tuple3.sum t3 > limit)
