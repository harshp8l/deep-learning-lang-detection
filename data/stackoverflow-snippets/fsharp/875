type ItemType = 
    |Odd
    |Even

type Item (number) =
    member this.Number = number
    member this.Type = if (this.Number % 2) = 0 then Even else Odd

type NumTypeCollection = {Items : Map<ItemType, Item list>}

/// Functions on NumTypeCollection
module NumberTypeCollection =
    /// Create empty collection
    let empty = {Items = Map.empty}

    /// Append one item to the collection
    let append (item : Item) numTypeCollection =
        let key = item.Type
        match Map.containsKey key numTypeCollection.Items with
        |true ->
            let value = numTypeCollection.Items |> Map.find key
            let newItems = 
                numTypeCollection.Items
                |> Map.remove key 
                |> Map.add key (item :: value) // append item
            {Items = newItems }
        |false -> {Items = numTypeCollection.Items |> Map.add key [item]}

    /// Append a list of items to the collections
    let appendList (item : Item list) numTypeCollection =
        item |> List.fold (fun acc it -> append it acc) numTypeCollection
