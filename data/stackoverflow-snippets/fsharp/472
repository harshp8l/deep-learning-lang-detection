using NativeInteropEx;
using System.Numerics;
using System.Runtime.CompilerServices;

public struct VectorView<T> where T: struct
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector<T> Get(IntPtr p, int idx) {
        return p.Get<Vector<T>>(idx);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector<T> Get(IntPtr p, long idx) {
        return p.Get<Vector<T>>(idx);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(IntPtr p, int idx, Vector<T> value) {
        p.Set(idx, value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(IntPtr p, long idx, Vector<T> value) {
        p.Set(idx, value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector<T> Read(IntPtr p) {
        return p.Read<Vector<T>>();
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Write(IntPtr p, Vector<T> value) {
        p.Write(value);
    }
}
