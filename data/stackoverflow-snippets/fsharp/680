type Result<'T> = Success of 'T | Failure
type Parser<'T> = Parser of ('T -> Result<'T * 'T>)

module ListParser =
    let (.>>.) (Parser f1) (Parser f2) =
        Parser <| fun input ->
            match f1 input with
            | Failure -> Failure
            | Success(value1, rest1) ->
                match f2 rest1 with
                | Failure -> Failure
                | Success(value2, rest2) -> 
                    Success(value1 @ value2, rest2)

    let oneOrMore what =
        let rec aux gotOne acc = function
        | x::xs when what = x -> aux true (x::acc) xs
        | xss when gotOne -> Success(List.rev acc, xss)
        | _ -> Failure
        Parser <| aux false []

    let exactly what n =
        let rec aux i acc = function
        | xss when i = 0 -> Success(List.rev acc, xss)
        | x::xs when what = x -> aux (i - 1) (x::acc) xs
        | _ -> Failure
        Parser <| aux n []
