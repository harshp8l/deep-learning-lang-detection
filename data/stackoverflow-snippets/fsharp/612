open System.Diagnostics
open System.IO
open ExtCore

let fileName = "Test.txt"
let outFile = new StreamWriter(fileName)
for i in [1..20000*300] do
    outFile.WriteLine("a,1")
    outFile.WriteLine("a,2")
    outFile.WriteLine("a,111")
    outFile.WriteLine("bb,1")
    outFile.WriteLine("bb,-1")
    outFile.WriteLine("a,5")
    outFile.WriteLine("a,6")
    outFile.WriteLine("c,8")
outFile.Close()

printfn "Finished Writing to File"

let data = System.IO.File.ReadLines(fileName) 
            |> Seq.map (fun i -> let parts = i.Split(',')
                                 (parts.[0], parts.[1]))
printfn "Finished Reading File"

let s2 data = 
    [
        let mutable prevKey = None
        let mutable values = System.Collections.Generic.List<_>()
        let init key value = 
            prevKey <- Some key
            values.Clear()
            values.Add value
        for (key, value) in data do
            match prevKey with
            | None -> init key value
            | Some k when k = key -> values.Add value
            | Some k -> 
                yield (k, List.ofSeq values)
                init key value
        match prevKey with
        | Some key -> yield (key, List.ofSeq values)
        | _ -> ()
    ]

let groupByAdjacentElements aseq = 
    let alist = LazyList.ofSeq aseq
    let rec group alist groupAcc prevElement adjacentAcc =
        match alist with
        | Cons((b, c), tail) -> 
            if b = prevElement then
                group tail groupAcc prevElement (c::adjacentAcc)
            else
                group tail (LazyList.consDelayed (prevElement, List.rev adjacentAcc) (fun () -> groupAcc)) b [c]
        | Nil -> 
            match adjacentAcc with
            | [] -> groupAcc
            | _ -> LazyList.consDelayed (prevElement, List.rev adjacentAcc) (fun () -> groupAcc)


    group alist LazyList.empty (fst (alist.Head())) []

let groupByAdjacentElementsList aseq = 
    let alist = aseq |> Seq.toList
    let rec group a groupAcc prevElement adjacentAcc =
        match a with
        | [] -> match adjacentAcc with
                | [] -> groupAcc
                | _ -> (prevElement, List.rev adjacentAcc)::groupAcc
        | (b, c)::tail -> if b = prevElement then
                             group tail groupAcc prevElement (c::adjacentAcc)
                          else
                             group tail ((prevElement, List.rev adjacentAcc)::groupAcc) b [c]

    group alist [] (fst alist.Head) []
    |> List.rev

[<EntryPoint>]
let main argv =
    let stopwatch = new Stopwatch()
    stopwatch.Start()
    let b = s2 data
    printfn "The result is: %A" b
    stopwatch.Stop()
    printfn "It took %A ms." stopwatch.ElapsedMilliseconds
    System.GC.WaitForFullGCComplete() |> ignore
    stopwatch.Reset()
    stopwatch.Start()
    let b = groupByAdjacentElements data
    printfn "The result is: %A" b
    stopwatch.Stop()
    printfn "It took %A ms." stopwatch.ElapsedMilliseconds
    System.GC.WaitForFullGCComplete() |> ignore
    stopwatch.Reset()
    stopwatch.Start()
    let b = groupByAdjacentElementsList data
    printfn "The result is: %A" b
    stopwatch.Stop()
    printfn "It took %A ms." stopwatch.ElapsedMilliseconds
    0
