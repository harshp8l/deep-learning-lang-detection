type Variable = {
    name : string
    id : int
    datatype : System.Type
}

let variable = { name = "foo"; id = 0; datatype = typeof<System.Byte> }

let (|IsType|_|) (vartype: System.Type) (variable: Variable) =
    if variable.datatype = vartype then Some () else None

let ByteType = typeof<System.Byte> // why do I need these let-bindings
let DoubleType = typeof<System.Double> // ahead of the match construct ?

match variable with
| IsType ByteType -> printf "Byte"
| IsType DoubleType -> printf "Double"
| _ -> printf "Other type"
