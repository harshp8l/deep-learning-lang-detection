#r @""packages/Rx-Interfaces.2.2.5/lib/net45/System.Reactive.Interfaces.dll""
#r @""packages/Rx-PlatformServices.2.2.5/lib/net45/System.Reactive.PlatformServices.dll""
#r @""packages/Rx-Core.2.2.5/lib/net45/System.Reactive.Core.dll""
#r @""packages/Rx-Linq.2.2.5/lib/net45/System.Reactive.Linq.dll""
#r @""packages/FSharp.Control.Reactive.3.2.0/lib/net40/FSharp.Control.Reactive.dll""
#r @""packages/FSharp.Charting.0.90.12/lib/net40/FSharp.Charting.dll""
#r ""System.Windows.Forms.DataVisualization""

open System
open FSharp.Control.Reactive
open FSharp.Charting
open System.Reactive.Concurrency

let move points =
    Seq.initInfinite (fun i -> points |> List.map (fun (x, y) -> x + i, y + i))

// Slow down any sequence
let delay (duration : TimeSpan) xs = seq {
    for x in xs do
    duration.TotalMilliseconds |> int |> Async.Sleep |> Async.RunSynchronously
    yield x }

let obs =
    [(1, 0); (0, 1)]
    |> move
    |> delay (TimeSpan.FromSeconds 0.5)
    |> Observable.toObservable
    |> Observable.subscribeOn NewThreadScheduler.Default 

let lc = obs |> LiveChart.Point
lc.ShowChart()
