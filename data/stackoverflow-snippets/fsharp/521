// nuget FSharp.Management
#I ""packages/FSharp.Management/lib/net40""
// nuget System.Reactive
#I ""packages/System.Reactive.Core/lib/net46""
#I ""packages/System.Reactive.Linq/lib/net46""
#I ""packages/System.Reactive.Interfaces/lib/net45""

#r ""System.Management.dll""
#r ""FSharp.Management.WMI.dll""
#r ""System.Reactive.Core.dll""
#r ""System.Reactive.Interfaces.dll""
#r ""System.Reactive.Linq.dll""

open FSharp.Management
open System
open System.Reactive.Linq
open System.Runtime.InteropServices
open System.Text

[<DllImport(""shlwapi.dll"", CharSet = CharSet.Unicode)>]
extern int64 StrFormatKBSize(int64 qdw, [<MarshalAs(UnmanagedType.LPTStr)>] StringBuilder pszBuf, int cchBuf);

let bytesToString byteCount = 
    let sb = StringBuilder(32);
    StrFormatKBSize(byteCount, sb, sb.Capacity) |> ignore
    sb.ToString()

type Local = WmiProvider<""localhost"">
let memory = Local.GetDataContext().Win32_PerfFormattedData_PerfOS_Memory
let freeMem() =
    // I don't know the semantics of Win32_PerfFormattedData_PerfOS_Memory
    // you might want to adjust the following
    memory
    |> Seq.choose (fun d -> d.AvailableBytes |> Option.ofNullable)
    |> Seq.exactlyOne

let print m =
    printfn ""At %A: free %s"" DateTime.UtcNow (bytesToString(int64 m))

// Immediately start to produce values every 1 second (on thread pool)
Observable.Timer(TimeSpan.Zero, TimeSpan.FromSeconds 1.0)
|> Observable.map(fun _ -> freeMem())
// only propagate a value if it differs from the previous one
|> Observable.DistinctUntilChanged
|> Observable.subscribe print

// Causes a non-fatal error in VS Interactive, works in FSI
Console.ReadKey() |> ignore
