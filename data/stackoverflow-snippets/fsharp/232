open Microsoft.FSharp.Reflection

let caseLabel (x:'x) = 
    typeof<'x> |> fun typ ->
      if FSharpType.IsUnion(typ) 
          then FSharpValue.GetUnionFields(x, typ) ||> fun case _ -> Some(case.Name)
          else None

type Option<'t> with 
  static member toString x = 
    match caseLabel x with
    | Some(label) -> label
    | None        -> "None"  

sprintf "%s" <| (Some 1 |> Option.toString)  // returns "Some"
sprintf "%s" <| (None |> Option.toString)    // returns "None"
