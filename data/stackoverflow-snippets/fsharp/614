let s = [(""a"", 1); (""a"", 2); (""a"", 111); (""bb"", 1); (""bb"", -1); (""a"", 5); (""a"", 6)]
let s2 = 
    [
        let mutable prevKey = None
        let mutable values = System.Collections.Generic.List<_>()
        let init key value = 
            prevKey <- Some key
            values.Clear()
            values.Add value
        for (key, value) in s do
            match prevKey with
            | None -> init key value
            | Some k when k = key -> values.Add value
            | Some k -> 
                yield (k, List.ofSeq values)
                init key value
        match prevKey with
        | Some k -> yield (k, List.ofSeq values)
        | _ -> ()
    ]
