/// Returns a copy of 'a' which shares a common suffix with 'b'.
/// 'a' and 'b' must me of equal length.
let shareSuffixWith (a : 'a list) (b : 'a list) : 'a list =
    let discardLastNElements (n: int) (li : 'a list) = 
        List.take (li.Length - n) li
    let commonSuffix = 
        let zippedLists = List.zip a b
        let lastDifferentElemIndex = 
            List.tryFindIndexBack (fun (e1, e2) -> e1 <> e2) zippedLists
        match lastDifferentElemIndex with
        | None -> b
        | Some(index) -> List.skip (index+1) b
    let aPreffix = discardLastNElements commonSuffix.Length a
    aPreffix @ commonSuffix

/// Maps elements of a list using a mapping and shares 
/// common tail between input list and the result.
let mapAndShareSuffix (mapping :'T -> 'T) (li : 'T list) : 'T list = 
    let resultOfMap = List.map mapping li
    shareSuffixWith resultOfMap li
