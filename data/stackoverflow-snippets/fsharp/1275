module LagrangeInterpolation =

    let private ofLen n cs =
        let l = List.length cs
        if l < n
            then cs @ List.replicate (n-l) 0.0
            else cs

    type Polynom = 
        Poly of float list with
        override p.ToString () =
            match p with
            | Poly coefs -> 
                System.String.Join ("" + "", coefs |> List.mapi (fun i c -> sprintf ""%AX^%d"" c i))
        static member Const c = Poly [c]
        static member Zero = Polynom.Const 0.0
        static member One = Polynom.Const 1.0
        static member X = Poly [0.0; 1.0]
        static member (+) (Poly cs1, Poly cs2) =
            let m = max (List.length cs1) (List.length cs2)
            List.zip (ofLen m cs1) (ofLen m cs2)
            |> List.map (fun (a,b) -> a+b)
            |> Poly
        static member (-) (Poly cs1, Poly cs2) =
            let m = max (List.length cs1) (List.length cs2)
            List.zip (ofLen m cs1) (ofLen m cs2)
            |> List.map (fun (a,b) -> a-b)
            |> Poly
        static member (*) (f : float, Poly cs2) : Polynom =
            cs2
            |> List.map (fun c -> f * c)
            |> Poly
        static member private shift n (Poly cs) =
            List.replicate n 0.0 @ cs |> Poly
        static member (*) (Poly cs1, p2 : Polynom) : Polynom =
            cs1
            |> List.mapi (fun i c -> Polynom.shift i (c * p2))
            |> List.sum
        static member (/) (Poly cs1, f : float) : Polynom =
            cs1
            |> List.map (fun c -> c / f)
            |> Poly

    let getPolynom (points : (float * float)[]) =
        let indizes = [0..points.Length-1]
        let p j = 
            indizes
            |> List.map (fun k -> 
                if k <> j 
                then (Polynom.X - Polynom.Const (fst points.[k]))
                      / (fst points.[j] - fst points.[k]) 
                else Polynom.One)
            |> List.fold (*) Polynom.One
        indizes |> List.sumBy (fun j -> Polynom.Const (snd points.[j]) * p j)      
