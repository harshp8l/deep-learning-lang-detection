public class EnvironmentSpecificContainer : CompositionContainer
{
    private readonly string _targetEnvironment;

    public EnvironmentSpecificContainer(ComposablePartCatalog catalog, string targetEnvironment, params ExportProvider[] providers) : base(catalog, providers)
    {
        _targetEnvironment = targetEnvironment;
    }

    protected override IEnumerable<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition)
    {
        return base.GetExportsCore(definition, atomicComposition)?.Where(IsForEnvironmentOrEnvironmentNotSpecified);
    }

    private bool IsForEnvironmentOrEnvironmentNotSpecified(Export export)
    {
        EnvironmentSpecificAttribute attribute = export.Value.GetType().GetCustomAttribute<EnvironmentSpecificAttribute>() as EnvironmentSpecificAttribute;
        return attribute == null || string.Equals(attribute.TargetEnvironment, _targetEnvironment,
                   StringComparison.InvariantCultureIgnoreCase);
    }
}
