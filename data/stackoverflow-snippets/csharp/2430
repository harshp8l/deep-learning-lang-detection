public class IODBTLMNGWrapper: IEnumerable<int>
{
    private readonly IODBTLMNG wrapped;

    public IODBTLMNGWrapper(IODBTLMNG wrapped)
    {
        this.wrapped = wrapped ?? throw new ArgumentNullException(nameof(wrapped));
    }

    public int Length { get; } = 11;

    public int this[int index]
    {
        get
        {
            switch(index)
            {
                case 0: return wrapped.data0;
                case 1: return wrapped.data1;
                case 2: return wrapped.data2;
                case 3: return wrapped.data3;
                case 4: return wrapped.data4;
                case 5: return wrapped.data5;
                case 6: return wrapped.data6;
                case 7: return wrapped.data7;
                case 8: return wrapped.data8;
                case 9: return wrapped.data9;
                case 10: return wrapped.data10;
                default:
                    throw new ArgumentOutOfRangeException($""Bad index {index}"");
            }
        }
        set
        {
            switch (index)
            {
                case 0: wrapped.data0 = value; break;
                case 1: wrapped.data1 = value; break;
                case 2: wrapped.data2 = value; break;
                case 3: wrapped.data3 = value; break;
                case 4: wrapped.data4 = value; break;
                case 5: wrapped.data5 = value; break;
                case 6: wrapped.data6 = value; break;
                case 7: wrapped.data7 = value; break;
                case 8: wrapped.data8 = value; break;
                case 9: wrapped.data9 = value; break;
                case 10:wrapped.data10 = value; break;
                default:
                    throw new ArgumentOutOfRangeException($""Bad index {index}"");
            }
        }
    }

    public IEnumerator<int> GetEnumerator()
    {
        for (int i = 0; i <= 10; i++)
            yield return this[i];
    }

    IEnumerator IEnumerable.GetEnumerator()
        => GetEnumerator();
}
