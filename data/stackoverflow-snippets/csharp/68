    // arrange a list of bool predicates and corresponding handlers
    var policies = new KeyValuePair<Func<bool>, Action>[]
    {
        new KeyValuePair<Func<bool>, Action>(
            () => {return UpgradeManager.Instance.HasUpgrade("basicFunction") && !UpgradeManager.Instance.HasUpgrade("basicCounter");},
            () => {codeString = "protected void GainUnits(){ units += " + gains + ";}";}),
        new KeyValuePair<Func<bool>, Action>(
            () => {return UpgradeManager.Instance.HasUpgrade("basicCounter") && UpgradeManager.Instance.HasUpgrade("basicFunction");},
            () => {codeString = "private timer = 20; private void Update(){ if(timer > 0){GainUnits();}" + "protected void GainUnits(){ units += " + gains + ";}";}),
        new KeyValuePair<Func<bool>, Action>(
            () => {return UpgradeManager.Instance.HasUpgrade("basicCounter") && !UpgradeManager.Instance.HasUpgrade("basicFunction");},
            () => {codeString = "private timer = 20; private void Update(){ if(timer > 0){GainUnits();}" + "units += " + gains;}),
        new KeyValuePair<Func<bool>, Action>(
            () => {return true;}, // last one should be always true
            () => {codeString = "units += " + gains;}),
    };

    // now let iterate over the policies
    foreach(var policy in policies)
    {
        if (policy.Key()) // evaluate predicates one-by-one
        {
            policy.Value();
            break; // if predicated matched, do the action and break out of the loop
        }   
    }
