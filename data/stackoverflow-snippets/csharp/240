static class EnumerableExt {
    public static IEnumerable<TSource> TakeWhilePlusOne<TSource>(
        this IEnumerable<TSource> source
    ,   Func<TSource,bool> predicate
    ) {
        if (source == null) throw new ArgumentNullException(nameof(source));
        if (predicate == null) throw new ArgumentNullException(nameof(predicate));
        return TakeWhilePlusOneIterator<TSource>(source, predicate);
    }

    static IEnumerable<TSource> TakeWhilePlusOneIterator<TSource>(IEnumerable<TSource> source, Func<TSource, bool> predicate) {
        foreach (TSource element in source) {
            var stop = !predicate(element);
            yield return element;
            if (stop) {
                break;
            }
        }
    }
}
