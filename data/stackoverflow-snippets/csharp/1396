static class QueryableExtensions
{
    IQueryable<MyType> SelectAndSort<TSource, TResult>(this IQueryable<TSource source,
        Expression<Func<TSource, TResult>> selector, 
        Expression<Func<TSource, TKey>> sortKeySelector,
        System.ComponentModel.ListSortDirection sortDirection)
    {
        var selectBeforeOrdering = myRepository.el.Select(selector);
        // note: this is still an IQueryable, only the query has been made,
        // the database is not accessed yet!

        IQueryable<TResult> result = (sortDirection == ListSortDirectrion.Ascending) ?
            // sort in ascending order:
            selectBeforeOrdering.OrderBy(sortKeySelector) :
            // else: selec in descending order:
            selectBeforeOrdering.OrderByDescending(sortKeySelector);

        return result;
    }
}
