@model Order

@{
    // assume available options for Products are generated in controller or ViewModel
    IEnumerable<SelectListItem> availableProducts = Model.AvailableProducts ; 
    const string lineItemContainerId = "orderLineItemsContainer";
    const string lineItemTemplateId = "orderLineItem";
    const string addLineItemButtonId = "addOrderLineItem";
}

<div id="@lineItemContainerId">
    @* always show inputs for first order line item; 
       we will also use this as template for additional order lines *@
    <div id="@lineItemTemplateId">
        @* Note that the OrderLines collection must contain an empty OrderLine initially 
           for this Html helper syntax to work - initialize collection in ViewModel ctor *@
        @Html.DropDownListFor(m => m.OrderLines[0].CurrentProduct, availableProducts)
        @Html.TextBoxFor(m => m.OrderLines[0].Qty)
        @* Id will be set by Entity Framework when we create the OrderLine entity *@
    </div>
</div>

<button id="@addLineItemButtonId" type="button">Add line item</button>

<script type="text/javascript">
    $(document).ready(function() {

        var numberOfLineItems = 1;

        // clone and insert template if button is clicked
        $('#@addLineItemButtonId').on('click', function() {
            numberOfLineItems++; 

            // clone template and remove Id attribute from clone
            var newLineInputs = $('#@lineItemTemplateId').clone().removeAttr('id');

            // fix array indices in name attributes of cloned inputs
            // so model binder fills the OrderLines collection correctly
            newLineInputs.children().each(function() {
                 var existingName = $(this).prop('name');
                 // model binder expects zero based indices
                 var fixedName = existingName.replace('[0]', '[' + (numberOfLineItems - 1) + ']');
                 $(this).prop('name', fixedName)
            }); 

            // append cloned inputs to DOM
            $('#@lineItemContainerId').append(newLineInputs);
        });
    });
</script>
