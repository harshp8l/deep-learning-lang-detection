private static unsafe void ConvertImage(string fromPath, string toPath, Color source, Color targetColor, double threshold)
{
   var thresh = threshold * threshold;
   var target = targetColor.ToArgb();

   using (var bmp = new Bitmap(fromPath))
   {   
      // lock the array for direct access
      var data = bmp.LockBits(new Rectangle(0, 0, bmp.Width, bmp.Height), ImageLockMode.ReadWrite, PixelFormat.Format32bppPArgb);
      // Convert the source to rgb
      int sR = source.R, sG = source.G, sB = source.B;
      // store the max length so we don't have to recalculate it
      var length = (int*)data.Scan0 + bmp.Height * bmp.Width;

      for (var p = (int*)data.Scan0; p < length; p++)           
      {

         // get the rgb Distance
         var r = ((*p >> 16) & 255) - sR;
         var g = ((*p >> 8) & 255) - sG;
         var b = ((*p >> 0) & 255) - sB;

         // compare it against the threshold
         if (r * r + g * g + b * b > thresh)
            continue;
         // poke the target color in
         *p = target;
      }

      // unlock the bitmap
      bmp.UnlockBits(data);
      bmp.Save(toPath);
   }
}
