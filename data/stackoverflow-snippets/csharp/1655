db.servicestats.aggregate([{
    $match: {
        scenarioId: { $in: [ 0, 1 ] }
    }
}, {
    $sort: { // not sure if that stage even helps - try to run with and without
        'origin.code': 1,
        'destination.code': 1,
        serviceType: 1
    }
}, {
    $group: { // first group by scenarioId AND the other fields
        _id: {
            scenarioId: '$scenarioId',
            originCode: '$origin.code',
            destinationCode: '$destination.code',
            serviceType: '$serviceType'
        },
        avgMiles: { $max: '$currentOutput.avgMiles' } // no switches needed
    },
}, {
    $group: { // group by the other fields only so without scenarioId
        _id: {
            originCode: '$_id.originCode',
            destinationCode: '$_id.destinationCode',
            serviceType: '$_id.serviceType'
        },
        baseScenarioAvgMiles: {
            $max: {
                $cond: {
                    if: { $eq: [ '$_id.scenarioId', 1 ] },
                    then: '$avgMiles',
                    else: 0
                }
            }
        },
        compareScenarioAvgMiles: {
            $max: {
                $cond: {
                    if: { $eq: [ '$_id.scenarioId', 0 ] },
                    then: '$avgMiles',
                    else: 0
                }
            }
        }
    },
}, {
    $addFields: { // compute the difference
        diff: {
            $subtract :[ '$baseScenarioAvgMiles', '$compareScenarioAvgMiles']
        }
    }
}, {
    $match: {
        'avgMiles.diff': { $eq: 0.5 }
    }
}, {
    $limit:100
}], { allowDiskUse: true })
