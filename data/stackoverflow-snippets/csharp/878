void Main()
{
    string values = @"1
  14
    141
        141010
        141020
        141030
        141040
        141050
        141060
    142
        142010
        142020
    144
       1440
          144010
          144020
          144030
          144040
    145020
    145030
    145010
          ";

    int myValue;
    var myData = values.Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
        .Select(s => int.TryParse(s.Trim(), out myValue)?myValue:-1)
        .Where(n => n != -1);

    Func<int, IEnumerable<int>, int?> parent = (value, list) =>
    {
        while (value > 0)
        {
            value /= 10;
            if (list.Any(l => l == value))
            {
                return value;
            }
        }
        return null;
    };

    var nodes = myData
        .Select(d => new { d, parentNode = parent(d, myData) })
        .OrderBy(d => d.parentNode)
        .ThenBy(d => d.d);

    TreeView tv = new TreeView();
    foreach (var n in nodes)
    {
        var v = n.d.ToString();
        ((n.parentNode == null)
        ? tv.Nodes
        : tv.Nodes.Find("_" + n.parentNode.ToString(), true).First().Nodes)
        .Add("_" + v, v);
    }

    foreach (TreeNode node in tv.Nodes)
    {
        WriteNode(node, 0);
    }
}

private void WriteNode(TreeNode node, int level)
{
    Console.WriteLine("".PadLeft(level, '\t') + node.Text);
    foreach (TreeNode n in node.Nodes)
    {
        WriteNode(n, level + 1);
    }
}
