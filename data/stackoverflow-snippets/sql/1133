router.get('/', (req, res) => {
   new sql.ConnectionPool(config).connect().then(pool => {
     let sqlString = `
     SELECT dt.[dataID]
     FROM DataTable dt with (nolock)
     `
     return pool.request().query(sqlString);

   }).then(result => {
     console.log(result, result.rowsAffected[0], 'logging result')
     let rows = result.recordset

     let paginationHeader = {
        totalCount: result.rowsAffected[0],
        pageSize: req.query.pageSize,
        currentPage: req.query.pageNumber
     }
     res.setHeader('X-Pagination', JSON.stringify(paginationHeader))
     res.setHeader('Access-Control-Allow-Origin', '*')
     res.setHeader('Access-Control-Expose-Headers', 'X-Pagination', JSON.stringify(paginationHeader))
     sql.close();

     /* BEGIN - added code from your second proc */
     return new sql.ConnectionPool(config).connect()
  }).then(pool => {
     let sqlString = `
     SELECT dt.[dataID]
     FROM DataTable dt with (nolock)
     ORDER BY c.Description OFFSET @pageNumber ROWS FETCH NEXT @size ROWS ONLY 
     `

     return pool.request().input('size', sql.Int, req.query.pageSize).input('pageNumber', sql.Int, req.query.pageNumber).query(sqlString)
  }).then(result => {
     console.log(result, result.rowsAffected[0], 'logging result')
     let rows = result.recordset

     sql.close();
     res.status(200).json(rows);
  }).catch(err => {
     console.log(".catch ERROR: ", err);
     sql.close();
     res.status(500).send({ message: err})
  });
});
