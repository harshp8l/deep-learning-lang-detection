declare @SQL_toExecute nvarchar(max) = ''
declare @Status nvarchar(100) = ''
declare @activitycount bigint = 0
declare @activityend datetime2(7)

delacre @milestoneid... etc

declare milestone_cursor cursor local static forward_only read_only
for
SELECT
  milestone.id,
  milestone.initiative_id,
  milestone.created,
  milestone.modified,
--  status.name as "statusName",
-- (COUNT(activity.id))::int as "activityCount",
--  MAX(activity.end_on) AS "activityMaxEndOn",
  milestone.name,
  milestone.description,
  activity.status
FROM
  milestone
/* INNER JOIN
  status
ON
  status.id = milestone.status
LEFT JOIN
  activity
ON
  activity.milestone_id = milestone.id
GROUP BY
  milestone.id, status.name, activity.status */

open milestone_cursor

fetch next from milestone_cursor
 into @milestoneid..etc

while @@fetchstatus = 0
begin

select @Status = status
from status where ... milestoneId?

select @activitycount = count(1)
from table where... milestoneid?


select @activityend = max(date)
from table where... milestoneid?


set @SQL_to_Execute 
= @SQL_To_Execute 
+'SELECT '
+ convert(nvarchar(100), @milestoneid) + ' as Milestone'
+ ',' + convert(nvarchar(100), @status) + ' as status'
+ ',' + convert(nvarchar(100), @activityend ) + ' as activity end'
-- continue for all columns.

+ ' Union all '


fetch next from milestone_cursor
 into @milestoneid..etc
end


close milestone_cursor
deallocate milestone_cursor

-- in the end you will have an extra ' union all '

set @sql_to_execute = left(@sql_to_execute, len(@sql_to_execute)-len(' union all '))

exec sp_msexecutesql @SQL_to_execute
