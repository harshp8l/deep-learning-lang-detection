use AdventureWorks2014
go

declare 
    @BaseTable nvarchar(128) = 'SalesPerson',
    @BaseTableSchema nvarchar(128) = 'Sales'

declare
    @Depth int = 0,
    @RowCount int,
    @Ident int

declare @KeyHierarchy table
(
    Depth int,
    ReferencingTableSchema nvarchar(128),
    ReferencingTableName nvarchar(128),
    ReferencingObjectId int,
    ReferencingTableNameFull as quotename(ReferencingTableSchema) + '.' + quotename(ReferencingTableName),
    ReferencedTableSchema nvarchar(128),
    ReferencedTableName nvarchar(128),
    ReferencedObjectId int,
    ReferencedTableNameFull as quotename(ReferencedTableSchema) + '.' + quotename(ReferencedTableName),
    MatchingColumns nvarchar(max)

    primary key clustered (ReferencingTableSchema, ReferencingTableName)
)

insert into @KeyHierarchy
(
    Depth,
    ReferencingTableSchema,
    ReferencingTableName,
    ReferencingObjectId
)
select
    Depth = @Depth,
    ReferencingTableSchema = @BaseTableSchema,
    ReferencingTableName = @BaseTable,
    ReferencingObjectId = object_id(@BaseTableSchema + '.' + @BaseTable)

select @RowCount = 1

while @RowCount > 0
begin

    insert into @KeyHierarchy
    (
        Depth,
        ReferencedTableSchema,
        ReferencedTableName,
        ReferencedObjectId,
        ReferencingTableSchema,
        ReferencingTableName,
        ReferencingObjectId,
    MatchingColumns
    )
    select distinct
        Depth = @Depth + 1,
        ReferencedTableSchema = object_schema_name(f.referenced_object_id),
        ReferencedTableName = object_name(f.referenced_object_id),
        ReferencedObjectId = f.referenced_object_id,
        ReferencingTableSchema = object_schema_name(f.parent_object_id),
        ReferencingTableName = object_name(f.parent_object_id),
        ReferencingObjectId = f.parent_object_id,
        MatchingColumns = stuff
            (
                (
                    select 
                        concat
                        (
                            ' and parent.', 
                            quotename(col_name(c.parent_object_id, c.parent_column_id)), 
                            ' = ',
                            'referenced.',
                            quotename(col_name(c.referenced_object_id, c.referenced_column_id))
                        )
                    from sys.foreign_key_columns c
                    where f.object_id = c.constraint_object_id
                    order by c.constraint_column_id
                    for xml path(''), type
                ).value('.', 'nvarchar(max)'), 1, 4, ''
            )
    from @KeyHierarchy k
    inner join sys.foreign_keys f
        on f.referenced_object_id = k.ReferencingObjectId
            and f.parent_object_id not in (select ReferencingObjectId from @KeyHierarchy where Depth < @Depth + 1)
    where k.Depth = @Depth

    select
        @RowCount = @@RowCount,
        @Depth += 1

end

select 
    BaseTable = @BaseTable,
    ReferencingTableNameFull,
    ReferencedTableNameFull,
    MatchingColumns,
    Depth
from @KeyHierarchy
order by Depth, ReferencingTableNameFull
