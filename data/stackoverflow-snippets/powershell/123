# Define custom user function to set the values to be used for updating
function EvaluateColumnData()
{
    param( $data )

    if($data -le 5){ return ""NULL"" }
    else { return $data }
}

# Get data from SQL
function GetSQLData()
{
    param( $tgtServ,$tgtDB,$tgtTSQL )
    # Create connection obj
    $SqlConnection                  = New-Object System.Data.SqlClient.SqlConnection
    $SqlConnection.ConnectionString = ""server=""+$tgtServ+"";database=""+$tgtDB+"";trusted_connection=true;""

    # Open SQL connection
    $SqlConnection.open()

    # Create TSQL CMD object and pass the connection object
    $SQLCommand                     = New-Object System.Data.SQLClient.SQLCommand
    $SQLCommand.Connection          = $SqlConnection

    # TSQL statement to be executed
    $SQLCommand.CommandText         = $tgtTSQL
    $SQLCommand.CommandTimeOut      = 0

    # Container/adapter for SQL result
    $resultAdapter = New-Object System.Data.SqlClient.SqlDataAdapter($SQLCommand)

    # DataSet where the results are dumped
    $resultDS      = New-Object System.Data.DataSet
    $resultAdapter.Fill($resultDS) | Out-Null
    $SqlConnection.Close()

    return ,$resultDS
}

# Execute TSQL statement without results
function UpdateSQL()
{
    Param( $tgtServ,$tgtDB,$tgtTSQL )
    $ServerConn                  = New-Object System.Data.SQLClient.SQLConnection                               
    $ServerConn.ConnectionString = ""server=""+$tgtServ+"";database=""+$tgtDB+"";trusted_connection=true;""
    $ServerConn.Open()                               
    $ServerCMD                   = New-Object System.Data.SQLClient.SQLCommand
    $ServerCMD.Connection        = $ServerConn
    $ServerCMD.CommandText       = $tgtTSQL
    $ServerCMD.CommandTimeOut    = 0
    $ServerCMD.ExecuteNonQuery() | out-null
    $ServerConn.Close() 
}
