#Requires -Version 3

$Collection = ForEach ($VM in (Get-VM))
{
    $Out = Select-Object -InputObject $VM -Property @(
        @{ N = 'VM'
           E = {$PSItem.Name}
         },
        @{ N = 'Host'
           E = {$PSItem.VMHost.Name}
         },
        @{ N = 'OS'
           E = {$PSItem.Guest.OSFullName}
         },
        @{ N = 'Tools'
           E = {$PSItem.ExtensionData.Guest.ToolsRunningStatus}
         },
        @{ N = 'NicType'
           E = {(Get-NetworkAdapter -Vm $PSItem).Type -join ','}
         },
        @{ N = 'VLAN'
           E = {(Get-NetworkAdapter -Vm $PSItem).NetworkName -join ','}
         },
        @{ N = 'IP'
           E = {($PSItem.Guest.IPAddress | Where-Object { ($PSItem -split '.').Count -eq 4}) -join ','}
         },
        @{ N = 'Gateway'
           E = {($PSItem.ExtensionData.Guest.IpStack.IpRouteConfig.IpRoute | Where-Object { $PSItem.Gateway.IpAddress }) -join ','}
         },
        @{ N = 'Subnet Mask'
           E={
                $dec = [Convert]::ToUInt32($(('1' * $PSItem.ExtensionData.Guest.Net.IpConfig.IpAddress[0].PrefixLength).PadRight(32, '0')), 2)
                $DottedIP = $( For ($i = 3; $i -gt -1; $i--) {
                        $Remainder = $dec % [Math]::Pow(256, $i)
                        (                        $dec - $Remainder) / [Math]::Pow(256, $i)
                        $dec = $Remainder
                    } )
                [String]::Join('.', $DottedIP) 
            }
         },
        @{ N = 'DNS'
           E = {$PSItem.ExtensionData.Guest.IpStack.DnsConfig.IpAddress -join ','}
         },
        @{ N = 'MAC'
           E = {$PSItem.MacAddress -join ','}
         }
    )

    $Out | Export-Csv -Path $Path -NoTypeInformation -Append -Force -Encoding 'UTF8'
    $Out
}
