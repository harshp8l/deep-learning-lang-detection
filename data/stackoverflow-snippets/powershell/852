$collectionurl = "http://serverURL/tfs"
$projectName= "ProjectNname"
$BuildDefinitionId = "74"    
$baseUrl = "$collectionurl/$projectName/_apis/build/builds?api-version=2.0&definitions=$BuildDefinitionId&statusFilter=completed&resultFilter=succeeded"    # Set the filter based on your requirements.        
$builds = (Invoke-RestMethod -Uri $baseUrl -Method Get -UseDefaultCredential).value|where({$_.quality -in 'Released', 'Rejected','Trial'})  # filter the builds which have quality elements.

    $BuildResults = @()

    foreach($build in $builds){

        $customObject = new-object PSObject -property @{
              "BuildDefinition" = $build.definition.name
              "BuildId" = $build.id
              "BuildNumber" = $build.buildNumber
              "status" = $build.status
              "result" = $build.result
              "BuildQuality" = $build.quality
              "finishTime" = $build.finishTime
              "sourceBranch" = $build.sourceBranch
            } 

        $BuildResults += $customObject      
    }

    $BuildResults | Select `
                    BuildDefinition,
                    BuildId, 
                    BuildNumber, 
                    status,
                    result,
                    BuildQuality,
                    finishTime,
                    sourceBranch #|export-csv -Path E:\$projectName-Build.csv -NoTypeInformation
