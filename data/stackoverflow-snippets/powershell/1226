function Test-ParameterConflict {
    [CmdletBinding(DefaultParameterSetName = 'Dynamic')]
    [OutputType()]

    Param (
    )

    dynamicParam {
            # Create the dictionary 
            $runtimeParameterDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary

            # Set the dynamic parameter's name
            $parameterName = 'Role'

            # Create and set the parameter's attributes
            $parameterAttribute = New-Object System.Management.Automation.ParameterAttribute
            $parameterAttribute.Mandatory = $true
            $parameterAttribute.ValueFromPipeline = $true
            $parameterAttribute.ValueFromPipelineByPropertyName = $true
            $parameterAttribute.ParameterSetName = 'Dynamic'

            # Create the collection of attributes
            $attributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]

            # Add the attributes to the attributes collection
            $attributeCollection.Add($parameterAttribute)

            # Generate and set the ValidateSet 
            $validValues = @('Role1', 'Role2', 'Role3')
            $validateSetAttribute = New-Object System.Management.Automation.ValidateSetAttribute($validValues)

            # Add the ValidateSet to the attributes collection
            $attributeCollection.Add($validateSetAttribute)

            # Create and add the dynamic parameter to the dictionary
            $runtimeParameter = New-Object System.Management.Automation.RuntimeDefinedParameter($parameterName, [string[]], $attributeCollection)
            $runtimeParameterDictionary.Add($parameterName, $runtimeParameter)

            #===============================================================================
            # Copied from above, with different $parameterName and $validValues

            $parameterName = 'RolePattern'

            $parameterAttribute = New-Object System.Management.Automation.ParameterAttribute
            $parameterAttribute.Mandatory = $true
            $parameterAttribute.ValueFromPipeline = $true
            $parameterAttribute.ValueFromPipelineByPropertyName = $true
            $parameterAttribute.ParameterSetName = 'Pattern'
            $attributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]
            $attributeCollection.Add($parameterAttribute)

            $validValues = @('Role4', 'Role5', 'Role6')

            $validateSetAttribute = New-Object System.Management.Automation.ValidateSetAttribute($validValues)
            $attributeCollection.Add($validateSetAttribute)
            $runtimeParameter = New-Object System.Management.Automation.RuntimeDefinedParameter($parameterName, [string[]], $attributeCollection)
            $runtimeParameterDictionary.Add($parameterName, $runtimeParameter)
             #===============================================================================

            return $runtimeParameterDictionary
    }

    Process {
        ""ParameterSetName = $($PSCmdlet.ParameterSetName)""
        $PSCmdlet.MyInvocation.BoundParameters
    }
}
