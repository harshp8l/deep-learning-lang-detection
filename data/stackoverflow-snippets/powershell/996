#I always set the location at the start of a script in case I forget at the end of a previous script.
Set-Location C:\

#ActiveDirectory is the only necessary module for this script.
Import-Module ActiveDirectory

#While this is not 100% secure, I still feel it is better than leaving the credentials in plaintext within the code.
$keyfile = "\\[domain controller]\GPO Deployment Files\Scripts\AES.txt"
[byte[]] $key = ([byte array key])
$secure = Get-Content $keyfile | ConvertTo-SecureString -Key $key
$username = "[domain\admin]"
$cred = new-object -typename System.Management.Automation.PSCredential `
         -argumentlist $username, $secure

#Establishes the 90 day cutoff based off the current day.
$datecutoff = (Get-Date).AddDays(-90)

#As I wanted to go district-wide, I did not bother adding an OU based filter.
$computers = Get-ADComputer -Filter {LastLogonDate -lt $datecutoff} -Properties * | Sort LastLogonDate | Select DistinguishedName,Name,LastLogonDate

#This is a test CSV - I ran all code up until this line so I could verify the list with a quick visual skim.
$computers | Add-Content -Path "\\[domain controller]\DeletedADItems\test.csv"

#Stepping through the list
Foreach ($computer in $computers) {

#I know there are likely elegant ways to do this, but using the -replace option was the simplest solution I could come up with at the time.
    $computername = $computer.Name -replace '@{name=',''
    $computername = $computername -replace '}',''
    $computerDN = $computer.DistinguishedName -replace '@{DistinguishedName=',''
    $computerDN = $computerDN -replace '}',''
<# I discovered that LDIFDE doesn't always play nicely with PS drives and such, or at least it failed to do so in my case.
So I back up the files to my local drive and then I copy them to the domain controller path that I used with the test.csv file. #>
    $exportFile = "C:\DeletedADItems\$computername.ldf"

#Prior to deletion, export the object to the export file location.
    ldifde -d "$computerDN" -f "$exportFile"

#Finally, remove the item and mark confirm false so you don't have to confirm hundreds of deletions.
    Remove-ADComputer -Identity "$computerDN" -Confirm:$False

}
