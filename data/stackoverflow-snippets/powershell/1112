    $isodate = Get-Date -Format yyyymmmdd_hhmmss
$file = ""C:\temp\file.json""
#Declare Variables

$pathToJsonFile = ""$env:localappdata\Google\Chrome\User Data\Profile 1\Bookmarks""
#$JsonFilePath = ""D:\04. PowerShell\BookMarks\ChromeBookMarx.json""
#$OutputFilePath = ""D:\BookMarx.csv"" 

$data = Get-content $pathToJsonFile | out-string | ConvertFrom-Json

Write-Verbose -Message ""Starting $($MyInvocation.Mycommand)""


#A nested function to enumerate bookmark folders
Function Get-BookmarkFolder {
[cmdletbinding()]
Param(
[Parameter(Position=0,ValueFromPipeline=$True)]
$Node
)

Process 
{

 foreach ($child in $node.children) 
 {
   #get parent folder name
   $parent = $node.Name
   if ($child.type -eq 'Folder') 
   {
     Write-Verbose ""Processing $($child.Name)""
     Get-BookmarkFolder $child
   }
   else 
   {
        $hash= [ordered]@{
          Folder = $parent
          Name = $child.name
          URL = $child.url
          Added = [datetime]::FromFileTime(([double]$child.Date_Added)*10)
        }
      #write custom object
        New-Object -TypeName PSobject -Property $hash
  } #else url
 } #foreach
 } #process
} #end function

#create a new JSON file
$text | Set-Content $file -Force
$test1 = '{
  ""markers"":' | Add-Content $file

#these should be the top level ""folders""
$data.roots.bookmark_bar | Get-BookmarkFolder |ConvertTo-Json |Add-Content $file
$data.roots.other | Get-BookmarkFolder  |ConvertTo-Json |Add-Content $file
$data.roots.synced | Get-BookmarkFolder  |ConvertTo-Json |Add-Content $file

 '}' | Add-Content $file

Get-Content $file -Raw |
ConvertFrom-Json | select -ExpandProperty markers|
Export-CSV $env:USERPROFILE\desktop\ChromeBookMarx_$isodate.csv -NoTypeInformation
