[void] [System.Reflection.Assembly]::LoadWithPartialName(""System.Drawing"") 
[void] [System.Reflection.Assembly]::LoadWithPartialName(""System.Windows.Forms"") 

# Null out name value in case you need to call the script multiple times in the same PS session.
$name = $null

$box = {

$Form = New-Object System.Windows.Forms.Form 
$Form.Text = ""Hostname""
$Form.Size = New-Object System.Drawing.Size(270,150) 
$Form.StartPosition = ""CenterScreen""

$OKButton = New-Object System.Windows.Forms.Button
$OKButton.Location = New-Object System.Drawing.Size(165,75)
$OKButton.Size = New-Object System.Drawing.Size(75,23)
$OKButton.Text = ""OK""
$OKButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
$Form.AcceptButton = $OKButton
$Form.Controls.Add($OKButton)

$Label = New-Object System.Windows.Forms.Label
$Label.Location = New-Object System.Drawing.Size(10,15) 
$Label.Size = New-Object System.Drawing.Size(280,20) 
$Label.Text = ""Choose a name :""
$Form.Controls.Add($Label) 

$TextBox = New-Object System.Windows.Forms.TextBox 
$TextBox.Location = New-Object System.Drawing.Size(10,40) 
$TextBox.Size = New-Object System.Drawing.Size(230,20) 
$Form.Controls.Add($TextBox) 

$Form.Topmost = $True

$Form.Add_Shown({$TextBox.Select()})
$result = $Form.ShowDialog()

# Only return if the TextBox.Text is set to stop it from exiting immediately after rendering the form.
if ($TextBox.Text) {return $TextBox.Text}

}

# While the name variable is null, show the form again.
while (-not $name) {
    $name = & $box
}
