workflow ShutDownStartByTagasdf
{
        Param(
        [Parameter(Mandatory=$true)]
        [String]
        $TagName,
        [Parameter(Mandatory=$true)]
        [String]
        $TagValue,
        [Parameter(Mandatory=$true)]
        [Boolean]
        $Shutdown
        )

    $connectionName = ""AzureRunAsConnection"";

    try
    {
        # Get the connection ""AzureRunAsConnection ""
        $servicePrincipalConnection=Get-AutomationConnection -Name $connectionName        

        # ""Logging in to Azure...""
        $null = Add-AzureRmAccount `
            -ServicePrincipal `
            -TenantId $servicePrincipalConnection.TenantId `
            -ApplicationId $servicePrincipalConnection.ApplicationId `
            -CertificateThumbprint $servicePrincipalConnection.CertificateThumbprint
    }
    catch {

        if (!$servicePrincipalConnection)
        {
            $ErrorMessage = ""Connection $connectionName not found.""
            throw $ErrorMessage
        } else{
            Write-Error -Message $_.Exception
            throw $_.Exception
        }
    }

    $result_array = @()

    $vms = Find-AzureRmResource -TagName $TagName -TagValue $TagValue | where {$_.ResourceType -like ""Microsoft.Compute/virtualMachines""}

    Foreach -Parallel ($vm in $vms) {
        if($Shutdown){
            # Write-Output ""Stopping $($vm.Name)"";
            $StopRtn = Stop-AzureRmVm -Name $vm.Name -ResourceGroupName $vm.ResourceGroupName -Force;
            $objOut = New-Object -TypeName psobject -Property @{
                VM = $vm.Name
                Success = $StopRtn.IsSuccessStatusCode
            }
        }
        else {
            # Write-Output ""Starting $($vm.Name)""; 
            $StartRtn = Start-AzureRmVm -Name $vm.Name -ResourceGroupName $vm.ResourceGroupName;
            $objOut = New-Object -TypeName psobject -Property @{
                VM = $vm.Name
                Success = $StartRtn.IsSuccessStatusCode
                }
        }

        $workflow:result_array += $objOut
    }

    $result_array | ConvertTo-Json
}
