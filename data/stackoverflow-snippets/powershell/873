$JSON = '{
  ""Envs"": {
    ""DEV"": {
      ""Services"": {
        ""TEST00000"": {
          ""Enabled"": true,
          ""Processed"": 2,
          ""Sent"": 3,
          ""Failed"": 4,
          ""Downloaded"": 5
        },
        ""FAKE"": {
          ""Enabled"": true
        }
      }
    }
  },
  ""Component"": {
    ""Digger"": {
      ""Envs"": {
        ""DEV"": {
          ""DownloadE"": 4
        }
      }
    }
  }
}'

$jsonobj = ConvertFrom-Json -inputObject $JSON
$enabledServices = $NULL
$disabledServices = $NULL

# Since the service names are arbitrary
# create an object that contains only
# objects whose MemberType is NoteProperty

$strServiceNames = @($($jsonobj.Envs.DEV.Services | Get-Member | Where { $_.MemberType -eq ""NoteProperty"" } | Select Name).Name)
$pscoServiceNames = [PSCustomObject]@{Names=$strServiceNames}
foreach($serviceName in $pscoserviceNames.Names)
{
    # dynamically access the service name
    # from $jsonobj.Envs.DEV.Services

    $serviceStatus = $jsonobj.Envs.DEV.Services.$serviceName.Enabled

    # parse results based on value of .Enabled

    if($serviceStatus.ToString() -eq ""True"")
    {
        $enabledServices = [Array]$enabledServices + [PSCustomObject]@{Name = $serviceName;Enabled = $serviceStatus}
    }
    else
    {
        $disabledServices = [Array]$disabledServices + [PSCustomObject]@{Name = $serviceName;Enabled = $serviceStatus}
    }
}

# Show the results

Write-Output ""`nEnabled Services`n""
$enabledServices | Format-List
Write-Output ""`nDisabled Services`n""
$disabledServices | Format-List
