# set working dir
$dir = 'C:\Downloads'
Write-Host 'working dir' $dir


# create function which is called when new file is created
function showPath($path){
  $label.Text = $path
}

# set up runspace for async FileSystemWatcher
$Runspace = [runspacefactory]::CreateRunspace()
$Runspace.Open()

# synchronized hashtable and hashtable elements
$sync = [Hashtable]::Synchronized(@{})
  $sync.path = 1  # random start value
  $sync.exit = 0  # switch: if set to 1 fileSystemWatcher will be unregistert when next event occurs
  $sync.dir = $dir

  $btnNewFile= New-Object System.Windows.Forms.Button
  $btnNewFile.Location = New-Object System.Drawing.Size(220,10)
  $btnNewFile.Size = New-Object System.Drawing.Size(150,23)
  $btnNewFile.Text = "do not click - fake button"
  $btnNewFile.Add_Click({
    $newPath = $sync.path
    $form.text = $newPath
    showPath($newPath)
  })

  $sync.btnNewFile = $btnNewFile

$Runspace.SessionStateProxy.SetVariable("sync", $sync)

$PowerShell = [System.Management.Automation.PowerShell]::Create()
$PowerShell.runspace = $Runspace

[void]$PowerShell.AddScript({
    $logFile = Join-Path $sync.dir test.log  
    $dirName = $sync.dir

    $hotFolder = New-Object IO.FileSystemWatcher $dirName -Property @{IncludeSubdirectories = $false;NotifyFilter = [IO.NotifyFilters]'FileName, LastWrite'}
    Register-ObjectEvent $hotFolder Created -SourceIdentifier FileCreated -Action {
          $path = $Event.SourceEventArgs.FullPath 
          $name = $Event.SourceEventArgs.Name
          $changeType = $Event.SourceEventArgs.ChangeType
          $timeStamp = $Event.TimeGenerated

          # check if exit condition is met
          if($sync.exit -eq 1){
            Out-File -FilePath $logFile -Append -InputObject "Exit file: '$name'"
            Unregister-Event FileCreated
          }
          else{
          Out-File -FilePath $logFile -Append -InputObject "The file '$name' was $changeType at $timeStamp"

          # set path to synchroniszed variable
          $sync.path = $path

          # click Button to trigger function call
          $sync.btnNewFile.PerformClick() 
          }

      }
})

$AsyncObject = $PowerShell.BeginInvoke()

# GUI setup
$labelHeader = New-Object System.Windows.Forms.Label
$labelHeader.Location = New-Object System.Drawing.Size(10,50)
$labelHeader.Size = New-Object System.Drawing.Size(100,23)
$labelHeader.Text = 'path to new file:'

$label = New-Object System.Windows.Forms.Label
$label.Location = New-Object System.Drawing.Size(110,50)
$label.Size = New-Object System.Drawing.Size(200,23)
$label.Text = 'no file created'


$global:fileCounter = 0
$btnCreateFile = New-Object System.Windows.Forms.Button
$btnCreateFile.Location = New-Object System.Drawing.Size(10,10)
$btnCreateFile.Size = New-Object System.Drawing.Size(100,23)
$btnCreateFile.Text = "New File"
$btnCreateFile.Add_Click({
  $global:fileCounter+=1
  $fileName = "$global:fileCounter.txt"
  $newFile = Join-Path $dir $fileName
  New-Item $newFile -ItemType file
})

$btnExit = New-Object System.Windows.Forms.Button
$btnExit.Location = New-Object System.Drawing.Size(110,10)
$btnExit.Size = New-Object System.Drawing.Size(100,23)
$btnExit.Text = "&Exit"
$btnExit.Add_Click({
  $sync.Exit = 1
  $btnCreateFile.PerformClick() 
  $Powershell.Dispose()
  $form.Close()
})

# set up form
$form = New-Object System.Windows.Forms.Form
$form.Width = 400
$form.Height = 120
$form.Controls.Add($btnCreateFile)
$form.Controls.Add($btnExit)
$form.Controls.Add($labelHeader)
$form.Controls.Add($label)
$form.Controls.Add($sync.btnNewFile)

$form.ShowDialog()
