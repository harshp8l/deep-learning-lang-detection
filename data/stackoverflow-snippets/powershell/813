      $src = @'
      using System;

      public static class Test {
        public static unsafe void MyMethod(...) {
           ...; // some logic
        }
      }
      '@

      # set of C# compilation parameters
      $lst = New-Object "Collections.Generic.List[Microsoft.CodeAnalysis.SyntaxTree]"
      $lst.Add([Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree]::ParseText($src))

      [Microsoft.CodeAnalysis.MetadataReference[]]$ref = @(
        [Microsoft.CodeAnalysis.MetadataReference]::CreateFromFile(
          [Object].Assembly.Location
        )
      )
      $opt = New-Object Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions(
        [Microsoft.CodeAnalysis.OutputKind]::DynamicallyLinkedLibrary
      )
      [Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions].GetProperty(
        'AllowUnsafe' # because we're using unsafe code
      ).SetValue($opt, $true)
      # let's rock!
      $cmp = [Microsoft.CodeAnalysis.CSharp.CSharpCompilation]::Create(
        [IO.Path]::GetRandomfileName(), $lst, $ref, $opt
      )

      try {
        $ms = New-Object IO.MemoryStream

        if (!($err = $cmp.Emit($ms)).Success) { throw $err }
        [void]$ms.Seek(0, [IO.SeekOrigin]::Begin)
        $asm = [Reflection.Assembly]::Load($ms.ToArray())
      }
      catch { $_ }
      finally {
        if ($ms) { $ms.Dispose() }
      }

      [Test]::MyMethod(...)
