Function Swap-Apples($objectA, $objectB, $indexToSwap) {
  $temp = $objectA[$indexToSwap].Apples;
  $objectA[$indexToSwap].Apples = $objectB[$indexToSwap].Apples;
  $objectB[$indexToSwap].Apples = $temp;
}

Function Swap-Oranges($objectA, $objectB, $indexToSwap) {
  $temp = $objectA[$indexToSwap].Oranges;
  $objectA[$indexToSwap].Oranges = $objectB[$indexToSwap].Oranges;
  $objectB[$indexToSwap].Oranges = $temp;
}

<# ArrayList! #>
Function Add-Fruit ([System.Collections.ArrayList]$object, [int]$howManyApples, [int]$howManyOranges) {
  $hAdd = @{
    Apples=$howManyApples
    Oranges=$howManyOranges
  }
  $hToAdd = New-Object -TypeName PSObject -Property $hAdd;
  <# We have to call the ArrayList Add method to add to our dynamic object #>
  $object.Add($hToAdd);
}

$a = New-Object -TypeName 'System.Collections.ArrayList';
$b = New-Object -TypeName 'System.Collections.ArrayList';
$a1 = @{
  Apples=3
  Oranges=2
}
$b1 = @{
  Apples=5
  Oranges=7
}
$a2 = @{
  Apples=6
  Oranges=3
}
$b2 = @{
  Apples=1
  Oranges=5
}
$aObject1 = New-Object -TypeName PSObject -Property $a1;
$bObject1 = New-Object -TypeName PSObject -Property $b1;
$aObject2 = New-Object -TypeName PSObject -Property $a2;
$bObject2 = New-Object -TypeName PSObject -Property $b2;
<# Here we call the ArrayList Add method #>
$a.Add($aObject1); $a.Add($aObject2);
$b.Add($bObject1); $b.Add($aObject2);

Write-Host "Values of A";
$a | Format-List

Write-Host "Values of B";
$b | Format-List

Write-Host "Now lets make a trade`!";
Swap-Apples $a $b 0
Swap-Oranges $a $b 1

Write-Host "Values of A";
$a | Format-List

Write-Host "Values of B";
$b | Format-List

Write-Host "Hey, I brought more fruit for A`!";
Add-Fruit -object $a -howManyApples 5 -howManyOranges 2

Write-Host "Values of A";
$a | Format-List

Write-Host "I brought more fruit for B too`!";
Add-Fruit -object $b -howManyApples 5 -howManyOranges 3

Write-Host "Values of B";
$b | Format-List
