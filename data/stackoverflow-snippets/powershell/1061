Function Out-ErrorLog {

    [CmdletBinding()]
    Param(
        [Parameter(ValueFromPipeline=$true)]
        [String]$Data,

        [String]$LogPath = '.\error.log',

        [String[]]$Errors  = @('Request Timed Out','Host Not Available')
    )
    Process {
        If (Test-Path $LogPath) { 
            Write-Verbose "Loading existing error log file from $LogPath.."
            $ErrorLog = Get-Content $LogPath | ConvertFrom-Json
        } Else {
            $ErrorLog = New-Object -TypeName PSObject 
        }

        ForEach ($Err in $Errors) { 
            $Matches = $Data | Select-String -SimpleMatch $Err -AllMatches

            If ($Matches) {
                If (-Not $ErrorLog.$Err) {
                    Write-Verbose "Creating $Err property.."
                    $ErrorLog | Add-Member -MemberType NoteProperty -Name $Err -Value $Matches.count
                } Else {
                    Write-Verbose "Adding to $Err count.."
                    $ErrorLog.$Err += $Matches.count 
                }
            }
        } 

        Write-Verbose "Outputting Errors to $LogPath.."
        $ErrorLog | ConvertTo-Json | Out-File $LogPath -Encoding UTF8
    }
}

$Server  = '1.2.3.4'

$Data = ping $Server
$Data >> $LogFile
$Data | Out-ErrorLog -Verbose

$Data = tracert $Server
$Data >> $LogFile
$Data | Out-ErrorLog -Verbose

$Data = nslookup $server
$Data >> $LogFile
$Data | Out-ErrorLog -Verbose
