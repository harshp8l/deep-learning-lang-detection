; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT    FILES!

#define PUBLISHER ""AtoZ Technology, Inc.""
#define PUBLISHER_URL ""http://www.xyzabc.com/""
#define PRODUCT_NAME ""test""



[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)

AppPublisher={#PUBLISHER}
AppPublisherURL={#PUBLISHER_URL}
AppCopyright=Copyright (C) 2013-2016 {#PUBLISHER}
AppName=test installer
AppId=TestInstaller
AppVerName=Test Installer
DefaultDirName={pf}\Test Install
DefaultGroupName=Test Install
Compression=lzma2
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
OutputBaseFilename=test_installer
OutputDir=""D:\Test""
LicenseFile=lics.txt
SetupLogging=yes
VersionInfoProductName=Test  ]

VersionInfoProductTextVersion= ""1.0""

[Files]
Source: ""checkHost.ps1""; DestDir: ""{app}""; Flags: ignoreversion

[Code]
function CheckHost(var ErrorMessage: string): Boolean;
var
Parameters: string;
TempPath: string;
AErrorMessage: AnsiString;
ResultCode: Integer;
begin                                                              
begin
TempPath := ExpandConstant('{tmp}\checkHost.err');
Parameters := '-noexit -ExecutionPolicy bypass -File     ""D:\Test\checkHost.ps1"" ' + '-errorFile ""' + TempPath + '""';
Result :=
Exec('powershell.exe', Parameters, ExpandConstant('{tmp}'), SW_SHOW,   ewWaitUntilTerminated, ResultCode) and
(ResultCode = 0);
if Result then
begin
if LoadStringFromFile(TempPath, AErrorMessage) then
begin
  ErrorMessage := AErrorMessage;
end;
end;
DeleteFile(TempPath);
end;

var
ModelPage: TInputOptionWizardPage;
models: Variant;
model_info: String;
i: Integer;
procedure InitializeWizard;
begin
ModelPage := CreateInputOptionPage(wpWelcome,
'Model Information', '',
'Please specify the model you would like to install, then click Next.',
 True, False);

 for i:= 0 to 2  do
 begin 
  model_info := 'model' + IntToStr(i);
  model_info := model_info + ' ( HDD ' + '10 GB';
  model_info := model_info + ' SSD ' + '2 GB' + ' )';
  ModelPage.Add(model_info);      
 end;

  ModelPage.SelectedValueIndex := 0;
  end;
  var

  model: String;
  ErrorMessage: string;

  function NextButtonClick(CurPageID: Integer): Boolean;
   begin

   Result := True;

   if CurPageID = ModelPage.ID then
    begin
     if CheckHost(ErrorMessage) <> true then
      begin
      MsgBox(ErrorMessage, mbError, MB_OK);
      end;              
    end;

    end;
