function fn_OutputColumns {
    param ( $columnCount, $outputData )

    $outputDataLength = @()
    $increase = [math]::Round($outputData.count / 2, [System.MidpointRounding]::AwayFromZero)

    if ( $outputData.Count % 2 -ne 0 ) { $oddColumn = 1 } else { $oddColumn = 0 }

    foreach ( $item in $outputData ) {
        $outputDataLength += $item.Length
    }

    for ( $i = 0; $i -lt $increase; $i++ ) {
        if ( $oddColumn -eq 1 ) {
            do {
                    Write-Host ( "" "" * 20 ) ""$($outputData[$i][1])"" ( "" "" * ( 20 - $($outputData[$i][1]).length ) ) ""   = $($outputData[$i][0])"" -nonewline
                    Write-Host ( "" "" * ( 24 - $($outputData[$i + $increase][0]).tostring().length ) ) $($outputData[$i + $increase][1]) ( "" "" * ( 15 - $($outputData[$i + $increase][1]).length ) ) ""   = $($outputData[$i][0])""         
                    $i++
            } while ( $i -ne $increase - 1 )
            Write-Host ( "" "" * 20 ) ""$($outputData[$i][1])"" ( "" "" * ( 20 - $($outputData[$i][1]).length ) ) ""   = $($outputData[$i][0])""
            $i++
        }
        else {
            Write-Host ( "" "" * 20 ) ""$($outputData[$i][1])"" ( "" "" * ( 20 - $($outputData[$i][1]).length ) ) ""   = $($outputData[$i][0])"" -nonewline
            Write-Host ( "" "" * ( 24 - $($outputData[$i + $increase][0]).tostring().length ) ) $($outputData[$i + $increase][1]) ( "" "" * ( 15 - $($outputData[$i + $increase][1]).length ) ) ""   = $($outputData[$i][0])""
        }
    }
}
