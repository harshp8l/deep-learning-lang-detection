$resourceGroup =""resourceGroup name""
$storageAccount = ""storage account Name""
$tableName = ""table name""
$storageAccountKey = ""storage key""
$ctx = New-AzureStorageContext -StorageAccountName $storageAccount -
StorageAccountKey $storageAccountKey 

######### Add removing table and create table code #######
try
{
    Write-Host ""Start to remove table $tableName, please wait a moment...""

    Remove-AzureStorageTable -Name $tableName -Context $ctx -Force # Remove the Azure table

    Start-Sleep -Seconds 60 # waiting for removing table, you could change it according to your table 

    Write-Host ""$tableName table has been removed""
}
catch
{
   Write-Host ""$tableName is not existing""
}
Write-Host ""Start to create $tableName table""

New-AzureStorageTable -Name  $tableName -Context $ctx  # Create new azure storage table

##########Add removing table and create table code ############

$table = Get-AzureStorageTable -Name $tableName -Context $ctx 
$csvPath ='csv file path'
$cols = ""Label_Usage,Label_Value,Usage_Location"" #should be corrensponding to your csv column exclude Partitionkey and RowKey
$csv = Import-Csv -Path $csvPath
$number = 0
[Microsoft.WindowsAzure.Storage.Table.TableBatchOperation]$batchOperation = New-Object -TypeName Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
foreach($line in $csv)
{ 
     $number++
     $entity = New-Object -TypeName Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity -ArgumentList $line.partitionkey, $line.rowKey 
     $colArray = $cols.split("","")
     Write-Host ""$($line.partitionkey), $($line.rowKey)"" #output partitionkey and rowKey value
     foreach($colName in $colArray)
     {
         Write-Host ""$colName,$($line.$colName)"" #output column name and value
        $entity.Properties.Add($colName,$line.$colName)
     }
    if($number -le 100)
    {
        $batchOperation.InsertOrReplace($entity) # Changed code
    }
    else
    {   $number =0
        $result = $table.CloudTable.ExecuteBatch($batchOperation)
   [Microsoft.WindowsAzure.Storage.Table.TableBatchOperation]$batchOperation = New-Object -TypeName Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
    }
}
if($batchOperation.Count -ne 0)
{
 $result = $table.CloudTable.ExecuteBatch($batchOperation)
}
