class AudioField(serializers.FileField):
    def to_internal_value(self, data):
        # Check to see if it's a base64 encoded file.
        if isinstance(data, basestring):
            # Strip out the data header if it exists.
            data = re.sub(r""^data\:.+base64\,(.+)$"", r""\1"", data)

            try:
                decoded = base64.b64decode(data)
                mime_type = magic.from_buffer(decoded, mime=True)
                file_ext = mimetypes.guess_extension(mime_type)

            except TypeError:
                raise serializers.ValidationError(_('Not a valid file'))

            file_name = ""{}{}"".format(uuid.uuid4(), file_ext)

            # Check if it's a valid file extension.
            if file_ext[1:] not in settings.VOICE_VALID_FILE_EXTENSIONS:
                raise serializers.ValidationError(_('Invalid file type.'))

            # Update the data dict with new values.
            data = ContentFile(decoded, name=file_name)

            return super(AudioField, self).to_internal_value(data)
