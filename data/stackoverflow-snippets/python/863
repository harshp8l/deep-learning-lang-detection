def find_best(choices):
    # make a set of valid output numbers
    valid_numbers = {sublist[0] for sublist in choices if len(sublist) == 1}

    # flatten the nested input list
    flat_list = (number for sublist in choices for number in sublist)

    # find the first number that's a valid output
    return next(number for number in flat_list if number in valid_numbers)

print(find_best([[], [2, 3], [1], [1], [3]]))  # 3
print(find_best([[5], [0, 8], [0, 8], [0, 8], [1]]))  # 5
print(find_best([[0, 1], [0, 3], [0], [0], [2]]))  # 0
print(find_best([[], [3, 6], [3, 5, 6], [6], [1]]))  # 6
