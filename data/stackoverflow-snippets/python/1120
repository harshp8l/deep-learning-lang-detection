import inspect, re


class AttrClass(object):
    def __init__(self, value=None):
        self.value = value

        stack = inspect.stack()     # get the stack
        goback = stack[2]           # go down the stack 2 step
        entry_point = goback[4]     # get the code context to get ""object name"" [4] is from stack format

        name = re.findall(""ObjClass\(.*value=([^)]*)\)"", entry_point[0])  # magic hack to get ""out_obj""
        if len(name) > 0:
            obj_name = name[0].split('.')[0]    # get the object's name.

            argvalues = inspect.getargvalues(goback.frame)[3]       # [3] to get `locals` from tuple returned.

            if obj_name in argvalues:
                setattr(self, 'host_class', argvalues[obj_name])    # iject the attribute

        else:   #Sorry can't find it
            setattr(self, 'host_class', None)


class ObjClass(object):
    def __init__(self, name, value=None):
        self.name = name
        self.foo = AttrClass(value=value)


out_obj = ObjClass('out', value='bar')
in_obj = ObjClass('in', value=out_obj.foo)

print(in_obj.foo.host_class.name)
