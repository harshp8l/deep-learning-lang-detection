#Binary Tree Node

class Node:

    def __init__(self,item):
        self.data = item
        self.left = None
        self.right = None

#Binary search tree
class binarySearchTree:
    def __init__(self):
        self.root = Node(None)

    def mirror(self,node):

        if node is None:
            return False
        elif self.root.data == node:
            self.root.left,self.root.right = self.root.right,self.root.left
            if self.root.left != None:
                self._mirror(self.root.left)
                if self.root.right != None:
                    self._mirror(self.root.right)
            else:
                return self.root

    def _mirror(self,node):
        if node is None:
            return False
        else:
            node.left,node.right = node.right,node.left
            if node.left != None:
                self._mirror(node.left)
                if node.right != None:
                    self._mirror(node.right)

            else:
                return node
    def inorder_traverse(self):
        if self.root != None:
            self._inorder(self.root)

    def _inorder(self,cur):
        if cur != None:
            if cur.left is not None:
                self._inorder(cur.left)

            print(cur.data)

            if cur.right != None:
                self._inorder(cur.right)
def main():
    bst = binarySearchTree()
    bst.insert(7)
    bst.insert(1)
    bst.insert(0)
    bst.insert(3)
    bst.insert(2)
    bst.insert(5)
    bst.insert(4)
    bst.insert(6)
    bst.insert(9)
    bst.insert(8)
    bst.insert(10)
    bst.insert(11)
    bst.inorder_traverse()
    bst.mirror(7)
    bst.inorder_traverse()
