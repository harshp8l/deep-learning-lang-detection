from tensorflow.models.research.object_detection.utils import label_map_util


width = image_np.shape[1]  # Number of columns
height = image_np.shape[0]  # number of rows
category_index = label_map_util.create_category_index(categories)
for i in range(len(output_dict['detection_boxes'])):
    class_name = category_index[output_dict['detection_classes'][i]]['name']
    print("{class: %s, prediction: %s, boundingbox: %s,%i,%i,%i,%i,%i,%i,%i}"
          % (class_name,
             output_dict['detection_scores'][i],
             image_path,
             width,
             height,
             output_dict['detection_classes'][i],
             int(width * output_dict['detection_boxes'][i][1]),  # The boxes are given normalized and in row/col order
             int(height * output_dict['detection_boxes'][i][0]),
             int(width * output_dict['detection_boxes'][i][3]),
             int(height * output_dict['detection_boxes'][i][2])
             ))
