def make_method(method_name):
    def _method(self, *args):
        # Insert what ever extra stuff you want to do here ...
        function_to_call = getattr(self.class_instance, method_name)
        function_to_call(*args)
    return _method

class a_class():
    def __init__(self, class_instance):
        self.class_instance = class_instance
        method_list = [func for func in dir(instance) if callable(getattr(class_instance, func))]
        for method_name in method_list:
            _method = make_method(method_name)
            setattr(type(self), method_name, _method)


module_class = a_class(a)
module_class.some_func()
