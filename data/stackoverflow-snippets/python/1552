# module scope
import argparse
from googleapiclient import discovery
from googleapiclient.http import build_http
from oauth2client import tools, file, client, _helpers
from oauth2client.tools import _CreateArgumentParser

_GO_TO_LINK_MESSAGE = """
Visit this link to get auth code

    {address}

"""

# argparser is an ArgumentParser that contains command-line options expected
# by tools.run(). Pass it in as part of the 'parents' argument to your own
# ArgumentParser.
argparser = _CreateArgumentParser()

_flow = None


# Methods
@_helpers.positional(3)
def run_flow(flow, flags=None):
    """
    Emulates the original method run_flow from oauth2client.tools getting the website to visit.

    The ``run()`` function is called from your application and runs
    through all the steps to obtain credentials. It takes a ``Flow``
    argument and attempts to open an authorization server page in the
    user's default web browser. The server asks the user to grant your
    application access to the user's data.  The user can then get an
    authentication code for inputing later

    :param flow: the google OAuth 2.0 Flow object with which the auth begun
    :param flags: the provided flags
    :return: the string with the website link where the user can authenticate and obtain a code
    """
    global _flow

    # I update the _flow object for using internally later
    _flow = flow

    # Really the flags aren't very used. In practice I copied the method as if noauth_local_webserver was provided
    if flags is None:
        flags = argparser.parse_args()
    logging.getLogger().setLevel(getattr(logging, flags.logging_level))

    oauth_callback = client.OOB_CALLBACK_URN
    _flow.redirect_uri = oauth_callback
    authorize_url = _flow.step1_get_authorize_url()

    return _GO_TO_LINK_MESSAGE.format(address=authorize_url)


def oauth_with(code, http=None):
    """
    If the code grants access,
    the function returns new credentials. The new credentials
    are also stored in the ``storage`` argument, which updates the file
    associated with the ``Storage`` object.

    :param code: the auth code
    :param http: the http transport object
    :return: the credentials if any
    """
    global _flow
    storage_file_path = get_credentials_path('blogger')
    storage = file.Storage(storage_file_path)
    try:
        # We now re-use the _flow stored earlier
        credential = _flow.step2_exchange(code, http=http)
    except client.FlowExchangeError as e:
        raise AlfredException(msg='Authentication has failed: {0}'.format(e))

    storage.put(credential)
    credential.set_store(storage)
    # We reset the flow
    _flow = None

    return credential
