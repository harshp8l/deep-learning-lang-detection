from math import sin
from kivy.garden.graph import Graph, MeshLinePlot

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.properties import NumericProperty


class RootWidget(BoxLayout):
    _touch_count = NumericProperty(0)

    def __init__(self, **kwargs):
        super(RootWidget, self).__init__(**kwargs)

        self.graph = Graph(xlabel='X', ylabel='Y', x_ticks_minor=5,
                           x_ticks_major=25, y_ticks_major=1,
                           y_grid_label=True, x_grid_label=True, padding=5,
                           x_grid=True, y_grid=True, xmin=-0, xmax=100, ymin=-1, ymax=1)

        plot = MeshLinePlot(color=[1, 0, 0, 1])
        plot.points = [(x, sin(x / 10.)) for x in range(0, 101)]
        self.graph.add_plot(plot)
        self.add_widget(self.graph)

    def on_touch_down(self, touch):
        """
        If the touch falls inside of our widget, we check button profile. If mouse button click, we set dist to 1 for
        left mouse button clicked else -1 for right mouse button clicked. If not mouse button click, we check for mouse
        wheel scrolling. If mouse is scrolling, we set dist to 1 if scrollup else -1 for scrolldown. If mouse button 
        clicked or mouse wheel scrolling, we return True, indicating that we have consumed the touch and don’t want it
        to propagate any further.

        Finally, if the touch falls outside our widget, not mouse button clicked (left / right button clicked), or not
        mouse wheel scrolling, we call the original event using super(…) and return the result. This allows the touch 
        event propagation to continue as it would normally have occurred.

        :param touch:
        :return:
