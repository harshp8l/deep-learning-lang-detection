import itertools
import numpy as np

n = 6
weeks = 8

def all_pairs(lst):
  if len(lst) < 2:
    yield lst
    return
  a = lst[0]
  for i in range(1,len(lst)):
    pair = (a,lst[i])
    for rest in all_pairs(lst[1:i]+lst[i+1:]):
      yield [pair] + rest

def recurse(so_far, rem_list, count):
  if len(so_far) == weeks: return [so_far]

  res = []
  for current in range(len(rem_list)):
    match = rem_list[current]
    new_count = count.copy()
    for pair in match:
      new_count[pair[0],pair[1]] += 1
      new_count[pair[1],pair[0]] += 1
    #set of pairs, whcih are not allowed any more
    forbidden = {(i,j) for i in range(n) for j in range(n) if new_count[i,j] == 2}
    #append current match, remove all now forbidden combinations
    res += recurse(so_far + [match], [entry for entry in rem_list[(current+1):] if set(entry) & forbidden == set([])], new_count)
  return res

l = list(all_pairs(list(range(n))))
foo = recurse([], l, np.zeros((n,n)))
