class Minifier{

    const MODE_CLOSED = 'closed';

    const MODE_OPEN = 'open';

    const MODE_IGNORE = 'ignore';

    protected $ignoreTags = [
        'script',
        'style'
    ];

    protected $tokens =  [
        'T_EOF'             => '\Z',
        'T_COMMENT'         => '<(?=!--).+(?<=--)>',
        'T_OPEN_TAG'        => '<(?!\/)[^>]+(?<!\/)>',
        'T_CLOSE_TAG'       => '<(?=\/)[^>]+(?<!\/)>',
        'T_INLINE_TAG'      => '<(?!\/)[^>]+(?<=\/)>',
        'T_ENCAPSED_STRING' => '(?P<Q>\'|").*?(?<!\\\\)\k<Q>',
        'T_STRING'          => '[-\w]+',
        'T_WHITESPACE'      => '\s+',
        'T_UNKNOWN'         => '.+?'
    ];

    public function __construct($addTags = [], $removeTags = []){
        $this->unsetTag($removeTags);
        $this->setTag($addTags);
    }

    public function issetTag($ignoreTags)
    {
        return in_array($ignoreTags,$this->ignoreTags);
    }

    public function setTag($ignoreTags)
    {
        if(empty($ignoreTags)) return;
        if(!is_array($ignoreTags)) $ignoreTags = [$ignoreTags];     
        $this->ignoreTags = array_unique(array_merge($this->ignoreTags, $ignoreTags));   
    }

    public function unsetTag($ignoreTags)
    {
        if(empty($ignoreTags)) return;
        if(!is_array($ignoreTags)) $ignoreTags = [$ignoreTags];
        $this->ignoreTags = array_diff($this->ignoreTags, $ignoreTags);
    }

    public function minify($html)
    {
        $token_stream = $this->lexTokens($html);
        return $this->parseTokens($token_stream);
    }

    public function lexTokens($html)
    {
        $types = array_keys($this->tokens);
        $patterns = [];
        $token_stream = [];
        $result = false;
        foreach ($this->tokens as $k=>$v){
            $patterns[] = "(?P<$k>$v)";
        }
        $pattern = "/".implode('|', $patterns)."/is";
        if (preg_match_all($pattern, $html, $matches, PREG_OFFSET_CAPTURE)) {
            foreach ($matches[0] as $key => $value) {
                $match = [];
                foreach ($types as $type) {
                    $match = $matches[$type][$key];
                    if (is_array($match) && $match[1] != -1) {
                        break;
                    }
                }
                $tok  = [
                    'content' => $match[0],
                    'type' => $type,
                    'offset' => $match[1]
                ];
                $token_stream[] = $tok;
            }
        }
        return $token_stream;
    }

    protected function parseTokens( array &$token_stream )
    {  
        $mode = 'closed';

        $string = '';
        $result = '';

        while($current = current($token_stream)){  
            $content = $current['content'];
            $type = $current['type'];

            next($token_stream);
            switch($type){  
                case 'T_COMMENT':
                break;
                case 'T_OPEN_TAG':
                    if(strlen($string)){
                        if($mode == 'ignore'){
                            $result .= $string;
                        }else{
                            $result .= trim($string);
                        }
                        $string = '';
                    }
                    $content = $this->cleanTag($content);

                    if($this->isIgnoredTag($content)){
                        $mode = 'ignore';
                    }else{
                        $mode = 'open';
                    }
                    $result .= $content;
                break;
                case 'T_INLINE_TAG':
                case 'T_CLOSE_TAG':  
                    if(strlen($string)){
                        if($mode == 'ignore'){
                            $result .= $string;
                        }else{
                            $result .= trim($string);
                        }
                        $string = '';
                    }
                    $content = $this->cleanTag($content);
                    $result .= $content;
                    $mode = 'closed';               
                break;  
                case 'T_ENCAPSED_STRING':
                case 'T_STRING':
                case 'T_UNKNOWN':
                    switch ($mode){
                        case 'ignore':
                        case 'open':
                        case 'closed':
                            $string .= $content;
                        break;
                        default:
                            print_r($result);
                            throw new Exception("Unknown Mode:$mode for $type value $content", 1002);
                    }   
                break;           
                case 'T_WHITESPACE':
                    switch ($mode){
                        case 'closed':
                        break;
                        case 'open':
                            $string .= ' ';
                        break;
                        case 'ignore':
                            $string .= $content;
                        break;
                        default:
                            print_r($result);
                            throw new Exception("Unknown Mode:$mode for $type value $content", 1002);
                    }   
                break;
                case 'T_EOF': return $result;
                default:
                    print_r($current);
                    print_r($result);
                    throw new Exception("Unknown token $type value $content", 1001);
            }
        }
    }

    protected function cleanTag($tag)
    {
        return preg_replace([
            '/\s{2,}/',            
            '/^<\s+/',
            '/^<\/\s+/',
            '/\s+>$/',
            '/\s\/>$/'
         ],[
            ' ',
            '<',
            '</',
            '>',
            '/>',
         ], $tag);
    }

    protected function isIgnoredTag($htmlTag)
    {
        if(!preg_match('/<\/?([a-z]+)\b/i', $htmlTag, $tagName))
            throw new Exception("Cound not parse HTML tag name $htmlTag", 1000);
       return in_array($tagName[1],$this->ignoreTags);
    }
}
