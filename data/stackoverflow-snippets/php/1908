class MyClass implements Countable, IteratorAggregate
{
    protected $data = [];

    public function __construct (array $data = []) 
    {
        foreach ($data as $key => $value) {
            $this->{$key} = $value;
        }
    }

    public function __set($key, $value){
        $this->data[$key] = $value;
    }

    public function __get($key)
    {
        if(!isset($this->{$key})) return null; //you could also throw an exception here.
        return $this->data[$key];
    }

    public function __isset($key){
        return isset($this->data[$key]);
    }

    public function __unset($key){
        unset($this->data[$key]);
    }

    public function __call($method, $args){

        $mode = substr($method, 0, 3);
        $property = strtolower(substr($method, 3)); //only lowercase properties
        if(isset($this->{$property})) {
            if($mode == 'set'){
                $this->{$property} = $args[0];
                return null;
            }else if($mode == 'get'){
                return $this->{$property};
            }
        }else{
            return null; //or throw an exception/remove this return
        }
        throw new Exception('Call to undefined method '.__CLASS__.'::'.$method);
    }

    //implement Countable
    public function count(){
        return count($this->data);
    }

    //implementIteratorAggregate
    public function getIterator() {
        return new ArrayIterator($this->data);
    }

}
