/**
 * usort callback to sort dimensions
 * @param {string} $a first comparable value
 * @param {string} $b second comparable value
 * @returns {int} 0, 1 or -1
 */
function sortByDimension($a, $b) {
    $dimA = getNumericDimensions($a);
    $dimB = getNumericDimensions($b);

    // first dimension is the same: compare deeper
    if ($dimA[0] == $dimB[0]) {
        // second dimension is the same too: compare deeper
        if ($dimA[1] == $dimB[1]) {
            if ($dimA[2] == $dimB[2]) {
                // value is the same: return 0
                return 0;
            }
            // value A is larger: return 1, value B is larger: return -1
            return ($dimA[2] > $dimB[2]) ? 1 : -1;
        }           
        return ($dimA[1] > $dimB[1]) ? 1 : -1;
    }
    return ($dimA[0] > $dimB[0]) ? 1 : -1;
}

/**
 * converts a string value to an array of numeric values
 * @param {string} $val string of dimensions AxBxC
 * @returns {array} an array with 3 dimensions and numeric values
 */
function getNumericDimensions($val) {
    // split the value into the 3 dimensions
    $dimensions = explode('x', $val);

    // loop through the values and make them numeric
    // note: the loop is per reference: we override the values!
    foreach ($dimensions as &$dim) {        
        // check if it is a fraction
        if (strpos($dim, '/') !== false) {
            // split the fraction by the /
            $fraction = explode('/', $dim);
            // calculate a numeric value
            $dim = $fraction[0] / $fraction[1];
        } else {
            // make it an integer
            $dim = (int)$dim;
        }
    }
    return $dimensions;
}

$values = array(
        "1/4x1/4x1", 
        "1/2x1/2x1", 
        "3/4x3/4x1", 
        "1/4x1/4x2", 
        "1/2x1/2x2", 
        "3/4x3/4x2", 
        "1x1x1", 
        "1x2x1", 
        "2x1x1",
    );

// sort the array (note: usort is per reference)
usort($values, 'sortByDimension');
print_r($values);
