<?php

namespace App\Security\User;

use App\Entity\User;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;

class CustomProvider implements UserProviderInterface
{
    private $repository;
    private $em;

    public function __construct(UserRepository $repository, EntityManagerInterface $em)
    {
        $this->repository = $repository;
        $this->em = $em;
    }

    public function loadUserByUsername($username)
    {
        $userData = $this->repository->findOneByEmail($username);
        $password = 'secure_p@ssw0rd';
        $user = new User($username, $password);

        if (!$userData) {
            $user = new User($username, $password);
            $this->em->persist($user);
            $this->em->flush();
        }
        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(
                sprintf('Instances of "%s" are not supported.', get_class($user))
            );
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class)
    {
        return User::class === $class;
    }
}
