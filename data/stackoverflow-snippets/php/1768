// 1. Adding to admin order list bulk dropdown a custom action 'custom_downloads'
add_filter( 'bulk_actions-edit-shop_order', 'downloads_bulk_actions_edit_product', 100, 1 );
function downloads_bulk_actions_edit_product( $actions ) {
    $reordered_actions = array( 'write_downloads' => __( 'Download orders', 'woocommerce' ) );
    foreach( $actions as $key => $action ){
        // Reinserting reordered actions
        $reordered_actions[$key] = $action;
    }
    ?>
    <script type=""text/javascript"">
    jQuery( function($){
        $('#bulk-action-selector-top').find('option').eq(0).remove(); // Remove defaut option
        $('#bulk-action-selector-top').val('write_downloads'); // To be sure select ""downloads""â€¦
    });
    </script>
    <?php
    return $reordered_actions;
}

// 2. Make the action from selected orders
add_filter( 'handle_bulk_actions-edit-shop_order', 'downloads_handle_bulk_action_edit_shop_order', 10, 3 );
function downloads_handle_bulk_action_edit_shop_order( $redirect_to, $action, $post_ids ) {
    global $attach_download_dir, $attach_download_file, $countries_list, $countries_obj;

    if ( $action !== 'write_downloads' ) return $redirect_to; // Exit

    $processed_ids = array();

    // Opens file
    $myfile = fopen($attach_download_dir . '/' . $attach_download_file, ""w"") or die(""Unable to open file!"");

    $date_initial = $_REQUEST['download_date_initial'];
    $date_final = $_REQUEST['download_date_final'];
    if ( isset($date_initial) && isset($date_final) ) $args_ = array( 'date_created' => $date_initial . '...' . $date_final );
    if ( isset($date_initial) && empty($date_final) ) $args_ = array( 'date_created' => '>=' . $date_initial );
    if ( empty($date_initial) && isset($date_final) ) $args_ = array( 'date_created' => '<=' . $date_final );
    if ( empty($date_initial) && empty($date_final) ) $args_ = [];

    if ( isset($post_ids) && empty($args_)) $array = $post_ids; else {
        $orders = wc_get_orders( $args_ );
        $array=[]; if (isset($orders)) foreach ($orders as $order) array_push($array, $order->get_id());
    }

    // Goes through each selected order   
    foreach ( $array as $key => $post_id ) {        
        $order = wc_get_order( $post_id );
        $order_data = $order->get_data();

        // Fills in woocommerce orders info as required ...
        fwrite($myfile, XXX);

        $processed_ids[] = $post_id;
    }
    // Closes file
    fclose($myfile);

    // Returns info to be used elsewhere, namely displaying message
    return $redirect_to = add_query_arg( array( 'write_downloads' => '1', 'processed_count' => count( $processed_ids ), ), $redirect_to );

}

// 3. Display a results notice from this bulk action on orders and trigger download to PC
add_action( 'admin_notices', 'downloads_bulk_action_admin_notice', 10 );
function downloads_bulk_action_admin_notice() {
    if ( empty( $_REQUEST['write_downloads'] ) ) return; // Exit

    $count = intval( $_REQUEST['processed_count'] );
    printf( '<div id=""message"" class=""updated fade""><p>' . _n( 'Processed %s order for downloads.', 'Processed %s orders for downloads.', $count, 'write_downloads' ) . '</p></div>', $count );

    // Execute the request to download file to  PC
    downloads_to_pc();
}

// 4. Simple function that request user to download file to his PC
function downloads_to_pc() {
    global $attach_download_dir, $attach_download_file, $root_page;

    // Saves in pc
    $file_url = $root_page . 'wp-admin/' . $attach_download_dir . '/' . $attach_download_file;
    header('Content-Description: File Transfer');
    header('Content-Type: text/plain');
    header('Content-Disposition: attachment; filename=' . basename($file_url)); 
    header('Expires: 0');
    header('Cache-Control: must-revalidate');
    header('Pragma: public');
    ob_clean();
    flush();
    readfile($file_url);
    exit;
}
