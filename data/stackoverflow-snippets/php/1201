/**
 * @Route("/role/assign/{username}/{role}", name="role_assignment")
 *
 * @param \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface $tokenStorage
 *
 * @return JsonResponse
 */
public function assign($username, $role, TokenStorageInterface $tokenStorage)
{
    // NOTES:
    //  1. Make sure you are using the same User class as the one configured in `security.yml`
    //  2. Keep in mind the $username MUST exist and MUST have the role you are setting,
    //     because the UserPasswordToken is reloaded from the session upon page refresh which triggers a check in the user provider and that will hit the database. In other words, if the user doesn't have `ROLE_ADMIN` you will most-likely get logged out or see "AccessDeniedException".
    //     For more information check \Symfony\Component\Security\Core\User\UserProviderInterface::refreshUser.
    $user = new \Symfony\Component\Security\Core\User\User($username, null, array($role), true);

    // Create token
    $firewall = 'main'; // This  MUST MATCH the name in your security.firewalls.->main<- or authentication WILL FAIL!
    $usernamePasswordToken = new UsernamePasswordToken($user, null, $firewall, $user->getRoles());

    // You don't need to save the token via $session->save().
    // You can directly use $tokenStorage, which will do that for you.
    $tokenStorage->setToken($usernamePasswordToken);

    // Pass authentication to client.
    return new JsonResponse(['success' => 'true', 'user' => $user]);
}
