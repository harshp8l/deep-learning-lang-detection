  public class MainActivity extends AppCompatActivity {

Button btn;
ImageView img;
final int KeyGallery = 100, ReadExternalRequestCode = 200;
String url = ""http://192.168.1.104/"";

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    btn = (Button) findViewById(R.id.btn_upload);
    img = (ImageView) findViewById(R.id.img);

    btn.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            boolean result = checkPermission(MainActivity.this);
            if (result)
                galleryIntent();
        }
    });

}

public void uploadImage(File file) {
    AsyncHttpClient myClient = new AsyncHttpClient();

    RequestParams params = new RequestParams();
    try {
        params.put(""file"", file);
    } catch (FileNotFoundException e) {
    }
    myClient.post(url + ""android/upload.php"", params, new AsyncHttpResponseHandler() {
        @Override
        public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
            try {
                JSONObject jsonObject = new JSONObject(new String(responseBody));
                if (jsonObject.getString(""status"").equals(""success"")) {
                    Picasso.with(getBaseContext())
                            .load(url + ""android/uploads/"" + jsonObject.getString(""filename""))
                            .into(img);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }

        }

        @Override
        public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
            Toast.makeText(getBaseContext(), new String(responseBody), Toast.LENGTH_LONG).show();
        }
    });
}

@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (resultCode == Activity.RESULT_OK) {
        if (data == null) {
            return;
        } else {
            Uri selectedImage = data.getData();
            if (selectedImage != null) {
                String[] filePathColumn = {MediaStore.Images.Media.DATA};
                if (!filePathColumn.equals(null)) {
                    Cursor cursor = getContentResolver().query(selectedImage,
                            filePathColumn, null, null, null);
                    cursor.moveToFirst();
                    int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                    String picturePath = cursor.getString(columnIndex);
                    cursor.close();
                    if (!picturePath.equals(null)) {
                        uploadImage(new File(picturePath));
                    }
                }
            }
        }
    }
}

private void galleryIntent() {
    Intent intent = new Intent();
    intent.setType(""image/*"");
    intent.setAction(Intent.ACTION_GET_CONTENT);
    startActivityForResult(Intent.createChooser(intent, ""Select File""), KeyGallery);
}

@Override
public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
    switch (requestCode) {
        case ReadExternalRequestCode:
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                galleryIntent();
            } else {
                Toast.makeText(getBaseContext(), ""permission problem!"", Toast.LENGTH_LONG).show();
            }
            break;
    }
}

public boolean checkPermission(final Context context) {
    int currentAPIVersion = Build.VERSION.SDK_INT;
    if (currentAPIVersion >= android.os.Build.VERSION_CODES.M) {
        if (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            if (ActivityCompat.shouldShowRequestPermissionRationale((Activity) context, Manifest.permission.READ_EXTERNAL_STORAGE)) {
                AlertDialog.Builder alertBuilder = new AlertDialog.Builder(context);
                alertBuilder.setCancelable(true);
                alertBuilder.setTitle(""Permission necessary"");
                alertBuilder.setMessage(""External storage permission is necessary"");
                alertBuilder.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
                    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
                    public void onClick(DialogInterface dialog, int which) {
                        ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, ReadExternalRequestCode);
                    }
                });
                AlertDialog alert = alertBuilder.create();
                alert.show();
            } else {
                ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, ReadExternalRequestCode);
            }
            return false;
        } else {
            return true;
        }
    } else {
        return true;
    }
}
}
