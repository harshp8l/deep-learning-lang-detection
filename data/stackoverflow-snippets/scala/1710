val implicitly = q"_root_.scala.Predef.implicitly"
val <:< = tq"_root_.scala.Predef.<:<"
val checks = parents.map { parent =>
  q"$implicitly[${<:<}[$fieldType, $parent]]"
}
// checks = Seq(q"implicitly[C <:< D1]", q"implicitly[C <:< D2]", ...)
val checker = q"trait ${TypeName(c.freshName())} { ..$tparams; ..$checks }"
// trait <syn> {
//   type B1
//   type B2 // Bring them into scope as abstract types (the forall part)
//   ..
//   implicitly[C <:< D1]
//   implicitly[C <:< D2] // Do checks against them, knowing only their constraints
//   ..
// }
c.typecheck(checker)
