val tokens = for {
  // tokenList are:
  // JArray(List(JObject(List(JField(word,JString(Some)), JField(lemma,JString(Some)))), JObject(List(JField(word,JString(text)), JField(lemma,JString(text))))))
  // JArray(List(JObject(List(JField(word,JString(and)), JField(lemma,JString(And)))), JObject(List(JField(word,JString(here)), JField(lemma,JString(here))))))
  tokenList <- (jsonObj \\ "tokens").children
  // subTokenList are:
  // List(JObject(List(JField(word,JString(Some)), JField(lemma,JString(Some)))), JObject(List(JField(word,JString(text)), JField(lemma,JString(text)))))
  // List(JObject(List(JField(word,JString(and)), JField(lemma,JString(And)))), JObject(List(JField(word,JString(here)), JField(lemma,JString(here)))))
  JArray(subTokenList) <- tokenList
  // liftToken are:
  // JObject(List(JField(word,JString(Some)), JField(lemma,JString(Some))))
  // JObject(List(JField(word,JString(text)), JField(lemma,JString(text))))
  // JObject(List(JField(word,JString(and)), JField(lemma,JString(And))))
  // JObject(List(JField(word,JString(here)), JField(lemma,JString(here))))
  liftToken <- subTokenList
  // token are:
  // Token(Some,Some)
  // Token(text,text)
  // Token(and,And)
  // Token(here,here)
  token = liftToken.extract[Token]

} yield token
