import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global

case class User(name: String, newToken: Option[String])

val u1 = User("david", Some("t1"))
val u2 = User("rachel", Some("t2"))

List(Some(u1), Some(u2), None).map{
  case Some(user) => Future{ user.copy(newToken = Some("ok")) }.map(Some(_))
  case _ => None
}
// res1: List[Object] = List(Future(<not completed>), Future(<not completed>), None)

List(Some(u1), Some(u2), None).map{
  case Some(user) => Future{ user.copy(newToken = Some("ok")) }.map(Some(_))
  case _ => Future.successful(None)
}
// res2: List[scala.concurrent.Future[Option[User]]] = List(
//   Future(<not completed>), Future(<not completed>), Future(Success(None))
// )
