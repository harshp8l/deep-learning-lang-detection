import java.io.{File, PrintWriter}
import scala.io.Source.fromFile

object Tes {

  //Model
  case class Person(div: String, person: String)

  def main(args: Array[String]): Unit = {

    val csv_path = "src/main/resources/config/person.csv"
    val filePath = "src/main/resources/config/result-person.csv"

    val process = pivot(csv_path)
    println(process)

    val result = saveFlattenToFile(process,filePath)

  }

  def pivot(path: String): List[Person] = {

    //Initial
    var result : List[Person] = Nil

    val source = fromFile(path)

    source.getLines().drop(1)
      .map(_.split(","))
      .foldLeft(Map.empty[String, Seq[String]])({
        case (map, Array(div, name)) =>
          map + (div -> (map.get(div) match {
            case None => Seq(name)
            case Some(seq) => seq :+ name
          }))
      })
      .foreach({ case (div, name) =>
        result = result ::: List(Person(div,name.mkString(",")))
        //println(channelName + "|" + channel.mkString(","))
      })

    source.close()
    //Output
    return result

  }

  def saveFlattenToFile(channels: List[Person], filePath: String): Boolean = {

    //Initial
    var result = false

    //Process
    if (channels.size > 0) {
      val writer = new PrintWriter(new File(filePath))
      writer.write("Div|Person\n")
      for (model <- channels) writer.write(model.div + "|" + model.person +  "\n")
      writer.close()
      result = true
    }

    //Output
    return result
  }

}
