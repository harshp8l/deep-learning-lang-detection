val client: WSClient = ??? // injected into the component
// component initialization, for example create one flow per API
val queue = 
  Source
  .queue[(Promise[_], WSClient => Future[_])](...) // keep this materialized value
  .throttle(...)
  .map { (promise, request) => 
    promise.completeWith(request(client))
  }
  .to(Sink.ignore)
  .run() // You have to get the materialized queue out of here!

def rateLimit[R](rateLimitClass: String)(request: WSClient => Future[R]): Future[R] = {
  val result = Promise.empty[R]
  // select which queue to use based on rateLimitClass
  if (rateLimitClass == ""API1"")
    queue.offer(result -> request)
  else ???
  result.future
}
