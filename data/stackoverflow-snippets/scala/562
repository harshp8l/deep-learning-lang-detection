def smoothArray(rawdata:Array[Double], window:Int):Array[Double] = {
  require(window % 2 == 1, ""The kernel should be symmetrical, only windows of uneven size allowed"")
  val leftBoundary = rawdata.head
  val rightBoundary = rawdata.last
  val truncatedHalfKernelWidth = window / 2 // must be integer division!
  val leftPadding = Array.fill(truncatedHalfKernelWidth)(leftBoundary)
  val rightPadding = Array.fill(truncatedHalfKernelWidth)(rightBoundary)
  val res = (leftPadding ++ rawdata ++ rightPadding).sliding(window).map(_.sum/window).toArray
  // restoring the boundary conditions
  res(0) = leftBoundary
  res(res.size - 1) = rightBoundary
  res
}
