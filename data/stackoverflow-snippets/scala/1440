  class Foo(val b:BigDecimal) {
    def +(f:Foo) = new Foo(b+f.b)
  }
  object Foo {
    implicit val numericFoo: Numeric[Foo] = new Numeric[Foo] {
      override def plus(x: Foo, y: Foo): Foo = new Foo(x.b + y.b)
      override def minus(x: Foo, y: Foo): Foo = new Foo(x.b - y.b)
      override def times(x: Foo, y: Foo): Foo = new Foo(x.b * y.b)
      override def negate(x: Foo): Foo = new Foo(-x.b)
      override def fromInt(x: Int): Foo = new Foo(x)
      override def toInt(x: Foo): Int = x.b.toInt
      override def toLong(x: Foo): Long = x.b.toLong
      override def toFloat(x: Foo): Float = x.b.toFloat
      override def toDouble(x: Foo): Double = x.b.toDouble
      override def compare(x: Foo, y: Foo): Int = x.b.compare(y.b)
    }
  }
