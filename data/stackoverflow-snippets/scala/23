/*
If the newValues is empty, get the runningCount. Else:
  If running count is present - sum the newValues and add runningCount
  else - sum the newValues
 */
def updateFunction(newValues: Seq[(Int)], runningCount: Option[(Int)]): Option[Int] = {
  newValues
    .reduceOption(_ + _)                // sum of values, or None
    .map(_ + runningCount.getOrElse(0)) // add runningCount or 0 to sum
    .orElse(runningCount)               // if newValues was empty, just return runningCount
}

println(updateFunction(Seq(), Some(3)))     // Some(3)
println(updateFunction(Seq(4, 5), Some(3))) // Some(12)
println(updateFunction(Seq(4, 5), None))    // Some(9)
println(updateFunction(Seq(), None))        // None
