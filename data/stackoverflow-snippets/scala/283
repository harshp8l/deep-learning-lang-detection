case class SimpleState(list: List[String] = Nil) {

  def addA = copy(list = ""4"" :: list)
  def addB = copy(list = ""5"" :: list)
  def addC = copy(list = ""6"" :: list)
  val bufferABC = List(""A"",""B"",""C"")
  // must iterate over collection
  // expect ""A"",""B"",""C"",""4"",""5"",""6"" in result state
  // ordering doesn't matter
  def addABC = ???

  def addABCfold = bufferABC.reverse.foldLeft(this){
    case (state,str) =>
      state.copy(list = str::state.list)
  }

  def addABCiter = copy(list = bufferABC ::: list)
}
val state = SimpleState()
println(state.addA.addB.addC.addABCfold)
println(state.addA.addB.addC.addABCiter)
