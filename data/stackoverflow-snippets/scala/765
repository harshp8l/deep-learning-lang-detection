trait ExtParsers extends JavaTokenParsers {
  def unordered[T,U](tp: Parser[T], tu: Parser[U]): Parser[$[T, U]] =
    tp ~ tu ^^ { case (x ~ y) => $(x, y) } | tu ~ tp ^^
      { case (x ~ y) => $(y, x) }

  case class $[+a, +b](_1: a, _2: b)

  implicit class ExtParser[+T](val parser: Parser[T]) {
    def $[U](tu: Parser[U]): Parser[$[T, U]] = unordered(parser, tu)
  }
}

object MyParser extends ExtParsers {
  def unord: Parser[String] =
    (ident $ stringLiteral $ wholeNumber $ floatingPointNumber) ^^ {
      case (id $ sl $ wn $ fpn) =>
      s""ident=$id string=$sl int=$wn float=$fpn""
    }
}
