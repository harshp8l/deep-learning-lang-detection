object TypeInfo extends Poly1 {
    implicit def stringCase[F <: Int] = typeInfo[F, String](""String"")
    implicit def intCase[F <: Int] = typeInfo[F, Int](""Int"")
    implicit def boolCase[F <: Int] = typeInfo[F, Boolean](""Boolean"")
    implicit def listIntCase[F <: Int] = typeInfo[F, List[Int]](""List[Int]"")
    implicit def listStringCase[F <: Int] = typeInfo[F, List[String]](""List[String]"")

    private def typeInfo[K <: Int, V](msg : String) =
      at[FieldType[K, V]] (_ => field[K](msg))
}
