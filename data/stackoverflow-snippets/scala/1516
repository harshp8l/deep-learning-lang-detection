val root: Future[HttpResponse] = Http().singleRequest(HttpRequest(uri = uri)
val members: Future[List[String]] = root.map(getMembers)
val results: Future[List[(id, Future[Result])]] = members.map(ids.map(id => (id, getResult(id))))
val x: Future[List[Future[(id, Result)]]] = results.map(pairs.map { case (id, result) => result.map(r => (id, r))})
val y: Future[List[(id, Result)]]] = x.flatMap(Future.sequence)

def getMembers(response: HttpResponse): List[String] = ???
def getResult(id: String): Future[Result] = ???
