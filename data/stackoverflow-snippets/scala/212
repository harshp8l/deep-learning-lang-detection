class anon$1$Animal extends Object {
  private[this] val range: Int = _;
  <stable> <accessor> def range(): Int = anon$1$Animal.this.range;
  private[this] val env: Array[Int] = _;
  <stable> <accessor> def env(): Array[Int] = anon$1$Animal.this.env;
  <synthetic> <paramaccessor> <artifact> protected val $outer: <$anon: Object> = _;
  <synthetic> <stable> <artifact> def $outer(): <$anon: Object> = anon$1$Animal.this.$outer;
  def <init>($outer: <$anon: Object>): <$anon: Object> = {
    if ($outer.eq(null))
      throw null
    else
      anon$1$Animal.this.$outer = $outer;
    anon$1$Animal.super.<init>();
    anon$1$Animal.this.range = 10;
    anon$1$Animal.this.env = new Array[Int](anon$1$Animal.this.range());
    ()
  }
};
class anon$1$Ant extends <$anon: Object> {
  private[this] val range: Int = _;
  override <stable> <accessor> def range(): Int = anon$1$Ant.this.range;
  <synthetic> <stable> <artifact> def $outer(): <$anon: Object> = anon$1$Ant.this.$outer;
  def <init>($outer: <$anon: Object>): <$anon: anon$1$Animal> = {
    anon$1$Ant.super.<init>($outer);
    anon$1$Ant.this.range = 2;
    ()
  }
}
