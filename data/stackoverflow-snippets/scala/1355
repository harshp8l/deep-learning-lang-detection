object UserInterface {

  // should be non-generic for simplicity of the rest of the code
  trait MenuAndStateNG {
    def runMenu(): MenuAndStateNG
  }

  trait MenuItem[S] {
    val name: String

    def doAction(state: S, curMenu: MenuAndStateNG): MenuAndStateNG
  }

  case class Menu[S](header: String, items: Seq[MenuItem[S]]) {}

  case class MenuAndState[S](menu: Menu[S], state: S) extends MenuAndStateNG {

    def runMenu(): MenuAndStateNG = {
      var inputNum: Int = -1
      var isFirstRun = true

      // we use 1-based indices in the menu
      while (inputNum <= 0 || inputNum > menu.items.length) {
        if (!isFirstRun) {
          println(""Your input was wrong. Try again"")
        }
        isFirstRun = false

        println(menu.header + "":"")
        println(menu.items.zipWithIndex.map({ case (item, index) => s""${index + 1} - ${item.name}"" }).mkString(""\n""))
        println(""Choose the operation you want to perform:"")

        inputNum = StdIn.readInt()
      }
      println()
      val nextMenu = menu.items(inputNum - 1).doAction(state, this)
      nextMenu
    }
  }


  // most of menu items doesn't change current menu
  // let's make it easier to implement
  trait SimpleMenuItem[S] extends MenuItem[S] {
    override def doAction(state: S, curMenu: MenuAndStateNG): MenuAndStateNG = {
      doSimpleAction(state)
      curMenu
    }

    def doSimpleAction(state: S): Unit
  }


  def start(): Unit = {
    var curMenu: MenuAndStateNG = MenuAndState(mainMenu, ())
    var isFirstRun = true
    while (true) {
      if (!isFirstRun) {
        println
      }
      isFirstRun = false
      curMenu = curMenu.runMenu()
    }
  }


  private val loginItem = new MenuItem[Unit] {
    override val name = ""Login""

    override def doAction(state: Unit, curMenu: MenuAndStateNG): MenuAndStateNG = {
      println(""Input you login, please:"")
      val inputLogin = StdIn.readLine()
      println(""Input you password, please:"")
      val inputPassword = StdIn.readLine()

      val checkLogin = Await.result(DAO.checkUserLogin(inputLogin, inputPassword), Duration.Inf).toString
      val userId = DAO.selectUserId(inputLogin)

      checkLogin match {
        case ""true"" =>
          println(""You have successfully entered"")
          MenuAndState(userMenu, userId)
        case ""false"" =>
          println(""Your input for login or password is wrong. Please, try again"")
          curMenu
        case _ =>
          println(""Your input is wrong"")
          curMenu
      }
    }
  }

  private val exitItem = new MenuItem[Unit] {
    override val name = ""Exit""

    override def doAction(state: Unit, curMenu: MenuAndStateNG): MenuAndStateNG = {
      System.exit(0)
      null // null is bad but it doesn't matter by now
    }
  }


  private val displayFinishedTasks = new SimpleMenuItem[Int] {
    override val name: String = ""Display finished tasks""

    override def doSimpleAction(state: Int): Unit = {
      println(""User's finished tasks:\n"" + Await.result(DAO.selectFinishedTasks(id), Duration.Inf).toList.toString)
    }
  }

  private val displayUnfinishedTasks = new SimpleMenuItem[Int] {
    override val name: String = ""Display unfinished tasks""

    override def doSimpleAction(state: Int): Unit = {
      println(""User's unfinished tasks:\n"" + Await.result(DAO.selectUnfinishedTasks(id), Duration.Inf).toList.toString)
    }
  }

  private val displayAllTasks = new SimpleMenuItem[Int] {
    override val name: String = ""Display all tasks""

    override def doSimpleAction(state: Int): Unit = {
      println(""User's tasks:\n"" + Await.result(DAO.selectTasksByUser(id), Duration.Inf).toList.toString)
    }
  }

  private val addTask = new SimpleMenuItem[Int] {
    override val name: String = ""Add task""

    override def doSimpleAction(state: Int): Unit = {
      println(""Input the task name you want to create, please:"")
      val taskName = readLine()
      Await.result(DAO.addTask(taskName, id), Duration.Inf)
    }
  }
  private val deleteTask = new SimpleMenuItem[Int] {
    override val name: String = ""Delete task""

    override def doSimpleAction(state: Int): Unit = {
      println(""Choose the task you want to delete, please:"")
      val taskId = readLong()
      Await.result(DAO.deleteTask(Some(taskId)), Duration.Inf)
    }
  }

  private val markTaskFinished = new SimpleMenuItem[Int] {
    override val name: String = ""Mark task as finished""

    override def doSimpleAction(state: Int): Unit = {
      println(""Choose the task you want to mark as finished, please:"")
      val taskId = readLong()
      Await.result(DAO.finishTask(Some(taskId), id), Duration.Inf)
    }
  }

  private val logoutTask = new MenuItem[Int] {
    override val name = ""Get back to the main menu""

    override def doAction(state: Int, curMenu: MenuAndStateNG): MenuAndState[Unit] = {
      MenuAndState(mainMenu, ())
    }
  }

  val mainMenu: Menu[Unit] = Menu(""Main menu"", List(loginItem, exitItem))

  val userMenu: Menu[Int] = Menu(""User menu"", List(
    displayAllTasks,
    displayFinishedTasks,
    displayUnfinishedTasks,
    addTask,
    deleteTask,
    markTaskFinished,
    logoutTask))

}
