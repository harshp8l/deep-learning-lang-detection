 def listenUserStatus(actorRef: ActorRef, message: SocketParsedMessage): Unit = {
    hashMapA2U.get(actorRef) match {
      case Some(user) => {
        (message.data \ "userId").validate[UUID] match {
          case s: JsSuccess[UUID] => {
            hashMapUserListeners.get(s.get) match {
              case Some(x) => {
        case Some(currentQueue) => {
               if(!currentQueue.contains(s.get)){
                  currentQueue += userId
               }
              }
              case None => hashMapUserListeners += (s.get -> new mutable.Queue[UUID]())
            }
          }
          case e: JsError => actorRef ! SocketParsedMessage(
            AllowedSocketMessageTypes.LISTEN_USER_STATUS, Json.obj(
              "success" -> false,
              "message" -> "UserId not provided with request"
            ))
        }
      }
      case None => {
        actorRef ! SocketParsedMessage(
          AllowedSocketMessageTypes.AUTHENTICATE, Json.obj(
            "success" -> false,
            "message" -> "User not authenticated"
          ))
      }
    }
  }
