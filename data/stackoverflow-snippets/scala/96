|-- List[CaseClassB] TYPEmode (site: value listOfB in ImplicitTest)
|    |    |    |    |    |-- scala.`package` EXPRmode-POLYmode-QUALmode (site: value listOfB in ImplicitTest)
|    |    |    |    |    |    \-> scala.type
|    |    |    |    |    |-- CaseClassB TYPEmode (site: value listOfB in ImplicitTest)
|    |    |    |    |    |    \-> yuval.tests.ImplicitTest.CaseClassB
|    |    |    |    |    \-> List[yuval.tests.ImplicitTest.CaseClassB]
|    |    |    |    |-- listOfA : pt=List[yuval.tests.ImplicitTest.CaseClassB] BYVALmode-EXPRmode (site: value listOfB in ImplicitTest)
|    |    |    |    |    [search #2] start `List[yuval.tests.ImplicitTest.CaseClassA]`, searching for adaptation to pt=List[yuval.tests.ImplicitTest.CaseClassA] => List[yuval.tests.ImplicitTest.CaseClassB] (silent: value listOfB in ImplicitTest) implicits disabled
|    |    |    |    |    [search #2] considering listImplicitConversion
|    |    |    |    |    |-- listImplicitConversion BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value listOfB in ImplicitTest) implicits disabled
|    |    |    |    |    |    [adapt] [A, B](l: List[A])(implicit conv: A => B)List[B] adapted to [A, B](l: List[A])(implicit conv: A => B)List[B]
|    |    |    |    |    |    \-> (l: List[A])(implicit conv: A => B)List[B]
|    |    |    |    |    solving for (A: ?A, B: ?B)
|    |    |    |    |    [search #3] start `[A, B](l: List[A])(implicit conv: A => B)List[B]` inferring type B, searching for adaptation to pt=yuval.tests.ImplicitTest.CaseClassA => B (silent: value listOfB in ImplicitTest) implicits disabled
|    |    |    |    |    [search #3] considering a2b
|    |    |    |    |    |-- { ((a: yuval.tests.ImplicitTest.CaseClassA) => ImplicitTe... : pt=yuval.tests.ImplicitTest.CaseClassA => ? EXPRmode (silent: value listOfB in ImplicitTest) implicits disabled
|    |    |    |    |    |    |-- ((a: yuval.tests.ImplicitTest.CaseClassA) => ImplicitTest... : pt=yuval.tests.ImplicitTest.CaseClassA => ? EXPRmode (silent: value listOfB in ImplicitTest) implicits disabled
|    |    |    |    |    |    |    |-- ImplicitTest.this.a2b(a) EXPRmode (silent: value $anonfun in ImplicitTest) implicits disabled
|    |    |    |    |    |    |    |    |-- ImplicitTest.this.a2b BYVALmode-EXPRmode-FUNmode-POLYmode (silent: value $anonfun in ImplicitTest) implicits disabled
|    |    |    |    |    |    |    |    |    \-> (a: yuval.tests.ImplicitTest.CaseClassA)yuval.tests.ImplicitTest.CaseClassB
|    |    |    |    |    |    |    |    |-- a : pt=yuval.tests.ImplicitTest.CaseClassA BYVALmode-EXPRmode (silent: value $anonfun in ImplicitTest) implicits disabled
|    |    |    |    |    |    |    |    |    \-> yuval.tests.ImplicitTest.CaseClassA
|    |    |    |    |    |    |    |    \-> yuval.tests.ImplicitTest.CaseClassB
|    |    |    |    |    |    |    \-> yuval.tests.ImplicitTest.CaseClassA => yuval.tests.ImplicitTest.CaseClassB
|    |    |    |    |    |    \-> yuval.tests.ImplicitTest.CaseClassA => yuval.tests.ImplicitTest.CaseClassB
|    |    |    |    |    [adapt] a2b adapted to { ((a: yuval.tests.ImplicitTest.CaseClassA) => ImplicitTe... based on pt yuval.tests.ImplicitTest.CaseClassA => B
|    |    |    |    |    [search #3] solve tvars=?B, tvars.constr= >: yuval.tests.ImplicitTest.CaseClassB
|    |    |    |    |    solving for (B: ?B)
|    |    |    |    |    [search #3] success inferred value of type yuval.tests.ImplicitTest.CaseClassA => =?yuval.tests.ImplicitTest.CaseClassB is SearchResult({
|    |    |    |    |      ((a: yuval.tests.ImplicitTest.CaseClassA) => ImplicitTest.this.a2b(a))
|    |    |    |    |    }, TreeTypeSubstituter(List(type B),List(yuval.tests.ImplicitTest.CaseClassB)))
