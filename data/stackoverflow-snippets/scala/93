def measureTime[U](repeats: Long)(block: => U): Double = {
  val start = System.currentTimeMillis

  var iteration = 0
  while (iteration < repeats) {
    iteration += 1
    block
  }

  val end = System.currentTimeMillis
  (end - start).toDouble / repeats
}

// basic sanity check that all algos return roughly same result
println(pi_random(2000))
println(pi_random_parallel(2000))
println(pi_random_properly(2000))

// time comparison (N = 2k, 10 repetitions for each algorithm)
val N = 2000
val Reps = 10
println(""Sequential:  "" + measureTime(Reps)(pi_random(N)))
println(""Naive:       "" + measureTime(Reps)(pi_random_parallel(N)))
println(""My proposal: "" + measureTime(Reps)(pi_random_properly(N)))
