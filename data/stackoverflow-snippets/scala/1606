/**
 * Lazily produce the range `[start, stopExclusive)`. If you want to produce
 * the sequence in one chunk, instead of lazily, use
 * `emits(start until stopExclusive)`.
 *
 * @example {{{
 * scala> Stream.range(10, 20, 2).toList
 * res0: List[Int] = List(10, 12, 14, 16, 18)
 * }}}
 */
def range(start: Int, stopExclusive: Int, by: Int = 1): Stream[Pure,Int] =
  unfold(start){i =>
    if ((by > 0 && i < stopExclusive && start < stopExclusive) ||
        (by < 0 && i > stopExclusive && start > stopExclusive))
      Some((i, i + by))
    else None
}
