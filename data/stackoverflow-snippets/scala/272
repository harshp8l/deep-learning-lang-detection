case class Source(AccountNo: fnameString, : String, lname: String)
case class HitsIndex(_index: String, _type: String, _id: String, _score: Double, _source: Source)
case class HitsCount(total: Int, max_score: Double, hits: List[HitsIndex])
case class Shards(total: Int, successful: Int, failed: Int)
case class ParseJson(took: Int, timed_out: Boolean, _shards: Shards, hits: HitsCount)

case class Uiresult(masterid: String, value: String)
case class ErrorMsg(searchType: String, error_message: String)

def formatResult(jsonString: String, searchType: String): String = {
  implicit val formats = DefaultFormats
  val json = JsonParser.parse(jsonString)

  val elements = (json \\ "_source").children
  if (elements.isEmpty == true) {
    implicit val formats = DefaultFormats
    return (List(write(ErrorMsg(searchType, "No Matching Record Found"))).mkString("[\n", ",\n", "\n]"))
  }
  if (json.extract[ParseJson].hits.total == 1) {
    val m = (json \\ "_source").extract[Source]
    val list = List(write(Uiresult(m.AccountNo.toString(), (m.fname.toString() + m.lname.toString() ))))
    return (list.mkString("[\n", ",\n", "\n]"))

  } else {
    val elements = (json \\ "_source").children
    val list = for (source <- elements) yield {
      println(" source " + source)
      val m = source.extract[Source]
      val list = List(write(Uiresult(m.AccountNo.toString(), (m.fname.toString() + m.lname.toString() ))))
    }
    return (list.mkString("[\n", ",\n", "\n]"))
  }
}
