implicit object JsFormatter extends Format[Filter] {

  private val tagField1 = ""field1""
  private val tagField2 = ""field2""
  private val tagField3 = ""field3""
                ...
  private val tagFieldN = ""fieldN""   // N > 22

  override def reads(json: JsValue): JsResult[Filter] = JsSuccess(
    Filter(
      (json \ tagField1).as[Long],
      (json \ tagField2).as[Int],
      (json \ tagField3).as[String],
                  ...
      (json \ tagFieldn).as[Boolean]
    ) 
  )

  override def writes(filter: Filter): JsValue = Json.obj(
    tagField1 -> filter.field1,
    tagField2 -> filter.field2,
    tagField3 -> filter.field3,
              ...
    tagFieldN -> filter.fieldN
  )
}
