trait Config {
  def test(): Unit
}

case class Test() extends Config {
  override def test(): Unit = println("test")
}

Test.getClass.getSimpleName

val t: Test = classOf[Test].getConstructors()(0).newInstance().asInstanceOf[Test]

t.test()

java.lang.IllegalArgumentException: wrong number of arguments
    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(TestingSO.sc)
    at sun.reflect.NativeConstructorAccessorImpl.newInstance(TestingSO.sc:58)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(TestingSO.sc:41)
    at java.lang.reflect.Constructor.newInstance(TestingSO.sc:419)
...
