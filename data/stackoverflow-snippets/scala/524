object PersonSerializer extends Serializer[Person] {
    private val PersonClass = classOf[Person]

    def deserialize(implicit format: Formats)
    : PartialFunction[(TypeInfo, JValue), Person] = {
        case (TypeInfo(PersonClass, _), json) =>
            json match {
                case JObject(List(
                    JField(""name"", JString(d)),
                    JField(""age"", JInt(f)),
                    (""spouse"", JObject(List(JField(""name"", JString(g)), JField(""age"", JInt(h)))))
                    )) => Customer(d, f.toInt, Spouse(g, h.toInt))
                case JObject(List(
                    JField(""name"", JString(d)),
                    JField(""age"", JInt(f))
                    )) => Spouse(d, f.toInt)
            }
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
        case x: Customer =>
            JObject(List(
                JField(""name"", JString(x.name)),
                JField(""age"", JInt(x.age)),
                (""spouse"", JObject(List(JField(""name"", JString(x.spouse.name)), JField(""age"", JInt(x.spouse.age)))))
            ))
        case x: Spouse =>
            JObject(List(
                JField(""name"", JString(x.name)),
                JField(""age"", JInt(x.age))
            ))
    }
}
