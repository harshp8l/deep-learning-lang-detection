import java.time.DayOfWeek
import java.time.LocalDate
import java.time.temporal.IsoFields
import java.time.temporal.ChronoUnit
import java.time.format.DateTimeFormatter
import java.time.temporal.TemporalAdjusters

val initialDate = LocalDate.ofYearDay(2017, 50).`with`(IsoFields.WEEK_OF_WEEK_BASED_YEAR, 50).`with`(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY))
val finalDate = LocalDate.ofYearDay(2017, 50).`with`(IsoFields.WEEK_OF_WEEK_BASED_YEAR, 8).`with`(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY))

for {
  i <- 0 to ChronoUnit.WEEKS.between(initialDate, finalDate).toInt
} yield initialDate.plusWeeks(i).format(DateTimeFormatter.ofPattern("YYYY-ww"))
