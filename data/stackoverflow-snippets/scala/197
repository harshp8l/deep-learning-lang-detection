sealed trait Level
case object Hour extends Level
case object Day extends Level

sealed trait Log[L <: Level]

case object HourlyLog extends Log[Hour.type]
case object DailyLog extends Log[Day.type]

object Log {
  case class Logs[L <: Level](val logs: Seq[Log[L]])
  implicit val hourlyLogs = Logs[Hour.type](Seq(
    HourlyLog, HourlyLog, HourlyLog, HourlyLog
  ))
  implicit val dailyLogs = Logs[Day.type](Seq(
    DailyLog
  ))

  def byLevel[L <: Level](l: L)(implicit logs: Logs[L]): Seq[Log[L]] =
    logs.logs

}

import Log._
println(byLevel(Hour))
println(byLevel(Day))
