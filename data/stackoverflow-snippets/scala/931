class UserMapping(tag: Tag) extends Table[User](tag, ""USERS"") {

  val stringListMapper = MappedColumnType.base[Seq[String], String](
    list => list.mkString("",""),
    string => string.split(',').toSeq
  )

  val stringOptionalListMapper = MappedColumnType.base[Option[Seq[String]], String](
    list => list.get.mkString("",""),
    string => Some(string.split(',').toSeq)
  )

  def id: Rep[Long] = column[Long](""ID"", O.PrimaryKey, O.AutoInc)

  def name: Rep[Option[String]] = column[Option[String]](""NAME"")

  def cities: Rep[Option[Seq[String]]] = column[Option[Seq[String]]](""CITIES"")(stringOptionalListMapper)

  def countries: Rep[Seq[String]] = column[Seq[String]](""COUNTRIES"")(stringListMapper)


  // explicitly provide proper Shape evidence
  import slick.lifted.Shape
  implicit val shape = Shape.tuple4Shape(
    Shape.repColumnShape(longColumnType),
    Shape.optionShape(Shape.repColumnShape(stringColumnType)),
    Shape.repColumnShape(stringOptionalListMapper),
    Shape.repColumnShape(stringListMapper))

  // scalastyle:off method.name public.methods.have.type
  def * = (id, name, cities, countries) <> (User.tupled, User.unapply)
  // scalastyle:on method.name public.methods.have.type

}
