trait EnvelopeBuilder[P <: Payload] {
  def buildEnvelope(p: P): Envelope[P]
}

object EnvelopeBuilder {
  implicit def aEnvelopeBuilder[P <: PayloadA] = new EnvelopeBuilder[P] {
    override def buildEnvelope(p: P) = EnvelopeA(p)
  }

  implicit def bEnvelopeBuilder[P <: PayloadB] = new EnvelopeBuilder[P] {
    override def buildEnvelope(p: P) = EnvelopeB(p)
  }
}

// constructor
object Envelope {
  def apply[P <: Payload](p: P)(implicit eb: EnvelopeBuilder[P]): Envelope[P] = eb.buildEnvelope(p)
}
