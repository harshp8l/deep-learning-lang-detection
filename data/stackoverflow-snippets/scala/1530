case class Node[A](elem: A, subNodes: List[Node[A]])

def addNode[T](node: Node[T], path: List[T]): Node[T] = {
  if (path.isEmpty)
    node
  else if (path.head == node.elem)
    addNode(node, path.tail)
  else if (node.subNodes.map(_.elem).contains(path.head))
    Node(node.elem, node.subNodes.map{n =>
      if (n.elem == path.head) addNode(n,path.tail)
      else n
    })
  else
    Node(node.elem
        ,node.subNodes :+ addNode(Node(path.head, List[Node[T]]()), path.tail))
}

val root = Node(""a"", List(Node(""w"", Nil)
                         ,Node(""b"", List(Node(""c"", List(Node(""d"", Nil)))
                                        ,Node(""m"", List(Node(""n"", Nil)))))))
addNode(root,List(""a"",""b"",""m"",""n"",""t""))
