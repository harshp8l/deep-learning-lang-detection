/** Binds the given function across `Left`.
 *
 *  {{{
 *  Left(12).left.flatMap(x => Left(""scala"")) // Left(""scala"")
 *  Right(12).left.flatMap(x => Left(""scala"")) // Right(12)
 *  }}}
 *  @param f The function to bind across `Left`.
 */
def flatMap[A1, B1 >: B](f: A => Either[A1, B1]): Either[A1, B1] = e match {
  case Left(a) => f(a)
  case _       => e.asInstanceOf[Either[A1, B1]]
}

/** Maps the function argument through `Left`.
 *
 *  {{{
 *  Left(12).left.map(_ + 2) // Left(14)
 *  Right[Int, Int](12).left.map(_ + 2) // Right(12)
 *  }}}
 */
def map[A1](f: A => A1): Either[A1, B] = e match {
  case Left(a) => Left(f(a))
  case _       => e.asInstanceOf[Either[A1, B]]
}
