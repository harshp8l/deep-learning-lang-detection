object EnumX extends Enumeration {
  val val1 = Value
  val val2 = Value
}

object EnumY extends Enumeration {
  val valA = Value
  val valB = Value
}

import scala.languageFeature.implicitConversions

object MixedEnumXY extends Enumeration {
  val val1 = Value
  val val2 = Value
  val valA = Value
  val valB = Value

  implicit def fromEnumX(ex: EnumX.Value): MixedEnumXY.Value = ex match {
    case EnumX.val1 => val1
    case EnumX.val2 => val2
  }

  implicit def fromEnumY(ey: EnumY.Value): MixedEnumXY.Value = ey match {
    case EnumY.valA => valA
    case EnumY.valB => valB
  }
}

def test(): Unit = {
  val e1: MixedEnumXY.Value = EnumX.val1
  val e2: MixedEnumXY.Value = EnumY.valA
}
