implicit class class_extension(val class_to_extend: class_to_extend) {
   import class_extension._
   private val fields = class_extension_fields_map.getOrElseUpdate(class_to_extend, class_extension_fields(default_value_1, default_value_2))

   def a = fields.a
   def a_=(value: Int) = fields.a = value
   def b = fields.b
   def b_=(value: Int) = fields.b = value
}
object class_extension {
   private case class class_extension_fields(var a: Int, var b: Boolean)
   private val class_extension_fields_map = new HashMap[class_to_extend, class_extension_fields]
}
