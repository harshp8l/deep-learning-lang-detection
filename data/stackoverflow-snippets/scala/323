//...
import scala.tools.nsc.interpreter.IMain;
import javax.script.ScriptContext;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
//...

private void scalaJob(SparkSession sparkSession, Dataset<Row> someData){

    ScriptEngine e = new ScriptEngineManager().getEngineByName("scala");

    //tell scala to use the classpath same as java
    ((IMain)e).settings().classpath().append(System.getProperty("java.class.path"));

    //passing on some foo and bar
    e.getContext().setAttribute("sparkSession",sparkSession, ScriptContext.ENGINE_SCOPE);
    e.getContext().setAttribute("someData",someData, ScriptContext.ENGINE_SCOPE);

    try {

        //hello world

        String script = "object HelloWorld {\n"; 
        script += "def main(args: Array[String]): Unit = {\n";
        script += "println(\"Hello, world!\")\n";
        script += "}\n";
        script += "}\n";
        script += "HelloWorld.main(Array())";
        e.eval(script);

        //some serious work

        script = "import org.apache.spark.sql.SparkSession\n";
        script += "import org.apache.spark.sql.Dataset\n"
        script += "import org.apache.spark.sql.Row\n";

        script += "val processedData = someData.asInstanceOf[Dataset[Row]]\n";
        script += "processedData.show(false)\n"

        script += "processedData\n";

        //getting back the result of serious work

        Dataset<Row> ds = (Dataset<Row>) e.eval(script);
        ds.show();

    } catch (ScriptException ex) {
        ex.printStackTrace();
        System.exit(1);
    }
}
