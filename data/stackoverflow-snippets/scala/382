import java.util.concurrent.atomic.AtomicReference

import scala.concurrent.{Await, Future}
import scala.util.Random._
import scala.concurrent.ExecutionContext.Implicits.global

def potentialLongBlockingHelloWorld(i: Int): String = {Thread.sleep(nextInt(500)); s"hello world $i" }


// init with fallback
val result1 = new AtomicReference[String]("fallback hello world 1")
val result2 = new AtomicReference[String]("fallback hello world 2")
val result3 = new AtomicReference[String]("fallback hello world 3")

// use the same method 3 times, but in reality is different methods (with different types)
val f1 = Future(potentialLongBlockingHelloWorld(1)).map {res =>
  result1.set(res)
}
val f2 = Future(potentialLongBlockingHelloWorld(2)).map {res =>
  result2.set(res)
}
val f3 = Future(potentialLongBlockingHelloWorld(3)).map {res =>
  result1.set(res)
}

for (i <- 1 to 5 if !(f1.isCompleted && f2.isCompleted && f3.isCompleted)) {
  Thread.sleep(50)
}

(result1.get(), result2.get(), result3.get())
