override def createRelation(sqlContext: SQLContext, parameters: Map[String, String], schema: StructType) = {
    val username = parameters.get(""username"")
    val password = parameters.get(""password"")
    val pemFileLocation = parameters.get(""pem"")
    val pemPassphrase = parameters.get(""pemPassphrase"")
    val host = parameters.getOrElse(""host"", sys.error(""SFTP Host has to be provided using 'host' option""))
    val port = parameters.get(""port"")
    val path = parameters.getOrElse(""path"", sys.error(""'path' must be specified""))
    val fileType = parameters.getOrElse(""fileType"", sys.error(""File type has to be provided using 'fileType' option""))
    val inferSchema = parameters.get(""inferSchema"")
    val header = parameters.getOrElse(""header"", ""true"")
    val delimiter = parameters.getOrElse(""delimiter"", "","")
    val createDF = parameters.getOrElse(""createDF"", ""true"")
    val copyLatest = parameters.getOrElse(""copyLatest"", ""false"")
    //System.setProperty(""java.io.tmpdir"",""hdfs://devnameservice1/../"")
    val tempFolder = parameters.getOrElse(""tempLocation"", System.getProperty(""java.io.tmpdir""))
    val hdfsTemp = parameters.getOrElse(""hdfsTempLocation"", tempFolder)
    val cryptoKey = parameters.getOrElse(""cryptoKey"", null)
    val cryptoAlgorithm = parameters.getOrElse(""cryptoAlgorithm"", ""AES"")

    val supportedFileTypes = List(""csv"", ""json"", ""avro"", ""parquet"")
    if (!supportedFileTypes.contains(fileType)) {
      sys.error(""fileType "" + fileType + "" not supported. Supported file types are "" + supportedFileTypes)
    }
