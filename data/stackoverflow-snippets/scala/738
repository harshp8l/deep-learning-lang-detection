val df = Seq(
  (new Integer(1), ""a""),
  (new Integer(2), null),
  (null, ""c"")
).toDF(""col1"", ""col2"")

df.withColumn(""concat"", concat_ws(""|"", df.columns.map(col): _*)).
  show
// +----+----+------+
// |col1|col2|concat|
// +----+----+------+
// |   1|   a|   1|a|
// |   2|null|     2|
// |null|   c|     c|
// +----+----+------+

val naMap = df.dtypes.map( t => t._2 match {
  case ""StringType"" => (t._1, ""(n/a)"")
  case ""IntegerType"" => (t._1, 0)
  case ""LongType"" => (t._1, 0L)
  // cases for other types ...
  case _ => (t._1, ""(unknown)"")
} ).toMap
// naMap: scala.collection.immutable.Map[String,Any] = 
//   Map(col1 -> 0, col2 -> (n/a))

df.na.fill(naMap).
  withColumn(""concat"", concat_ws(""|"", df.columns.map(col): _*)).
  show
// +----+-----+-------+
// |col1| col2| concat|
// +----+-----+-------+
// |   1|    a|    1|a|
// |   2|(n/a)|2|(n/a)|
// |   0|    c|    0|c|
// +----+-----+-------+
