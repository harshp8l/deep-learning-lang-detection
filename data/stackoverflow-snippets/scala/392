val map = Map(1->""a"", 2->""b"", 100->""z"", 9->""e"", 3->""c"", 5->""d"")

def closestValues(m: Map[Int, String], key: Int): Seq[String] = {
  import scala.collection.immutable.TreeMap
  val tm = TreeMap(m.toSeq: _*)

  Seq( tm.to(key).lastOption, tm.from(key).headOption ).
    flatten.distinct.map{ case (k, v) => v }
}

closestValues(map, 0)
// res1: Seq[String] = List(a)

closestValues(map, 2)
// res2: Seq[String] = List(b)

closestValues(map, 50)
// res3: Seq[String] = List(e, z)

closestValues(map, 101)
// res4: Seq[String] = List(z)
