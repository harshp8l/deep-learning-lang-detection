val date2 = Option(LocalDate.parse("2017-02-01"))

case class Test(s: String)
case class Result(s: String)

val t = Test("11,22,33")
val dt = Test("2017-02-06")
val code = Option("22")

val f1 = Future(Seq(t))
val f2 = Future(Seq(dt))

// Wait for both futures to finish
val futureResult = Future.sequence(Seq(f1, f2)).map {
  case Seq(s1, s2) =>

    // Check the first part, this will be a Boolean
    val firstPart = code.nonEmpty && s1.exists(_.s.split(",").contains(code.get))

    // Check the second part, also a boolean
    val secondPart = date2.nonEmpty && s2.exists(d => LocalDate.parse(d.s).compareTo(date2.get) >= 0)

    // Do the AND logic you wanted
    if (firstPart && secondPart) {
      Result("Found")
    } else {
      Result("Not Found")
    }
}

// This is just for testing to see we got the correct result
val result = Await.result(futureResult, Duration.Inf)
println(result)
