import scala.collection.mutable.ListBuffer
import math.Ordering._
import Numeric.Implicits._

class  treeUsingList[A]( treeList:ListBuffer[Option[A]])(implicit order: Ordering[Option[A]]){
println(""A greeter is being instantiated"")

var  lst = treeList

var size= treeList.length


lst=buildtree(lst)


def buildtree(inputLst:ListBuffer[Option[A]]): ListBuffer[Option[A]]={

  var j=0
  var k=0
  var lst = ListBuffer[Option[A]]()

  for (i<- inputLst){
    lst = addNode(lst, i , 0)
  }
  lst
}


def addNode(treeLst:ListBuffer[Option[A]] , item :Option[A] , idx:Int)(implicit order: Ordering[Option[A]]):ListBuffer[Option[A]] ={
    if (order.lt(treeLst(idx) , item) ){

    if(treeLst.length < idx*2+1){
      while(treeLst.length < idx*2+1){
        treeLst.append(None)
      }
      treeLst.append(item)
    }
    else{
      if(treeLst(idx*2+2)==None){
        treeLst.update(idx*2+2, item)
      }
      else{
        addNode(treeLst,item ,idx*2+2 )(order)
      }
    }
  }

  treeLst
}
}

object mainTree{
  var b = scala.collection.mutable.ListBuffer[Option[Int]](Some(5),Some(2),Some(3),Some(1),Some(7))
  var atree = new treeUsingList[Int](b)(math.Ordering.Option[Int])
  print(atree)
}
