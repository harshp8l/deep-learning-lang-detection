import scala.io.StdIn.readInt
import scala.io.StdIn.readChar
import scala.util.Random

object GuessTheNumber {
  def main(args: Array[String]): Unit = {
    var play = true
    var counter = 1   //Allows counting input

    // Start a loop. As long as the user says he wants to continue, we keep entering the loop
    while (play) {
      // The game is slightly more clear in my humble opinion if you ask him/her this question after every attempt.
      // Otherwise you just have a blinking cursor on screen, without prompting user for input
      println(""Enter your guess of the result of 2, 6 sided dice."")
      // Read his current response
      val responseGuess = readInt()
      // If you don't have `1 +`, then, 0 could be a potential result
      val numRange = 2 + Random.nextInt(11)

      if (responseGuess == numRange)
        println(s""You got it right! in $counter attempts"")
      // You were missing println in each of the following cases. Hence the lack of response from your program, since,
      // it didn't know you wanted it to print that response
      else if (numRange < responseGuess)
        println(""Your guess was too large by "" + (responseGuess - numRange) + "" the correct answer was "" + numRange)

      else if (numRange > responseGuess)
        println( ""Your guess was too small by "" + (numRange - responseGuess) + "" the correct answer was "" + numRange)

      else if (responseGuess < 1)
        println(""Your guess is too small enter 2-12"")

      else if (responseGuess > 12)
        println(""You entered an invalid number, 2 dice can only equate to a maximum of 12"")

      println(""Do you want to continue? (Y/N)"")
      // Now you are reading a character instead of an integer. Basically a Y or an N
      play = readChar() match { // Not sure if you have gotten this far in your course. This syntax is referred to as pattern matching.
        // Its basically the same as using if / else
        case 'Y' | 'y' => true // If he enters Y or y, we assume he wants to continue.
        case _ => // For any other input we abort
          println(s""You tried $counter times"") // When he does decide to quit, lets tell him how many times he tried
          false
      }
      // After every attempt increment counter within your loop
      counter += 1
    }
  }
}
