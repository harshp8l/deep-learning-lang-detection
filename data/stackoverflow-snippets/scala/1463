import play.api.libs.json.{JsPath, Json, Reads}
import play.api.libs.functional.syntax._


val json1 =
 """
   |{
   |  "attributeName": "some String",
   |  "attributeValue": false
   |}
 """.stripMargin

val json2 =
  """
    |{
    |  "attributeName": "some String",
    |  "attributeValue": "daily"
    |}
  """.stripMargin

// I modified you case class to make the example short
case class Data(attributeName: String, attributeValue: String)
object Data {

  // No need to define a reads function, just assign the value
  implicit val readsData: Reads[Data] = (
    (JsPath \ "attributeName").read[String] and

    // Try to read String, then fallback to Boolean (which maps into String)
    (JsPath \ "attributeValue").read[String].orElse((JsPath \ "attributeValue").read[Boolean].map(_.toString))
  )(Data.apply _)
}

println(Json.parse(json1).as[Data])
println(Json.parse(json2).as[Data])
