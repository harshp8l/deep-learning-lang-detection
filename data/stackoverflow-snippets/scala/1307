    def separateGoodAndBad(myRDD: RDD[String]): RDD[String] = {
        val newRDD = myRDD.map(......)  //do stuff
        newRDD.cache  //newRDD has 2 actions performed on it

        val badRDD = newRDD.filter(row => row.contains(""bad""))
        badRDD.count

        val goodRDD = newRDD.filter(row => row.contains(""good""))
        goodRDD.cache    // this will cache goodRDD to avoid recomputing in next call
        goodRDD.count

        newRDD.unpersist // I am unpersisting because this method gets called several times

        goodRDD
    }
