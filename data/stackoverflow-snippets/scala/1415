def MonteCarlo(list: ListBuffer[Int]) = {
   val errorList = new ListBuffer[Double]()
for (i <- list) {
      var c = 0.00
      val X = new Random
      val Y = new Random

      for (j <- 0 until i) {
        val x = X.nextDouble // in [0,1]
        val y = Y.nextDouble // in [0,1]
        if (x * x + y * y < 1) {
          c = c + 1
        }
      }
      c = c * 4
      var p = c / i
     var error = abs(Pi-p)
     errorList += error
      println(s""Approximative value of pi : $p \tError: $error"")
  }
 errorList
}

scala> MonteCarlo(liste)
Approximative value of pi : 3.26    Error: 0.11840734641020667
Approximative value of pi : 3.12    Error: 0.02159265358979301
Approximative value of pi : 3.142   Error: 4.073464102067881E-4
res9: scala.collection.mutable.ListBuffer[Double] = ListBuffer(0.11840734641020667, 0.02159265358979301, 4.073464102067881E-4)
