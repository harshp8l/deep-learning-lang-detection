  type Keys = Vector[String]
  type Data = Vector[String]
  def keyData(m: Map[Int, String], p: Int => Boolean, q: Int => Boolean): (Keys, Data) = {
    def go(keys: Keys, data: Data, m: List[(Int, String)]): (Keys, Data) =
      m match {
        case (k, v) :: ks if p(v) =>
          go(v +: keys, data, ks)
        case (k, v) :: ks if q(v) =>
          go(keys, v +: data, ks)
        case k :: ks =>
          go(keys, data, ks)
        case _ => (keys, data)
      }
    go(Vector.empty[String], Vector.empty[String], m.toList)
  }
