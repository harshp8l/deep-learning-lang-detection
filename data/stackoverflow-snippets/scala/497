// pseudocode!

def g: Double => Double 
  = f(1)(2)(3.0) // we supply three params and are left with only one, ""d""
  = (d: Double) => 1 * 3.0 + 2 * d // we comply with g's type

def h: Double => Double => Double // or (Double, Double) => Double 
  = f(1)(2) // we supply two params and are left with two more, ""c"" and ""d""
  = (c: Double)(d: Double) => 1 * c + 2 * d // we comply with h's type

def k: Double => Double => Double => Double // or (Double, Double, Double) => Double
  = f(1) // we supply one param and are left with three more, ""b"", ""c"" and ""d""
  = (b: Double)(c: Double)(d: Double) => 1 * c + b * d // we comply with k's type
