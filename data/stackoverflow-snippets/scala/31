import scala.util.Random
import scala.math._

def gapSampling(list: List[Double], p: Double): List[Double] = {
  def randomGap(p: Double): Double = {
    val epsilon: Double = 1e-10
    val u = max(Random.nextDouble, epsilon)
    floor( log(u) / log(1 - p) )
  }

  @scala.annotation.tailrec
  def samplingFcn(acc: List[Double], list: List[Double], p: Double): List[Double] = list match {
    case Nil => acc
    case _ =>
      val gap = randomGap(p).toInt
      val l = list.drop(gap + 1)
      val accNew = l.headOption match {
        case Some(e) => e :: acc
        case None => acc
      }
      samplingFcn(accNew, l, p)
  }

  samplingFcn(List[Double](), list, p).reverse
}

val list = (1 to 100).toList.map(_.toDouble)

gapSampling(list, 0.3)
// res1: List[Double] = List(
//   2.0, 5.0, 7.0, 14.0, 15.0, 18.0, 20.0, 25.0, 26.0, 28.0, 33.0,
//   35.0, 42.0, 43.0, 47.0, 48.0, 50.0, 55.0, 56.0, 59.0, 62.0,
//   69.0, 72.0, 75.0, 76.0, 79.0, 82.0, 93.0, 96.0, 97.0, 98.0
// )
