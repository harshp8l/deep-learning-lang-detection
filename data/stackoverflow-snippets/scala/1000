import anorm._
import java.io._

def loadModel(rName: String): Model = {
  db.withConnection { implicit c =>
    val result = SQL""""""
        SELECT r_model
        FROM MODELS
        WHERE r_name=${rName}
      """""".as(SqlParser.byteArray(""r_model"").single)

    Logger.info(s""result ${result.getClass} => $result"")
    deserialize[Model](result)
  }
}

def serialize(obj: Serializable): Array[Byte] = {
  val outBuf = new ByteArrayOutputStream()
  val out = new ObjectOutputStream(outBuf)
  out.writeObject(obj)
  out.flush()
  outBuf.toByteArray
}

def deserialize[T](byteArray: Array[Byte]): T = {
  val ois = new ObjectInputStream(new ByteArrayInputStream(byteArray))
  ois.readObject().asInstanceOf[T]
}

def testLoadModel(): Unit = {
  db.withConnection { implicit c =>
    val createRes = SQL(
      """"""
        |DROP TABLE   IF EXISTS MODELS;
        |
        |CREATE TABLE MODELS(
        | r_name  VARCHAR(50) PRIMARY KEY NOT NULL,
        | r_model  VARBINARY NOT NULL
        |         );
      """""".
        stripMargin).execute()
    Logger.info(s""Create result = $createRes"")
    val rName = ""rName""
    val m0 = Model(42, ""Abc"")
    val ser0 = serialize(m0)

    val insertRes = SQL(
      """"""
        | insert into MODELS values ({r_name},{r_model})
      """"""
        .stripMargin).on(""r_name"" -> rName, ""r_model"" -> ser0).executeInsert()
    Logger.info(s""Insert result = $insertRes"")

    val m1 = loadModel(rName)
    Logger.info(s""m0 = $m0"")
    Logger.info(s""m1 = $m1"")
  }
}
