def fun0() {
  println(""fun0"")
}
val a0 = fun0 _ // lineA: ok

def fun1(p: Int) {
  println(""fun1"")
}
val a1 = fun1 _ // lineB: ok
// val a1: Int=>Unit = fun1 // lineB1: pass
// val a1 = fun1(_: Int) // lineB2: pass

def fun2(implicit p: Int) {
  println(""fun2"")
}
implicit val i = 10
// val a2 = fun2 _  // lineC: why this fail?
val a2 = fun2(_: Int) // lineC1: only way to do eta-expansion, pass

def fun3(f: Int=>Unit) {
  f(1)
}

fun3(fun1) // lineD
fun3(a1)
fun3(a2) // lineE: with lineC1's a2, it will pass
