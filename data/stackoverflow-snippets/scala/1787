trait Stackable {
  def logic(x: Double): Unit
}

trait FooStackable extends Stackable {
  def foo: String
  def bar: Double

  abstract override def logic(x: Double): Unit = {
    println(""In FooStackable.logic()"")

   if (x < 0) println(foo)
    else super.logic(bar + x)
  }
}

trait TestStackable extends Stackable {
  def logic(x: Double): Unit = {
   println(""In TestStackable.logic()"")
  }
}

object FooStackableTest extends TestStackable with FooStackable {
  def foo: String = ""foo""
  def bar: Double = 1.234

  override def logic(x: Double): Unit = {
   println(""In FooStackableTest.logic()"")

   super.logic(x)   
  }
}
