package my.example

object EvalDemo {

  // evalutates scala code and returns the result as T
  def evalAs[T](code: String) = {
    import scala.reflect.runtime.currentMirror
    import scala.tools.reflect.ToolBox
    val toolbox = currentMirror.mkToolBox()
    import toolbox.{eval, parse}
    eval(parse(code)).asInstanceOf[T]
  }

  def concate(a: String, b: String): String = a + "" "" + b

  def main(args: Array[String]): Unit = {

    var func = ""concate"" //i'll get this function name from config as string

    val code =
      s""""""
         |import my.example.EvalDemo._
         |${func}(""hello"",""world"")
         |"""""".stripMargin

    val result: String = evalAs[String](code)

    println(result) // ""hello world""
  }
}
