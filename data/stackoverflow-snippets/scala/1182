val txt =
  """
    |input {
    |    foo {
    |      bar = "a"
    |      baz = "b"
    |      type = "foo"
    |    }
    |
    |    bar {
    |      bar = "a"
    |      baz = "c"
    |      other = "foo"
    |      type = "bar"
    |    }
    |}
  """.stripMargin

sealed trait Input {
  def bar: String
  def baz: String
}
case class Foo(bar: String, baz: String) extends Input
case class Bar(bar: String, baz: String, other:String) extends Input

case class Inputs(foo: Foo, bar: Bar)

val result = ConfigFactory.parseString(txt).get[Inputs]("input")
println(result)
