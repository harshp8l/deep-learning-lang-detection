  import shapeless.{Generic, Poly1}

  case class RfModelCalibration(field1: Field1, field2: Field2)

  val user: RfModelCalibration = users.head
  val transformer  = Generic[RfModelCalibration]
  val beforeTransform = transformer.to(user)
  val afterTransform = beforeTransform.map(enumTransform)
  val newCaseClass = transformer.from(afterTransform)

  object enumTransform extends Poly1 {
    implicit val cse1: Case.Aux[Field1, Field1] = at(x => ???)
    implicit val cse2: Case.Aux[Field2, Field2] = at(x => ???)
  }
