  sealed trait Param

  case class A() extends Param
  case class B() extends Param
  case class C() extends Param
  case class D() extends Param

  sealed trait ForParam[F[_ <: Param], T <: Param] {
    def value: F[T]
  }
  case class ForParamA[F[_ <: Param]](value: F[A]) extends ForParam[F, A]
  case class ForParamB[F[_ <: Param]](value: F[B]) extends ForParam[F, B]
  case class ForParamC[F[_ <: Param]](value: F[C]) extends ForParam[F, C]
  case class ForParamD[F[_ <: Param]](value: F[D]) extends ForParam[F, D]

  object ForParam {
    case class Example[T <: Param](f: T => String)

    val exampleFormParam: ForParam[Example, _] = ???
    exampleFormParam match {
      case ForParamA(value) => ???
      case ForParamB(value) => ???
      case ForParamC(value) => ???
      case ForParamD(value) => ???
    }

  }
