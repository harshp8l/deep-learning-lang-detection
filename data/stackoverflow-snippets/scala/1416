def main(a: Array[String]): Unit = {

  val oneJsValue: JsValue = load(""one"")
  oneJsValue.validate[One](oneReads) match {
    case s: JsSuccess[One] => println(s""Found: ${s.get.toString}"")
    case e: JsError => println(""Errors: "" + JsError.toJson(e).toString())
  } // Found: One(1)

  val twoJsValue: JsValue = load(""two"")
  twoJsValue.validate[Two](twoReads) match {
    case s: JsSuccess[Two] => println(s""Found: ${s.get.toString}"")
    case e: JsError => println(""Errors: "" + JsError.toJson(e).toString())
  } // Found: Two(1,2)

  val singleTwoJsValue: JsValue = load(""two.single"")
  singleTwoJsValue.validate[SingleTwo](singleTwoReads) match {
    case s: JsSuccess[SingleTwo] => println(s""Found: ${s.get.toString}"")
    case e: JsError => println(""Errors: "" + JsError.toJson(e).toString())
  } // Found: SingleTwo(Two(1,2))

  val doubleTwoJsValue: JsValue = load(""two.double"")
  doubleTwoJsValue.validate[DoubleTwo](doubleTwoReads) match {
    case s: JsSuccess[DoubleTwo] => println(s""Found: ${s.get.toString}"")
    case e: JsError => println(""Errors: "" + JsError.toJson(e).toString())
  } // Found: DoubleTwo(Two(1,2),Two(1,2))

}
