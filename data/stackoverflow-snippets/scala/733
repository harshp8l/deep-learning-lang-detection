def tempDestination(fileInfo: FileInfo): File = {
    log.info(s""File info for upload: [$fileInfo]"")
    File.createTempFile(fileInfo.fileName, "".tmp"")
}
...
(post & extractRequest) { _ =>
    log.info(""Inside the file upload path"")
    fileUpload(""zip"") {
      case (fileInfo, bytes) =>
        val dest = tempDestination(fileInfo)
        val uploadedF: Future[(FileInfo, File)] =
          bytes
            .runWith(FileIO.toPath(dest.toPath))
            .map(_ => (fileInfo, dest))

        onSuccess(uploadedF) { (info, file) =>
            val fileCreated: Future[MyFile] = (fileRegistryActor ? NewFile(file)).mapTo[MyFile]
            complete((StatusCodes.Created, fileCreated))
        }
    }
}
