case class TokenInfo private (uid: String, realm: String, scope: Seq[String])

object TokenInfo {
  private
  def parseOpt(s: String): Option[TokenInfo] = {

    util.parsing.json.JSON.parseFull(s) match {
      case Some(map: Map[String,Any] @unchecked) =>

        val tmp: Map[String,Any] = map.collect {
          case (k@ "uid",x: String) => k -> x
          case (k@ "realm",x: String) => k -> x
          case (k@ "scope",x: Seq[String] @unchecked) => k -> x
          // other keys are ignored
        }.toMap

        if (tmp.size == 3) {
          Some( TokenInfo( tmp("uid").asInstanceOf[String], tmp("realm").asInstanceOf[String], tmp("scope").asInstanceOf[Seq[String]]) )
        } else {
          None
        }

      case _ => None
    }
  }

  implicit
  val unm: FromEntityUnmarshaller[TokenInfo] = {
    PredefinedFromEntityUnmarshallers.stringUnmarshaller.map{ s => parseOpt(s).getOrElse{
      throw new RuntimeException(s"Unknown TokenInfo: $s")
    }}
  }
}
