case class PersonalInfo(email: String,
                        password: String,
                        firstName: String,
                        lastName: String)

object PersonalInfo {

  implicit val personalInfoReads = new Reads[PersonalInfo] {
    override def reads(json: JsValue): JsResult[PersonalInfo] = {
      for {
        email <- (json \ ""email"").validate[String]
        password <- (json \ ""password"").validate[String]
        firstName <- (json \ ""firstName"").validate[String]
        lastName <- (json \ ""lastName"").validate[String]
      } yield PersonalInfo(
        email.trim(),
        password.trim(),
        firstName.trim(),
        lastName.trim()
      )
    }
  }
}
