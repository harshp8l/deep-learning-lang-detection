private def loopNodes(nodes:List[NodeInfo], toBanUrl:String):Future[String] = {
  nodes.map { node =>
      // Creates a tuple to store current node and http result
      // (Node, result, HttpResult)
      (node, "", banAllHealthy(node, toBanUrl))
  }.foldLeft(Future(""))((str, b) =>
      b match {
        case (node, str ,response) => {
          // Each response will be transformed to string
          (response map (result => str  + " " + node.Node.Address + " " + "Success"))
          // In case of node is not available its suppose that the HttpClient will raise an execption  
          .recover {
            case err: Throwable  =>
              str + " " + node.Node.Address + " " + "Error " + err.getMessage
            case _ =>
              str  + " " + node.Node.Address + " " + "Unknown Error"
          }
        }
    })
}
