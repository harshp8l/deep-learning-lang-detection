object EnumX extends Enumeration {
  val val1 = Value
  val val2 = Value
}

object EnumY extends Enumeration {
  val valA = Value
  val valB = Value
}

sealed trait MixedEnum {
  def reason: Enumeration#Value
  override def toString: String = reason.toString
}

case class EnumXMix(reason: EnumX.Value) extends MixedEnum
case class EnumYMix(reason: EnumY.Value) extends MixedEnum


object MixedEnum {
  implicit def EnumX2MixedEnum(value: EnumX.Value) = EnumXMix(value)
  implicit def EnumY2MixedEnum(value: EnumY.Value) = EnumYMix(value)
}
