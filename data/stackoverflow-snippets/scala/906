import scala.language.implicitConversions

object MapHelpers {
  implicit def optionStringToString(maybeS: Option[String]): String = maybeS.getOrElse("""")
  implicit class MapWithIntKey(val m: Map[String, String]) extends Map[String, String] {
    override def get(key: String): Option[String] = {
      val prefix = ""(.*?)\\d+"".r
      m.get(key).orElse{
        key match {
          case prefix(p) => m.get(p)
          case _ => None
        }
      }
    }

    def +[V1 >: String](kv: (String, V1)): scala.collection.immutable.Map[String, V1] = m + kv
    def -(key: String): scala.collection.immutable.Map[String, String] = m - key
    def iterator: Iterator[(String, String)] = m.iterator
  }
}

object App {

  import MapHelpers._

  def testMapImplicit(): Unit = {
    val myMap: MapWithIntKey = Map(""foo"" -> ""bar"", ""faz"" -> ""baz"")
    println(""result - number match "", myMap.get(""foo1""))
    println(""result - exact match  "", myMap.get(""foo""))
  }

}

App.testMapImplicit()
