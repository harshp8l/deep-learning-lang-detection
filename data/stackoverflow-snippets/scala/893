sealed trait PageElement

case class PeTypeA(i: Int) extends PageElement

case class PeTypeB(s: String) extends PageElement

object PeTypeA {

  def make(buf: String): Option[PageElement] = {
    // simple example
    if (buf.length > 10) {
      Some(PeTypeA(11))
    } else {
      None
    }
  }
}

object PeTypeB {

  def make(buf: String): Option[PageElement] = {
    // simple example
    if (buf.length <= 10) {
      Some(PeTypeB(""foo""))
    } else {
      None
    }
  }
}

def doIt(buf: String): Option[PageElement] = {
  PeTypeA.make(buf).orElse(PeTypeB.make(buf))
}

val a: Option[PageElement] = doIt(""abcdefghijk"")
val b: Option[PageElement] = doIt(""abcdefghij"")

a.foreach(println) // PeTypeA(11)
b.foreach(println) // PeTypeB(foo)
