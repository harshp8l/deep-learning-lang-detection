import shapeless._
import shapeless.labelled.FieldType


trait OptionExtractor[A] {
  type B <: HList
}

trait LowPriorityOptionExtractor {

  implicit def hconsExtractor[K, V, T <: HList](implicit
                                                       extractor: OptionExtractor[T]):
  OptionExtractor.Aux[FieldType[K, V] :: T, extractor.B] = new OptionExtractor[FieldType[K, V] :: T] {
    type B = extractor.B
  }

}

object OptionExtractor extends LowPriorityOptionExtractor {

  type Aux[A, B0 <: HList] = OptionExtractor[A] {type B = B0}

  def apply[A](implicit extractor: OptionExtractor[A]): OptionExtractor.Aux[A, extractor.B] = extractor

  implicit val hnilOptionExtractor: OptionExtractor.Aux[HNil, HNil] = new OptionExtractor[HNil] {
    type B = HNil
  }

  implicit def hconsOptionExtractor[K, V, T <: HList](implicit extractor: OptionExtractor[T]):
  OptionExtractor.Aux[FieldType[K, Option[V]] :: T, K :: extractor.B] = new OptionExtractor[FieldType[K, Option[V]] :: T] {
    type B = K :: extractor.B
  }

}
