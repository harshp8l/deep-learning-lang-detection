import cats.{Id, ~>}

sealed trait StartupActionA[A] extends Product with Serializable
case object StartCluster extends StartupActionA[Unit]
case object StartEventActorShard extends StartupActionA[String]
case class StartKafka(ref: String) extends StartupActionA[Option[String]]

object Interpreter extends (StartupActionA ~> Id) {
  override def apply[A](fa: StartupActionA[A]): Id[A] = fa match {
    case StartCluster => ()
    case StartEventActorShard => "hello"
    case StartKafka(ref) => Some(ref)
  }
}
