import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._
import scala.language.postfixOps

val jobs = List(""stream.Job1"",""stream.Job2"",""stream.Job3"")
val futFactories = jobs.map { jobClass =>
  () => Future {
    println(s""Starting the spark job from class $jobClass..."")
    Thread.sleep(5000)
    ""result["" + jobClass + "","" + (System.currentTimeMillis / 1000) % 3600 + ""]""
  }
}

println(Await.result(runIndependentSequentially(futFactories), 30 seconds))
