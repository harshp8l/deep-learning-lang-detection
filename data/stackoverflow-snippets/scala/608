type DateTime=String

sealed trait MetaData {
    def time:DateTime
}
case class ImageMetadata (time: DateTime, name: String) extends MetaData
case class ObjectMetadata (time: DateTime, tags: List[String]) extends MetaData
case class ImageTypeMetadata (time: DateTime, name: String, tags: List[String])

val la = List (ImageMetadata("12", "im 1 foo"), ImageMetadata ("13", "im 2 bar"), ImageMetadata ("23", "im 3 bar"))
val lb = List (ObjectMetadata("23", List ("o", "1")), ObjectMetadata ("12", List("o", "2")), ObjectMetadata ("17", List("o", "3")))

import concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global

val flim : Future [List [ImageMetadata]] = Future (la)
val flom : Future [List [ObjectMetadata]] = Future (lb)
flim.map (_.map (im => flom.map (_.map (om => {if (im.time == om.time)  Future (ImageTypeMetadata (im.time, im.name, om.tags))}))))
