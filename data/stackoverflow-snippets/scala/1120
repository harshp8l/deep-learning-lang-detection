object Demo {

  case class Data(value: String)
  class DataA
  class DataB
  class DataC

  def maybeMyDataInEndpoint1(id: String): DataA = {
    println("maybeMyDataInEndpoint1")
    null
  }

  def maybeMyDataInEndpoint2(id: String): DataB = {
    println("maybeMyDataInEndpoint2")
    new DataB
  }

  def maybeMyDataInEndpoint3(id: String): DataC = {
    println("maybeMyDataInEndpoint3")
    new DataC
  }

  implicit def convert(data: DataA): Data = if (data == null) null else Data(data.toString)
  implicit def convert(data: DataB): Data = if (data == null) null else Data(data.toString)
  implicit def convert(data: DataC): Data = if (data == null) null else Data(data.toString)

  implicit def toLazyData[T](value: => T)(implicit convert: T => Data): (() => Data) = () => convert(value)

  def stream[T](xs: (() => T)*): Stream[T] = {
    xs.toStream.map(_())
  }

  def main (args: Array[String]) {

    val chain = stream(
      maybeMyDataInEndpoint1("1"),
      maybeMyDataInEndpoint2("2"),
      maybeMyDataInEndpoint3("3")
    )

    val result = chain.filter(_ != null).headOption.getOrElse(Data("default"))

    println(result)

  }

}
