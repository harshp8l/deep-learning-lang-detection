@implicitNotFound("You're returning a ${A}, which is asynchronous, which means the resource may be closed before you try and use it. Instead use usingAsync.")
final class NotFuture[A] private[ResourceFactoryTests]()
object NotFuture {
  final class Proof[A] private[ResourceFactory]()
  object Proof {
    implicit def preventFuture1[A]: Proof[Future[A]] = ???
    implicit def preventFuture2[A]: Proof[Future[A]] = ???
    @inline implicit def allowAnythingElse[A]: Proof[A] = null
  }
  @inline implicit def apply[A: Proof]: NotFuture[A] = null
}
