import akka.actor.{Actor, Cancellable, Props}
import scala.concurrent.duration._

class MyActor extends Actor {
  private var cancellable: Option[Cancellable] = None


  override def preStart(): Unit = {
    super.preStart()
    cancellable = Some(
      context.system.scheduler.schedule(
        1.second,
        24.hours,
        self,
        MyActor.Tick
      )(context.dispatcher)
    )
  }

  override def postStop(): Unit = {
    cancellable.foreach(_.cancel())
    cancellable = None
    super.postStop()
  }

  def receive: Receive = {
    case MyActor.Tick =>
        // here is the start point for your execution
        // NEW CODE WILL BE HERE
  }
}

object MyActor {
  val Name = ""my-actor""
  def props = Props(new MyActor)
  case object Tick
}
