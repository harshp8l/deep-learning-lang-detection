import scala.reflect.runtime.universe._
import scala.reflect.runtime.{universe => ru}

val runMirror = ru.runtimeMirror(getClass.getClassLoader)
val objectDef = Class.forName("org.myorg.TestClass")
val objectTypeModule = runMirror.moduleSymbol(objectDef).asModule
val objectType = objectTypeModule.typeSignature

val methodMap = objectType.members
  .filter(_.isMethod)
  .map(d => {
    d.name.toString -> d.asMethod
  })
  .toMap

// get the scala Object
val instance = runMirror.reflectModule(objectTypeModule).instance
val instanceMirror = runMirror.reflect(instance)
// get the private value
val result = instanceMirror.reflectMethod(methodMap("xyz")).apply()
assert(result == 100)
