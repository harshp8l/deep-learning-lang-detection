trait Functor[F[_]] {
  def map[A, B](fa: F[A])(f: A => B): F[B]
}

def someThingFail1[In]() = new Functor[Function1[In, ?]] {
  override def map[A, B](fa: Function1[In, A])(f: A => B): Function1[In, B] = ???
}

def someThingFail2[In]() = new Functor[Either[In, ?]] {
  override def map[A, B](fa: Either[In, A])(f: A => B): Either[In, B] = ???
}

def someThingFail3() = new Functor[List[?]] {
  override def map[A, B](fa: List[A])(f: A => B): List[B] = ???
}

//only this one can compile 
def someThingRight1() = new Functor[List] {
  override def map[A, B](fa: List[A])(f: A => B): List[B] = ???
}
