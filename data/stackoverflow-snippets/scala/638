def g1(abcd: ((Char, Int), (Char, Int))): Boolean = abcd._1._2 < abcd._2._2
val g1Fun: (((Char, Int), (Char, Int))) => Boolean = g1
//         ^^^            ^
//         || \           second component of tuple: (Char, Int)
//         ||  first component of tuple: (Char, Int)
//         | \
//         |  single argument of type ((Char, Int),(Char, Int))
//          \
//           argument list of `g1Fun`, accepts *one* argument


def g2(ab: (Char, Int), cd: (Char, Int)): Boolean = ab._2 < cd._2
val g2Fun: ((Char, Int), (Char, Int)) => Boolean = g2
//         ^^            ^
//         ||            second argument of type (Char, Int)
//         | \
//         |  first argument of type (Char, Int)
//          \
//           argument list of `g2Fun`, needs *two* arguments
