import scala.language.postfixOps

abstract class A { def show: Unit }
trait T extends A {
  abstract override def show: Unit = {
    print("" T""); super.show; print("" xT"")
  }
}
trait U extends A {
  abstract override def show: Unit = {
    print("" U""); super.show; print("" xU"")
  }
}
class C extends A {
  def show: Unit = print("" C"")
}

new C with T with U show

class D(s: => Unit) extends A {
  def show = s
}

// that's pretty close, isn't it?
val a = new D(print(""hurray!"")) with T with U
a show
