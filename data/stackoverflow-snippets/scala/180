class Creature(val name: String) extends Serializable {
  var spells: List[String] = List.empty[String]
  def addspell(spell: String): Unit = {
    spells ::= spell
  }
}

import scala.collection.mutable.ListBuffer

val list_creature = ListBuffer[Creature]()

list_creature += new Creature(""ska"")
list_creature(0).addspell(""Heal"")
list_creature(0).addspell(""Attaque"")

list_creature += new Creature(""moise"")
list_creature(1).addspell(""Tank"")
list_creature(1).addspell(""Defense"")
list_creature(1).addspell(""Attaque"")

val rdd = sc.parallelize(list_creature)

val reducedRDD = rdd.flatMap( c => c.spells.map(s => (s, List(c.name))) ).
  reduceByKey( _ ++ _ )

reducedRDD.collect
// res1: Array[(String, List[String])] = Array(
//   (Heal,List(ska)), (Defense,List(moise)), (Attaque,List(ska, moise)), (Tank,List(moise)
// ))
