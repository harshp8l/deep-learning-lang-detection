scala> val x=2;
x: Int = 2

scala> x.
!=   -    ==    ^           compareTo     intValue        isPosInfinity   isValidShort   round        toBinaryString   toFloat         toRadians   underlying
%    /    >     abs         doubleValue   isInfinite      isValidByte     isWhole        self         toByte           toHexString     toShort     until
&    <    >=    byteValue   floatValue    isInfinity      isValidChar     longValue      shortValue   toChar           toInt           unary_+     |
*    <<   >>    ceil        floor         isNaN           isValidInt      max            signum       toDegrees        toLong          unary_-
+    <=   >>>   compare     getClass      isNegInfinity   isValidLong     min            to           toDouble         toOctalString   unary_~

scala> x.+
                       def +(x: Long): Long   def +(x: Float): Float     def +(x: Int): Int    def +(x: Double): Double
def +(x: Short): Int   def +(x: Char): Int    def +(x: String): String   def +(x: Byte): Int

scala> x.+
                       def +(x: Double): Double   def +(x: Char): Int   def +(x: Short): Int   def +(x: String): String
def +(x: Long): Long   def +(x: Float): Float     def +(x: Int): Int    def +(x: Byte): Int

scala> x.+(3)
res1: Int = 5
