  case class UserPreferencesOpt(animals: Option[AnimalPreferencesOpt])
  case class AnimalPreferencesOpt(dogs: Option[String], cats: Option[String])

  case class UserPreferences(animals: AnimalPreferences)
  case class AnimalPreferences(dogs: String, cats: String)

  //Note that, I have used `null` value in case of `None` found in Opt class. Instead of `null`, you can provide default value with some logic here.
  object UserPreferencesOpt {
    implicit def optToUserPref(userPref: UserPreferencesOpt): UserPreferences = UserPreferences(userPref.animals.getOrElse(null))
  }
  object AnimalPreferencesOpt {
    implicit def optToAnimalPref(animalPref: AnimalPreferencesOpt): AnimalPreferences = AnimalPreferences(animalPref.dogs.getOrElse(null), animalPref.cats.getOrElse(null))
  }
  val userPrefOpt:UserPreferencesOpt = UserPreferencesOpt(Some(AnimalPreferencesOpt(Some("Dogs are cool!"), None)))
  val userPref: UserPreferences = userPrefOpt
