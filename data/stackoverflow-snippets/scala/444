object main {

  class Node[A]

  case class EmptyNode[A](value: A) extends Node [A]

  case class NonEmptyNode[A](left: Node[A], right: Node[A]) extends Node[A]

  import scala.reflect.ClassTag
  def traverse[A: ClassTag](tree: Node[A]): Array[A] = tree match {
    case NonEmptyNode(l, r) => traverse(l) ++ traverse(r)
    case EmptyNode(v) => Array(v)
  }

  def main(args: Array[String]): Unit = {
    val binaryTree =
      NonEmptyNode(
        NonEmptyNode(
          EmptyNode(""He""),
          EmptyNode(""llo "")
        ),
        NonEmptyNode(
          EmptyNode(""Wor""),
          EmptyNode(""ld"")
        )
      )

    val output = traverse(binaryTree).reduce((a, b) => a + b)

    println(output)
  }
}
