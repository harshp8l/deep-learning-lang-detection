import scala.annotation.tailrec

final case class Person(name: String, age: Int)

val datlist = List(Person(""Frank"", 50), Person(""Peter"", 40), Person(""Frank"", 20))

// Determine if people names are unique.
def haveUniqueNames(pl: List[Person]): Boolean = {

  // Helper function.
  @tailrec
  def headUnique(rem: List[Person], seen: Set[String]): Boolean = {

    // If we've reached the end of the list, return true; we didn't find a duplicate.
    if(rem.isEmpty) true

    // Otherwise, if the person at the head of the list has a name we've already seen,
    // return false.
    else if(seen.contains(rem.head.name)) false

    // Otherwise, add the head person's name to the set of names we've seen,
    // and perform another iteration starting with the next person.
    else headUnique(rem.tail, seen + rem.head.name)
  }

  // Start off with the full list and an empty set.
  headUnique(pl, Set.empty)
}

// Check if names are unique.
haveUniqueNames(datlist)
