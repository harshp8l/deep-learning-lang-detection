trait Node
trait ValidationError
import scala.util.Either

abstract class ValidationF {
  // single abstract method without implicits
  def apply_impl(
    f: Node => Boolean, 
    n: Node, 
    errorType: String => ValidationError
  ): Either[ValidationError, Node]

  // actual `apply` with implicits
  def apply
    (f: Node => Boolean)
    (n: Node)
    (implicit errorType: String => ValidationError)
  : Either[ValidationError, Node] = {
    apply_impl(f, n, errorType)
  }
}

val findOnlyOne: ValidationF = 
  (f, n, onErr) => (??? : Either[ValidationError, Node])
