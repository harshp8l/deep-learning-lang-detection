// for (arity <- 2 to 20) {
//   println(
//     ""case ("" + 
//     (0 until arity).map(i => ('a' + i).toChar).mkString(""("", "","", "")"") + 
//     "",idx) => ("" +
//     (0 until arity).map(i => ('a' + i).toChar).mkString("","") +
//     "",idx)""
//   )
// }

rdd.zipWithIndex.map{
  case ((a,b),idx) => (a,b,idx)
  case ((a,b,c),idx) => (a,b,c,idx)
  case ((a,b,c,d),idx) => (a,b,c,d,idx)
  case ((a,b,c,d,e),idx) => (a,b,c,d,e,idx)
  case ((a,b,c,d,e,f),idx) => (a,b,c,d,e,f,idx)
  case ((a,b,c,d,e,f,g),idx) => (a,b,c,d,e,f,g,idx)
  case ((a,b,c,d,e,f,g,h),idx) => (a,b,c,d,e,f,g,h,idx)
  case ((a,b,c,d,e,f,g,h,i),idx) => (a,b,c,d,e,f,g,h,i,idx)
  case ((a,b,c,d,e,f,g,h,i,j),idx) => (a,b,c,d,e,f,g,h,i,j,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k),idx) => (a,b,c,d,e,f,g,h,i,j,k,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l,m),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,m,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l,m,n),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,m,n,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,idx)
  case ((a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t),idx) => (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,idx)
  case _ => throw new Error(""not a tuple"")
}
