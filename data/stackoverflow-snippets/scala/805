  val testLimit = 2 // Update the constants as required
  val takeUpto = 2

  def accumulator(input: List[Int], output: List[Int] = List.empty[Int]): List[Int] = {
    input match {
      case Nil                               => output // We have reached at the end of the input
      case head :: tail if head >= testLimit => accumulator(tail, output :+ head)
      case m =>
        val (toSum, next) = m.splitAt(takeUpto)
        accumulator(next, output :+ toSum.sum)
    }
  }

  // Map(0 -> 2, 1 -> 3, 3 -> 1, 4 -> 2) // Result
  // val raw = Map(0 -> 2, 1 -> 1, 2 -> 2, 3 -> 0, 4 -> 1, 5 -> 2) equivalent is List(2, 1, 2, 0, 1, 2)
  println(accumulator(List(2, 1, 2, 0, 1, 2)))
