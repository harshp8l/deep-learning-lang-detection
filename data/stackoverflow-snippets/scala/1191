scala> :paste
// Entering paste mode (ctrl-D to finish)


    trait Key[+T]

    trait Value[+T]

    case class StringKey(key: String) extends Key[String]
    case class IntKey(key: Int) extends Key[Int]

    case class StringValue(value: String) extends Value[String]
    case class IntValue(value: Int) extends Value[Int]

// Exiting paste mode, now interpreting.

defined trait Key
defined trait Value
defined class StringKey
defined class IntKey
defined class StringValue
defined class IntValue

scala> :paste
// Entering paste mode (ctrl-D to finish)

case class ValueHolder(sources: Map[Key[_], Value[_]]) {

      def processSources(): Unit = {
        sources
         .collect { case (_, StringValue(str)) => str } // extracted string value ready to be operated.
         .foreach(println)
      }

    }

// Exiting paste mode, now interpreting.

defined class ValueHolder
