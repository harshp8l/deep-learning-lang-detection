package main

import (
    ""encoding/json""
    ""fmt""
    ""os""

    ""github.com/google/jsonapi""
)

type Spider struct {
    ID       int `jsonapi:""primary,spiders""`
    EyeCount int `jsonapi:""attr,eye_count""`
}

func main() {
    // spiders is a slice of interfaces.. they can be unmarshalled back to spiders later if the need arises
    // you don't need a loop to create pointers either... so better in memory usage and a bit cleaner to read.. you can in theory load the []interface{} with a for loop as well since you mentioned getting this data from a db
    var spiders []interface{}
    spiders = append(spiders, &Spider{ID: 1, EyeCount: 8}, &Spider{ID: 2, EyeCount: 12})
    fmt.Println(""jsonapi, MarshalPayload"")
    jsonapi.MarshalPayload(os.Stdout, spiders)

    // test against marshall indent for sanity checking
    b, _ := json.MarshalIndent(spiders, """", "" "")
    fmt.Println(""marshall indent"")
    fmt.Println(string(b))
}
