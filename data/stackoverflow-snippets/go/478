func testClosedChannelBehavior() {
    const n = 50
    finish := make(chan bool)
    proceed := make(chan struct{})
    var done sync.WaitGroup
    for i := 0; i < n; i++ {
        done.Add(1)
        go func(x int) {
            <-proceed
            select {
            case <-time.After(1 * time.Hour):
            case <-finish:
                fmt.Printf("received finish %d\n", x)
            default:
                fmt.Printf("I didnt wait %d\n", x)
            }
            done.Done()
        }(i)
    }
    t0 := time.Now()
    close(finish)
    fmt.Println("finish closed")
    close(proceed)
    done.Wait()
    fmt.Printf("Waited %v for %d goroutines to stop\n", time.Since(t0), n)
}
