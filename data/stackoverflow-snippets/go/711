package main

import (
    "fmt"
    "io/ioutil"
    "net/http"
    "net/http/httptest"
    "testing"
)

func test(no int, name, addr, filepath string) error {
    var (
        err        error
        body, data []byte
        resp       *http.Response

        fmtError = func(step string, err error) error {
            return fmt.Errorf("Test #%d: error in testing <%s> in '%s' method
    %s", no, step, name, err)
        }
    )

    if resp, err = http.Get(addr); err != nil {
        return fmtError(fmt.Sprintf("HTTP GET %s", addr), err)
    } else if no == 0 {
        return nil
    }

    if data, err = ioutil.ReadFile(filepath); err != nil {
        return fmtError("read file", err)
    }

    if body, err = ioutil.ReadAll(resp.Body); err != nil {
        return fmtError("read response data", err)
    } else if string(body) != string(data) {
        return fmtError("compare data", fmt.Errorf("File data and response body not equal"))
    } else if err = resp.Body.Close(); err != nil {
        return fmtError("HTTP response body close", err)
    }

    return nil
}

func TestServer(t *testing.T) {
    var (
        ts = httptest.NewServer(http.DefaultServeMux)

        testData = []struct {
            Name, Addr, File string
        }{
            {
                Name: "Index",
                Addr: "/",
                File: "homepage.html",
            },
            {
                Name: "main.css",
                Addr: "/static/css/main.css",
                File: "static/css/main.css",
            },
        }
    )
    defer ts.Close()

    for i, tt := range testData {
        if err := test(i, tt.Name, ts.URL+tt.Addr, tt.File); err != nil {
            t.Fatal(err)
        }
    }
}
