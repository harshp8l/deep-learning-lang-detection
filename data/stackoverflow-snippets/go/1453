package main

import (
    ""encoding/json""
    ""fmt""
    ""log""
    ""net/http""
    ""sync""
    ""time""
)

type user struct {
    User userData `json:""user""`
}

type userData struct {
    Followers count `json:""followed_by""`
}

type count struct {
    Count int `json:""count""`
}

func getFollowerCount(username string, result chan<- int, wg *sync.WaitGroup) {
    defer wg.Done()
    reqURL := ""https://www.instagram.com/"" + username + ""/?__a=1""
    resp, err := http.Get(reqURL)
    if err != nil {
        log.Println(err)
        return
    }
    defer resp.Body.Close()

    var u user
    if err := json.NewDecoder(resp.Body).Decode(&u); err != nil {
        log.Println(err)
        return
    }
    result <- u.User.Followers.Count
}

func execute(users []string, result chan<- int) {
    wg := &sync.WaitGroup{}
    for _, username := range users {
        wg.Add(1)
        go getFollowerCount(username, result, wg)
    }
    wg.Wait()
    result <- -1
}

func main() {
    start := time.Now()
    fmt.Println(""STARTING UP"")
    usrs := []string{""kanywest"", ""kimkardashian"", ""groovyq"", ""kendricklamar"", ""barackobama"", ""asaprocky"", ""champagnepapi"", ""eminem"", ""drdre"", ""g_eazy"", ""skrillex""}

    result := make(chan int)
    go execute(usrs, result)

    for v := range result {
        if v == -1 {
            break
        }
        fmt.Println(v)
    }

    elapsed := time.Since(start)
    fmt.Println(""runtime:"", elapsed)
}
