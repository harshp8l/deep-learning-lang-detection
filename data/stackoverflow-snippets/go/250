//worker_pool improved example

package main

import "fmt"
import "time"
import "math/rand"

func worker(id int, jobs <-chan int, loads <-chan time.Duration, results chan<- int) {
    for j := range jobs {
        before := time.Now()
        fmt.Println("worker", id, "started  job", j)
        time.Sleep(<-loads)
        after := time.Now()
        fmt.Println("worker", id, "finished job", j, "in", after.Sub(before))
        results <- j
    }
}

func main() {

    jobs := make(chan int, 100) // Buffered channel
    loads := make(chan time.Duration)
    results := make(chan int, 100) // Buffered channel

    for w := 1; w <= 3; w++ {
        go worker(w, jobs, loads, results)
    }

    for j := 1; j <= 24; j++ {
        jobs <- j
        r := rand.New(rand.NewSource(int64(j*10)))
        loads <- time.Duration(r.Int63n(500000000)) // In nano seconds
    }
    close(jobs)
    close(loads)

    for a := 1; a <= 24; a++ {
        <-results
    }
}
