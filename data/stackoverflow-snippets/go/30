package main

import (
        ""bytes""
        ""encoding/base64""
        ""encoding/binary""
        ""encoding/json""
        ""fmt""
)

type IntB64 uint32

func (n IntB64) MarshalJSON() ([]byte, error) {
        b := make([]byte, 4)

        binary.BigEndian.PutUint32(b, uint32(n))
        b = bytes.TrimLeft(b, string(0))

        // All characters in the base64 alphabet need not be escaped, so we don't
        // have to call json.Marshal here.
        l := base64.RawStdEncoding.EncodedLen(len(b)) + 2
        j := make([]byte, l)

        base64.RawStdEncoding.Encode(j[1:], b)
        j[0], j[l-1] = '""', '""'

        return j, nil
}

func main() {
        enc(1)          // ""AQ""
        enc(1000)       // ""A+g""
        enc(1e6 - 1)    // ""D0I/""
        enc(1e6)        // ""D0JA""
        enc(1524036831) // ""Wtb03w""
}

func enc(n int64) {
        b, _ := json.Marshal(IntB64(n))
        fmt.Printf(""%10d %s\n"", n, string(b))
}
