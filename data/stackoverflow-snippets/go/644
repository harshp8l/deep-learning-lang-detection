package main

import (
    ""database/sql""
    ""fmt""
    ""strconv""
    ""time""

    _ ""github.com/lib/pq""
)

func clean(db *sql.DB, EVALDATE time.Time, MINCTD, MINDP int) (int64, time.Duration, error) {
    start := time.Now()

    tx, err := db.Begin()
    if err != nil {
        return 0, 0, err
    }
    committed := false
    defer func() {
        if !committed {
            tx.Rollback()
        }
    }()

    {
        const query = `DROP TABLE IF EXISTS clean;`
        if _, err := tx.Exec(query); err != nil {
            return 0, 0, err
        }
    }

    var nRows int64
    {
        const query = `
            CREATE TABLE clean AS
                SELECT id, symbol, date, close, volume, open, high, low 
                FROM unclean 
                WHERE symbol IN (
                    SELECT symbol
                    FROM unclean
                    WHERE date >= $1
                    GROUP BY symbol
                    HAVING 
                        COUNT(*) >= $2
                        AND 
                        COUNT(CASE WHEN NOT (open >0 AND high >0 AND low >0 AND close >0) THEN 1 END) <= $3
                )
                ORDER BY symbol, date
            ;
        `
        EVALDATE := EVALDATE.Format(""'2006-01-02'"")
        MINCTD := strconv.Itoa(MINCTD)
        MINDP := strconv.Itoa(MINDP)
        res, err := tx.Exec(query, EVALDATE, MINCTD, MINDP)
        if err != nil {
            return 0, 0, err
        }
        nRows, err = res.RowsAffected()
        if err != nil {
            return 0, 0, err
        }
    }

    {
        const query = `ALTER TABLE clean ADD PRIMARY KEY (symbol, date);`
        _, err := tx.Exec(query)
        if err != nil {
            return 0, 0, err
        }
    }

    if err = tx.Commit(); err != nil {
        return 0, 0, err
    }
    committed = true

    since := time.Since(start)

    {
        const query = `ANALYZE clean;`
        if _, err := db.Exec(query); err != nil {
            return nRows, since, err
        }
    }

    return nRows, since, nil
}

func main() {
    db, err := sql.Open(""postgres"", ""user=peter password=peter dbname=peter"")
    if err != nil {
        fmt.Println(err)
        return
    }
    defer db.Close()
    var ( // one year
        EVALDATE = time.Now().AddDate(-1, 0, 0)
        MINCTD   = 240
        MINDP    = 5
    )
    nRows, since, err := clean(db, EVALDATE, MINCTD, MINDP)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(""clean:"", nRows, ""rows"", since)
    return
}
