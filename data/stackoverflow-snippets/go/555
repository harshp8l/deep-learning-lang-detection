func getPrice(quotes chan<- string, onExit func()) {
    go func() {
        defer onExit()
        client := &http.Client{}
        req, _ := http.NewRequest(""GET"", ""https://some/api"", nil)
        req.Header.Set(""Accept"", ""application/json"")
        res, err := client.Do(req)
        if err != nil {
            panic(err) // should be handled properly
        }
        defer res.Body.Close()
        body, err := ioutil.ReadAll(res.Body)
        quotes <- string(body)
    }()
}

func main() {
    var wg sync.WaitGroup
    const max = 3
    quotes := make(chan string, max)
    for i := 0; i < max; i++ {
        wg.Add(1)
        getPrice(quotes, func() { wg.Done() })
    }

    go func() {
        defer close(quotes)
        wg.Wait()
    }()

    for n := range quotes {
        fmt.Printf(""\n%s"", n)
    }
}
