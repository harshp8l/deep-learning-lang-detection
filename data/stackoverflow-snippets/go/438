import (""fmt""
    ""log""
    ""gopkg.in/mgo.v2""
    ""gopkg.in/mgo.v2/bson""
)

type Method struct {
        Type string `json:""Type"" bson:""Type""`
        Host float64 `json:""Host"" bson:""Host""`
}

type Out struct {
        Type string `json:""Type"" bson:""Type""`
        Count float64 `json:""count"" bson:""count""`
}

func main() {

        session, err := mgo.Dial(""localhost"")
        if err != nil {
                panic(err)
        }
        defer session.Close()

        // Optional. Switch the session to a monotonic behavior.
        session.SetMode(mgo.Monotonic, true)

        c := session.DB(""test"").C(""api"")
        // err = c.Insert(&Method{""GET"", 1.0},
           //         &Method{""PUT"", 2.0},
           //         &Method{""POST"", 2.0})
        if err != nil {
                log.Fatal(err)
        }

        pipe := c.Pipe(
                []bson.M{
                    bson.M{
                        ""$unwind"":""$Type"",
                    },
                    bson.M{
                        ""$group"":bson.M{
                        ""_id"":""$Type"", 
                        ""count"":bson.M{""$sum"":1,},
                        },
                    },
                    bson.M{
                        ""$project"":bson.M{
                        ""Type"":""$_id"" , ""count"":""$count"",
                        },
                    },
                },
            )

        result := []Out{}
        // err = c.Find(bson.M{""Type"": ""GET"" }).One(&result)
            err = pipe.All(&result)

        if err != nil {
                log.Fatal(err)
        }

        fmt.Println(""Type:"", result)
}
