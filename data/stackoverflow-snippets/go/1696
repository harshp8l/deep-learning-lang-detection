// redirectStdFds redirects stderr and stdout to syslog; stdin to /dev/null
func redirectStdFds() {
    // stderr and stdout
    pr, pw, err := os.Pipe()
    if err != nil {
        tlog.Warn.Printf(""redirectStdFds: could not create pipe: %v\n"", err)
        return
    }
    tag := fmt.Sprintf(""gocryptfs-%d-logger"", os.Getpid())
    cmd := exec.Command(""logger"", ""-t"", tag)
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr
    cmd.Stdin = pr
    err = cmd.Start()
    if err != nil {
        tlog.Warn.Printf(""redirectStdFds: could not start logger: %v\n"", err)
    }
    pr.Close()
    err = syscall.Dup2(int(pw.Fd()), 1)
    if err != nil {
        tlog.Warn.Printf(""redirectStdFds: stdout dup error: %v\n"", err)
    }
    syscall.Dup2(int(pw.Fd()), 2)
    if err != nil {
        tlog.Warn.Printf(""redirectStdFds: stderr dup error: %v\n"", err)
    }
    pw.Close()

    // stdin
    nullFd, err := os.Open(""/dev/null"")
    if err != nil {
        tlog.Warn.Printf(""redirectStdFds: could not open /dev/null: %v\n"", err)
        return
    }
    err = syscall.Dup2(int(nullFd.Fd()), 0)
    if err != nil {
        tlog.Warn.Printf(""redirectStdFds: stdin dup error: %v\n"", err)
    }
    nullFd.Close()
}
