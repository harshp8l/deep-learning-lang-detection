package main

import (
    "fmt"
)

type mystruct []int

var ns []mystruct

func main() {

    ns = make([]mystruct, 1, 1)

    add(1, []int{2222, 24, 34})
    add(7, []int{5})
    add(13, []int{4,6,75})
    add(14, []int{8})
    add(16, []int{1, 4, 44, 67, 77})

    fmt.Println("Hello, playground", ns)
}

func add(index int, ms mystruct) {

    nscap := cap(ns)
    nslen := len(ns)
    //fmt.Println(nscap, nslen, index, ms)

    if index >= nscap {
        //Compute the new nslen & nscap you need
        //This is just for a sample - doubling it

        newnscap := index * 2
        newnslen := newnscap - 1

        nstemp := make([]mystruct, newnslen, newnscap)
        copy(nstemp, ns)
        ns = nstemp

        fmt.Println("New length and capacity:", cap(ns), len(ns))

        nscap = cap(ns)
        nslen = len(ns)
    }
    //Capacity and length may have changed above, check
    if index < nscap && index >= nslen {
        fmt.Println("Extending slice length",  nslen, "to capacity", nscap)
        ns = ns[:nscap]
    }
    ns[index] = ms
}
