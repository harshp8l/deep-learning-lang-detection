package main

import (
    ""encoding/json""
    ""fmt""
    ""io""
    ""strings""
)

var j = `
{
    ""symbol"": ""ZVZZT.O"",
    ""params"": [{
        ""forward"": 0,
        ""period"": 3,
        ""ref"": ""high"",
        ""indicator"": ""sma"",
        ""freq"": ""day""
    }, {
        ""forward"": 1,
        ""period"": 8,
        ""ref"": ""close"",
        ""indicator"": ""ema"",
        ""freq"": ""week""
    }]
}`

type Iteration4RequestBody struct {
    Symbol string             `json:""symbol""`
    Params []Iteration4Params `json:""params""`
}

type Iteration4Params struct {
    Forward   int    `json:""forward""`
    Period    int    `json:""period""`
    Ref       string `json:""ref""`
    Indicator string `json:""indicator""`
    Freq      string `json:""freq""`
}

func main() {
    // Using json.Unmarshal
    var it Iteration4RequestBody
    err := json.Unmarshal([]byte(j), &it)
    if err != nil {
        panic(err)
    }
    fmt.Println(it)

    // Using a json.Decoder
    var it2 Iteration4RequestBody
    dec := json.NewDecoder(strings.NewReader(j))
    if err := dec.Decode(&it2); err != nil && err != io.EOF {
        panic(err)
    }
    fmt.Println(it2)
}
