package main

import (
    ""fmt""
    ""encoding/json""
    ""log""
    ""strings""
)

var dataAsString = `` //put data between the ``

type Item struct {
    Id          int    `json:""id""`
    Category    string `json:""category""`
    Name        string `json:""name""`
    Description string `json:""description""`
}

type CategoryToItemSliceMap map[string][]Item
type CategoryToIndexItemMap map[string]map[int]Item

func main() {
    // first read the data, we use a decoder as the input was given
    // as a stream of seperate json objects and not a big single one.

    decoder := json.NewDecoder(strings.NewReader(dataAsString))
    var ourData []Item
    for decoder.More() {
        var it Item
        err := decoder.Decode(&it)
        if err != nil {
            log.Fatalln(err)
        }
        ourData = append(ourData, it)
    }

    // collect items according to categories
    catToItemSlice := CategoryToItemSliceMap{}
    for _,v := range ourData {
        catToItemSlice[v.Category] = append(catToItemSlice[v.Category],v)
    }

    // turn those slices into int -> Item maps so we get the index numbers
    // in the encoded json
    catToIndexItemMap := CategoryToIndexItemMap{}
    for k,v := range catToItemSlice {
        if catToIndexItemMap[k] == nil {
            catToIndexItemMap[k] = map[int]Item{}
        }
        for index, item := range v {
           catToIndexItemMap[k][index] = item
        }
    }

    // easiest way to get the ""elements: "" without an additional outer {} 
    // brace pair
    fmt.Printf(""elements: "")

    // We only have one json object in the output and that is a map, so we
    // can use Unmarshal and don't need a streaming encoder. And get nice
    // indentation with MarshalIndent.
    out, err := json.MarshalIndent(catToIndexItemMap, """", ""    "")
    if err != nil {
        log.Fatalln(err)
    }
    fmt.Println(string(out))

}
