package main

import (
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
)

var rawJson = `{
  ""posts"": [
    {
      ""title"": ""sapien ut nunc"",
      ""author"": ""Jeni"",
      ""content"": ""jgwilt0@mapquest.com"",
      ""publishdate"": ""26.04.2017"",
      ""image"": ""http://dummyimage.com/188x199.png/cc0000/ffffff""
    },
    {
      ""title"": ""mus vivamus vestibulum sagittis"",
      ""author"": ""Analise"",
      ""content"": ""adonnellan1@biblegateway.com"",
      ""publishdate"": ""13.03.2017"",
      ""image"": ""http://dummyimage.com/182x113.bmp/ff4444/ffffff""
    }
  ]
}`

type Data struct {
    Posts []struct {
        Title       string `json:""title""`
        Author      string `json:""author""`
        Content     string `json:""content""`
        Publishdate string `json:""publishdate""`
        Image       string `json:""image""`
    } `json:""posts""`
}

func loadFile(fileName string) (string, error) {
    bytes, err := ioutil.ReadFile(fileName)

    if err != nil {
        return """", err
    }
    return string(bytes), nil
}

func loadData() (Data, error) {
    var d Data
    // this is commented out so that i can load raw bytes as an example
    /*
        f, err := os.Open(""source/posts.json"")
        if err != nil {
            return d, err
        }
        defer f.Close()

        bytes, _ := ioutil.ReadAll(f)
    */

    // replace rawJson with bytes in prod
    json.Unmarshal([]byte(rawJson), &d)
    return d, nil
}

func main() {
    data, err := loadData()
    if err != nil {
        log.Fatal(err)
    }

    for i := 0; i < len(data.Posts); i++ {
        fmt.Println(""Title: "" + data.Posts[i].Title)
    }

    /*
    // you can also range over the data.Posts if you are not modifying the data then using the index is not necessary. 
    for _, post := range data.Posts {
        fmt.Println(""Title: "" + post.Title)
    }
    */

}
