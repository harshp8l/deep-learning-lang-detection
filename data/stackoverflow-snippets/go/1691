package main

import (
    "fmt"
)

// number of jobs workers do
const JOBS = 10

// number of workers
const WORKERS = 2

func work(in <-chan int, out chan<- int, done chan<- bool) {
    for n := range in {
        out <- n * n
    }
    done <- true
}

func main() {
    in := make(chan int, JOBS)
    out := make(chan int, JOBS)
    done := make(chan bool, WORKERS)

    // launch workers
    for w := 1; w <= WORKERS; w++ {
        go work(in, out, done)
    }

    // give jobs to workers
    for j := 1; j <= JOBS; j++ {
        in <- j
    }
    close(in)

    // list the results
    go func() {
        i := 0
        for r := range out {
            fmt.Println("result:", r)

            // when all jobs completed mark as done
            if i++; i == JOBS {
                done <- true
            }
        }
    }()

    // wait for all goroutines to keep up
    // WORKERS + RESULT go routines
    for i := 0; i < WORKERS + 1; i++ {
        <- done
    }

    // prevent leaking chans
    close(out)
}
