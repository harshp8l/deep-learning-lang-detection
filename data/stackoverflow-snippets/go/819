package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)

var sluggishness = 10

// your 3 synchronous unreliable api sources
// time.Sleep() is hard work of your api backends :)
func apiCall1() string {
    time.Sleep(time.Second * time.Duration(rand.Intn(sluggishness)))
    return ""api call 1""
}

func apiCall2() string {
    time.Sleep(time.Second * time.Duration(rand.Intn(sluggishness)))
    return ""api call 2""
}

func apiCall3() string {
    time.Sleep(time.Second * time.Duration(rand.Intn(sluggishness)))
    return ""api call 3""
}

// apiCall makes 3 calls concurrently and returns first
func anyCall() string {
    // our communicaton channels
    api1ret := make(chan string)
    api2ret := make(chan string)
    api3ret := make(chan string)

    // here we fire off 3 api calls concurrently
    go func() {
        // call and block till we get reply
        api1ret <- apiCall1()
        // close channel after we are done
        // since we are only sending one value
        defer close(api1ret)
    }()
    go func() {
        api2ret <- apiCall2()
        defer close(api2ret)
    }()
    go func() {
        api3ret <- apiCall3()
        defer close(api3ret)
    }()

    // select blocks till one of channels unblocks with a value
    // or time.After() unblocks after 5 sec
    select {
    case val := <-api1ret:
        return val

    case val := <-api2ret:
        return val

    case val := <-api3ret:
        return val

    case <-time.After(time.Second * 5):
        return ""timeout after 5 sec""
    }
}

func main() {
    // make the apiCall 10 times
    for i := 0; i < 10; i++ {
        fmt.Println(anyCall())
    }

    fmt.Println(""done"")
}
