package main

import (
        "encoding/json"
        "fmt"
        "log"
)

var jsonDoc = []byte(`
{
  "id": 1,
  "first_name": "name",
  "phone_numbers": [
    "555"
  ]
}
`)

type Item struct {
        Id      uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
        Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
        Numbers []string `protobuf:"bytes,4,rep,name=numbers" json:"numbers,omitempty"`
}

// You can define this function is item_json.go or so, then it 
// isn't removed if you re-generate your types.
func (i *Item) UnmarshalJSON(b []byte) error {
        type item struct {
                Id      uint32   `json:"id,omitempty"`
                Name    string   `json:"first_name,omitempty"`
                Numbers []string `json:"phone_numbers,omitempty"`
        }

        var x item
        if err := json.Unmarshal(jsonDoc, &x); err != nil {
                return err
        }

        *i = Item(x)

        return nil
}

func main() {
        var i Item
        if err := json.Unmarshal(jsonDoc, &i); err != nil {
                log.Fatal(err)
        }

        fmt.Printf("%#v\n", i)
}
