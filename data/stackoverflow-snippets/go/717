package main

import (
    ""fmt""
    ""reflect""
    ""strconv""
    ""time""
)

func getField(v interface{}, field string) string {
    r := reflect.ValueOf(v)
    f := reflect.Indirect(r).FieldByName(field)
    fieldValue := f.Interface()

    switch v := fieldValue.(type) {
    case int64:
        return strconv.FormatInt(v, 10)
    case int32:
        return strconv.FormatInt(int64(v), 10)
    case int:
        return strconv.FormatInt(int64(v), 10)
    case string:
        return v
    case bool:
        if v {
            return ""true""
        }
        return ""false""
    case time.Time:
        return v.String()
    default:
        return """"
    }
}

type MyStruct struct {
    Name   string
    Number int32
    Is     bool
    Clock  time.Time
}

func main() {
    s := MyStruct{}
    fmt.Println(getField(s, ""Name""))
    fmt.Println(getField(s, ""Number""))
    fmt.Println(getField(s, ""Is""))
    fmt.Println(getField(s, ""Clock""))
}
