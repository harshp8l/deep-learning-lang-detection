func CreateModel(c echo.Context) error {
    fmt.Println("====> Entry CreateModel function")
    //var results []dataStruct
    var Success bool = false

    Db := db.MgoDb{}
    Db.Init()
    defer Db.Close()

    col := Db.C(db.TrainingDataCollection)
    var results dataStructList // <--- use the type that implements the interface
    if err := col.Find(nil).All(&results); err != nil { // <-- pass a pointer to results
        fmt.Println("ERROR WHILE GETTING THE TRAINING DATA")
    } else {
        //fmt.Println("Results All: ", results)
        Success = true
    }

    fmt.Println("=============", results)

    //Initialises a new KNN classifier
    cls := knn.NewKnnClassifier("euclidean", "linear", 2)

    //Do a training-test split
    trainData, testData := base.InstancesTrainTestSplit(results, 0.55) // <-- this will work because results if of type dataStructList, which implements the base.FixedDataGrid interface.
    cls.Fit(trainData)

    //Calculates the Euclidean distance and returns the most popular label
    predictions, err := cls.Predict(testData)

    if err != nil {
        panic(err)
    }

    fmt.Println(predictions)

    // Prints precision/recall metrics
    confusionMat, err := evaluation.GetConfusionMatrix(testData, predictions)

    if err != nil {
        panic(fmt.Sprintf("Unable to get confusion matrix: %s", err.Error()))
    }

    fmt.Println(evaluation.GetSummary(confusionMat))

    return c.JSON(http.StatusOK, Success)

}
