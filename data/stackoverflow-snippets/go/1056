       package hjwt

    import (
        ""fmt""
        ""time""

        jwt ""github.com/dgrijalva/jwt-go""
        ""github.com/hzwy23/hcloud/logs""
    )

    var (
        key []byte = []byte(""-jwt-hzwy23@163.com"")
    )

    // json web token
    func GenToken() string {
        claims := &jwt.StandardClaims{
            NotBefore: int64(time.Now().Unix()),
            ExpiresAt: int64(time.Now().Unix() + 1000),
            Issuer:    ""hzwy23"",
        }

        token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
        ss, err := token.SignedString(key)
        if err != nil {
            logs.Error(err)
            return """"
        }
        return ss
    }

    // Verify that token is valid
    func CheckToken(token string) bool {
        _, err := jwt.Parse(token, func(*jwt.Token) (interface{}, error) {
            return key, nil
        })
        if err != nil {
            fmt.Println(""parase with claims failed."", err)
            return false
        }
        return true
    }


   // Next, add the filter before the beego starts. The filter code is as follows:

     beego.InsertFilter(""/platform/*"", beego.BeforeRouter, func(ctx *context.Context) {
            cookie, err := ctx.Request.Cookie(""Authorization"")
            if err != nil || !hjwt.CheckToken(cookie.Value) {
                http.Redirect(ctx.ResponseWriter, ctx.Request, ""/"", http.StatusMovedPermanently)
            }
        })

  //  In this process, you need to set the JSON web token value to cookies, where the cookies method is set as follows in.Golang:


    token := hjwt.GenToken()
    cookie := http.Cookie{Name: ""Authorization"", Value: token, Path: ""/"", MaxAge: 3600}
    http.SetCookie(w, &cookie)
