package main

import (
    ""fmt""
    ""reflect""
)

type InType interface {
    Fields(obj InType) map[string]bool
}

type Inner struct {
}

type Outer struct {
    Inner
    Id   int
    name string
}

func (i *Inner) Fields(obj InType) map[string]bool {
    typ := reflect.TypeOf(obj).Elem()
    attrs := make(map[string]bool)

    if typ.Kind() != reflect.Struct {
        fmt.Printf(""%v type can't have attributes inspected\n"", typ.Kind())
        return attrs
    }

    // loop through the struct's fields and set the map
    for i := 0; i < typ.NumField(); i++ {
        p := typ.Field(i)
        if !p.Anonymous {
            v := reflect.ValueOf(p.Type)
            v = v.Elem()
            attrs[p.Name] = v.CanSet()

        }
    }

    return attrs
}

func main() {
    val := Outer{}
    fmt.Println(val.Fields(&val)) // prints map[Id:true name:true]
}
