package main

import (
    ""context""
    ""fmt""
    ""time""
)

func startTimer(ctx context.Context, intervalTime int) {
    intervalChan := make(chan bool)
    go func() {
        for {
            select {
            case <-ctx.Done():
                fmt.Println(""Done from inside of goroutine."")
                return
            case <-time.After(time.Second * time.Duration(intervalTime)):
                fmt.Println(""Interval reached."")
                intervalChan <- true
            }
        }
    }()

    for {
        select {
        case <-ctx.Done():
            fmt.Println(""Done from startTimer."")
            return
        case <-intervalChan:
            time.Sleep(10 * time.Second)
            fmt.Println(""Done"")
        }
    }
}

func main() {
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()

    startTimer(ctx, 2)
}
