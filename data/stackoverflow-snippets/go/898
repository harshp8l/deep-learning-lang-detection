package main

import (
    ""fmt""
    ""unsafe""
)

func main() {
    var i int = 1
    fmt.Println(""Address : "", &i, "" Value : "", i)

    var address *int
    address = &i // getting the starting address

    loc := (uintptr)(unsafe.Pointer(address))
    p := unsafe.Pointer(loc)

    // verification - it should print 1
    var val int = *((* int)(p))
    fmt.Println(""Location : "", loc, "" Val :"",val) // it does print !!

    // lets print 1000 bytes starting from address of variable i
    // first memory location contains 1 as expected
    printValueAtMemoryLocation(loc, 1000)

    // now lets test for some arbitrary memory location
    // not so random ! wanted to reduce the diff value also any arbitrary memory location you can't read !!
    memoryToReach := 842350500000
    loc = changeToInputLocation(loc, memoryToReach)
    fmt.Println(""Loc is now at : "", loc)
    // lets print 1000 bytes starting from the memory location ""memoryToReach""
    printValueAtMemoryLocation(loc, 1000)

}

func changeToInputLocation(location uintptr, locationToreach int) uintptr {
    var diff,i int
    diff = locationToreach - int(location)

    fmt.Println(""We need to travel "", diff, "" memory locations !"")

    if diff < 0 {
        i= diff * -1
        for i > 0 {
            location--
            i--
        }
    } else {
        i= diff
        for i > 0 {
            location++
            i--
        }
    }
    return location
}

func printValueAtMemoryLocation(location uintptr, next int) {
    var v byte
    p := unsafe.Pointer(location)
    fmt.Println(""\n"")
    for i:=1; i<next; i++ {
        p = unsafe.Pointer(location)
        v = *((*byte)(p))
        fmt.Print(v,"" "")
        //fmt.Println(""Loc : "", loc, "" --- Val : "", v)
        location++
    }
    fmt.Println(""\n"")
}
