package main

import (
    ""fmt""
    ""runtime""
    ""strings""
)

// functionName returns a string representing the function name of the function n stack frames above the caller.
// if n = 0, the name of the function calling functionName() will be returned.
func functionName(n int) string {
    pc, _, _, ok := runtime.Caller(n + 1)
    if !ok {
        return ""unknown function""
    }
    me := runtime.FuncForPC(pc)
    if me == nil {
        return ""unknown function""
    }

    split := strings.Split(me.Name(), ""."")
    if len(split) == 0 {
        return ""unknown function""
    }
    return split[len(split)-1]
}

func main() {
    for skip := -4; skip <= 4; skip++ {
        fn := functionName(skip)
        fmt.Println(functionName(0), skip, fn)
    }
    const (
        sizeInt = 32 << (^uint(0) >> 63)
        maxInt  = 1<<(sizeInt-1) - 1
        minInt  = -1 << (sizeInt - 1)
    )
    for _, skip := range []int{minInt, maxInt} {
        fn := functionName(skip)
        fmt.Println(functionName(0), skip, fn)
    }
}
