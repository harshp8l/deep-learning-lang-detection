package main

import (
    "fmt"
    "math/big"
)

func CompressBalance(i *big.Int) []byte {
    if i == nil {
        return nil
    }
    if i.BitLen() == 0 {
        return []byte{0}
    }
    byts := i.Bytes()
    if len(byts) > 0x7F {
        return nil
    }
    blob := make([]byte, 1+len(byts))
    blob[0] = byte(len(byts))
    blob[0] |= byte(i.Sign()) & 0x80
    copy(blob[1:], byts)
    return blob
}

func DecompressBalance(b []byte) *big.Int {
    if len(b) <= 0 {
        return nil
    }
    if 1+int(b[0]&0x7F) != len(b) {
        return nil
    }
    i := new(big.Int)
    if b[0] == 0 {
        return i
    }
    i.SetBytes(b[1:])
    if b[0]&0x80 == 0x80 {
        i.Neg(i)
    }
    return i
}

func main() {
    tests := []string{
        "0",
        "1925000288124900513257758",  // 1,925,000.288124900513257758
        "-1925000288124900513257758", // -1,925,000.288124900513257758
    }
    for _, s := range tests {
        i := new(big.Int)
        i, ok := i.SetString(s, 10)
        if !ok {
            fmt.Println("error:", i, ok)
        }
        blob := CompressBalance(i)
        j := DecompressBalance(blob)
        fmt.Printf("i: %s\nj: %s\nblob: %d %v\n", i, j, len(blob), blob)
    }
}
