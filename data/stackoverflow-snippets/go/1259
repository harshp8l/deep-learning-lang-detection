package main

import "fmt"

type ContainerCollection struct {
    Count int
    List  []Container
}

func (cc ContainerCollection) String() string {
    total := 0
    for _, c := range cc.List {
        total += c.F
    }
    return fmt.Sprintf("{%d %v}", total, cc.List)
}

type Container struct {
    F          int
    Collection []SubContainer
}

type SubContainer struct {
    Key   string
    Value int
}

func main() {
    commits := map[string]int{
        "a": 1,
        "b": 2,
        "c": 3,
        "d": 4,
    }

    c := ContainerCollection{Count: 0}
    sc := []SubContainer{}

    for k, v := range commits {
        sc = append(sc, SubContainer{Key: k, Value: v})
        c.Count++
        if len(sc) == 2 {
            c.List = append(c.List, Container{Collection: sc, F: c.Count})
            sc = []SubContainer{}
        }
    }
    // Should also cover odd number of commits
    if len(sc) != 0 {
        c.Count++
        c.List = append(c.List, Container{Collection: sc, F: c.Count})
    }

    // for _, r := range c.List { fmt.Println(r) }

    fmt.Println(c)
}
