package main

import (
    ""bufio""
    ""bytes""
    ""errors""
    ""fmt""
    ""log""
    ""os""
    ""path/filepath""
    ""strings""

    ""golang.org/x/crypto/ssh""
)

func getHostKey(host string) (ssh.PublicKey, error) {
    file, err := os.Open(filepath.Join(os.Getenv(""HOME""), "".ssh"", ""known_hosts""))
    if err != nil {
        return nil, err
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    var hostKey ssh.PublicKey
    for scanner.Scan() {
        fields := strings.Split(scanner.Text(), "" "")
        if len(fields) != 3 {
            continue
        }
        if strings.Contains(fields[0], host) {
            var err error
            hostKey, _, _, _, err = ssh.ParseAuthorizedKey(scanner.Bytes())
            if err != nil {
                return nil, errors.New(fmt.Sprintf(""error parsing %q: %v"", fields[2], err))
            }
            break
        }
    }

    if hostKey == nil {
        return nil, errors.New(fmt.Sprintf(""no hostkey for %s"", host))
    }
    return hostKey, nil
}

func main() {
    hostKey, err := getHostKey(""localhost"")
    if err != nil {
        log.Fatal(err)
    }
    config := &ssh.ClientConfig{
        User: ""peter"",
        Auth: []ssh.AuthMethod{
            ssh.Password(""peter ssh password""),
        },
        HostKeyCallback: ssh.FixedHostKey(hostKey),
    }
    // Dial your ssh server.
    conn, err := ssh.Dial(""tcp"", ""localhost:22"", config)
    if err != nil {
        log.Fatal(""unable to connect: "", err)
    }
    defer conn.Close()
    session, err := conn.NewSession()
    if err != nil {
        log.Fatal(""Failed to create session: "", err)
    }
    defer session.Close()

    // Once a Session is created, you can execute a single command on
    // the remote side using the Run method.
    var b bytes.Buffer
    session.Stdout = &b
    if err := session.Run(""./test.sh""); err != nil {
        log.Fatal(""Failed to run: "" + err.Error())
    }
    fmt.Println(b.String())
}
