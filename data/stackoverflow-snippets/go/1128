for i := 0; i < cylces; i++ {
    for j := range data {
        //Calculate estimate
        estimate = 0
        for x := range data[j]{
            estimate += data[j][x] * weights[x]
        }

        // Update weights (range passes values as a copy)
        for x := 0; x < len(weights); x++ {
            weights[x] += learningRate * (expectedY[j] - estimate) * data[j][x]
        }
    }

    errorData = 0
    for j := range data {
        estimate = 0
        for x := range data[j] {
            estimate += data[j][x] * weights[x]
        }
        errorData += (expectedY[j] - estimate) * (expectedY[j] - estimate)
    }
    errorsCyles = append(errorsCyles, errorData / float64(len(data)))
}
