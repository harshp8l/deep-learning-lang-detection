// Connection array indexed by connection address
var conns = make(map[uintptr]net.Conn)
var connMutex = sync.Mutex{}

// writerToConnPrt converts an http.ResponseWriter to a pointer for indexing
func writerToConnPtr(w http.ResponseWriter) uintptr {
    ptrVal := reflect.ValueOf(w)
    val := reflect.Indirect(ptrVal)

    // http.conn
    valconn := val.FieldByName(""conn"")
    val1 := reflect.Indirect(valconn)

    // net.TCPConn
    ptrRwc := val1.FieldByName(""rwc"").Elem()
    rwc := reflect.Indirect(ptrRwc)

    // net.Conn
    val1conn := rwc.FieldByName(""conn"")
    val2 := reflect.Indirect(val1conn)

    return val2.Addr().Pointer()
}

// connToPtr converts a net.Conn into a pointer for indexing
func connToPtr(c net.Conn) uintptr {
    ptrVal := reflect.ValueOf(c)
    return ptrVal.Pointer()
}

// ConnStateListener bound to server and maintains a list of connections by pointer
func ConnStateListener(c net.Conn, cs http.ConnState) {
    connPtr := connToPtr(c)
    connMutex.Lock()
    defer connMutex.Unlock()

    switch cs {
    case http.StateNew:
        log.Printf(""CONN Opened: 0x%x\n"", connPtr)
        conns[connPtr] = c

    case http.StateClosed:
        log.Printf(""CONN Closed: 0x%x\n"", connPtr)
        delete(conns, connPtr)
    }
}

func HandleRequest(w http.ResponseWriter, r *http.Request) {
    connPtr := writerToConnPtr(w)
    connMutex.Lock()
    defer connMutex.Unlock()

    // Requests can access connections by pointer from the responseWriter object
    conn, ok := conns[connPtr]
    if !ok {
        log.Printf(""error: no matching connection found"")
        return
    }

    // Do something with connection here...

}

// Bind with http.Server.ConnState = ConnStateListener
