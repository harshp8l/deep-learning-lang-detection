package main

import (
    ""fmt""
    ""log""
    ""net/http""

    ""github.com/gorilla/mux""
)

var (
    err          error
    r            *mux.Router
    devRouter    *mux.Router
)

func devDbSeed(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintln(w, ""devDbSeed"")
    return
}

func main() {
    r = mux.NewRouter()
    devRouter = r.PathPrefix(""/api/v1/dev"").Subrouter()

    // mwAuthorize and mwAuthenticate basically work the same
    mw := []func(http.Handler) http.Handler{mwAuthenticate, mwAuthorize}

    // development endpoints
    devRouter.Handle(""/db/seed"", use(http.HandlerFunc(devDbSeed), mw...)).Name(""foo"")

    // Send all requests into the mux router
    err = http.ListenAndServe("":9000"", r)
    if err != nil {
        log.Fatal(err)
    }
}

func use(h http.Handler, mw ...func(http.Handler) http.Handler) http.Handler {
    // exec order: mw[0],mw[1],mw[N]...
    for i := len(mw) - 1; i >= 0; i-- {
        h = mw[i](h)
    }
    return h
}

func mwAuthorize(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        if !authorize(r) {
            w.WriteHeader(http.StatusForbidden)
            return
        }
        next.ServeHTTP(w, r)
    })
}
func mwAuthenticate(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        next.ServeHTTP(w, r)
    })
}

func authorize(r *http.Request) (isAuthorized bool) {
    isAuthorized = false

    handlerName := ""UNKNOWN""
    if route := mux.CurrentRoute(r); route != nil {
        routeName := route.GetName()
        if routeName != """" {
            handlerName = routeName
        }
    }

    log.Println(handlerName)
    switch handlerName {
    case ""USERS_CREATE"":
        // route-specific authorization
        log.Println(""USERS_CREATE"")
        break
    default:
        break
    }
    return
}
