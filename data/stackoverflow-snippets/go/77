package main

import (
    "encoding/json"
    "fmt"
    "log"
)

var rawDataExample = []byte(`{
    "default": {
        "settings": {
            "eightball": {
                "messages": [
                    "yes",
                    "no",
                    "maybe"
                ]   
            },  
            "main": {
                "blacklistedCommands": [], 
                "blacklistedUsers": [], 
                "error": "there was an error - ",
                "maxConsecutive": 5,
                "permissions": "You don't have permissions for that command.",
                "success": "The command was successful.",
                "whitelistedCommands": [], 
                "whitelistedUsers": []
            }   
        },  
        "data": {
            "user": {
                "default": {
                    "admin": "false",
                    "consecutiveCommands": "0",
                    "nickname": "", 
                    "sentMessages": "0" 
                },  
                "total": {
                    "admin": "false",
                    "consecutiveCommands": "0",
                    "nickname": "", 
                    "sentMessages": "0" 
                }   
            },  
            "chat": {
                "commandSender": "", 
                "lastMessage": "", 
                "lastSender": "", 
                "lastTimestamp": "", 
                "wasCommand":""
            }
        }
    }
}
`)

type Settings struct {
    Default struct {
        Settings struct {
            Eightball struct {
                Messages []string `json:"messages"`
            } `json:"eightball"`
            Main struct {
                BlacklistedCommands []string `json:"blacklistedCommands"`
                BlacklistedUsers    []string `json:"blacklistedUsers"`
                Error               string   `json:"error"`
                MaxConsecutive      int      `json:"maxConsecutive"`
                Permissions         string   `json:"permissions"`
                Success             string   `json:"success"`
                WhitelistedCommands []string `json:"whitelistedCommands"`
                WhitelistedUsers    []string `json:"whitelistedUsers"`
            } `json:"main"`
        } `json:"settings"`
        Data struct {
            User struct {
                Default struct {
                    Admin               string `json:"admin"`
                    ConsecutiveCommands string `json:"consecutiveCommands"`
                    Nickname            string `json:"nickname"`
                    SentMessages        string `json:"sentMessages"`
                } `json:"default"`
                Total struct {
                    Admin               string `json:"admin"`
                    ConsecutiveCommands string `json:"consecutiveCommands"`
                    Nickname            string `json:"nickname"`
                    SentMessages        string `json:"sentMessages"`
                } `json:"total"`
            } `json:"user"`
            Chat struct {
                CommandSender string `json:"commandSender"`
                LastMessage   string `json:"lastMessage"`
                LastSender    string `json:"lastSender"`
                LastTimestamp string `json:"lastTimestamp"`
                WasCommand    string `json:"wasCommand"`
            } `json:"chat"`
        } `json:"data"`
    } `json:"default"`
}

type Data struct {
    Events map[string]Settings
}

func main() {
    var settings Settings
    err := json.Unmarshal(rawDataExample, &settings)
    if err != nil {
        log.Fatal(err)
    }

    event := "foo"
    d := Data{
        Events: make(map[string]Settings),
    }

    if _, ok := d.Events[event]; !ok {
        // event doesn't exist
        // add it
        d.Events[event] = settings
        fmt.Println("event added")
    }

    if _, ok := d.Events[event]; !ok {
        // event exist, this will never be happen
        // sanity check
        fmt.Println("this will never be printed")
    }

    fmt.Printf("%+v\n", d)

}
