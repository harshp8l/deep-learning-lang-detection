// #Warning! You Should Use this Code Carefully, and As Your Own Risk.
    package main

    import (
    ""fmt""
    ""net/url""
    ""strings""
)
/*
After hours searching, I can't find any method can get the result exact as the JS encodeURIComponent function.
In my situation I need to write a sign method which need encode the user input exact same as the JS encodeURIComponent.
This function does solved my problem.
*/
func main() {
    params := url.Values{
        ""test_string"": {""+!+'( )*-._~0-üëø  üëø9a-zA-Z ‰∏≠ÊñáÊµãËØï test with ‚ù§Ô∏è !@#$%^&&*()~<>?/.,;'[][]:{{}|{}|""},
    }
    urlEncode := params.Encode()
    fmt.Println(urlEncode)
    urlEncode = compatibleRFC3986Encode(urlEncode)
    fmt.Println(""RFC3986"", urlEncode)
    urlEncode = compatibleJSEncodeURIComponent(urlEncode)
    fmt.Println(""JS encodeURIComponent"", urlEncode)
}

// Compatible with RFC 3986.
func compatibleRFC3986Encode(str string) string {
    resultStr := str
    resultStr = strings.Replace(resultStr, ""+"", ""%20"", -1)
    return resultStr
}

// This func mimic JS encodeURIComponent, JS is wild and not very strict.
func compatibleJSEncodeURIComponent(str string) string {
    resultStr := str
    resultStr = strings.Replace(resultStr, ""+"", ""%20"", -1)
    resultStr = strings.Replace(resultStr, ""%21"", ""!"", -1)
    resultStr = strings.Replace(resultStr, ""%27"", ""'"", -1)
    resultStr = strings.Replace(resultStr, ""%28"", ""("", -1)
    resultStr = strings.Replace(resultStr, ""%29"", "")"", -1)
    resultStr = strings.Replace(resultStr, ""%2A"", ""*"", -1)
    return resultStr
}
