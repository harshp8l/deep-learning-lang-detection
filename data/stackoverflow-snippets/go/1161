func NewMultiHostProxy(target_urls []string) gin.HandlerFunc {
    var urls []*url.URL
    for i := 0; i < len(target_urls); i++ {
        target, err := url.Parse(target_urls[i])
        if err != nil {
            fmt.Errorf("Error parsing url")
            return nil
        }
        urls = append(urls, target)
    }
    director := func(req *http.Request) {
        target := urls[rand.Int()%len(urls)]
        req.URL.Scheme = target.Scheme
        req.URL.Host = target.Host
        req.URL.Path = target.Path
        req.Host = ""
        req.Header.Set("X-GoProxy", "GoProxy")
        if target.RawQuery == "" || req.URL.RawQuery == "" {
            req.URL.RawQuery = target.RawQuery + req.URL.RawQuery
        } else {
            req.URL.RawQuery = target.RawQuery + "&" + req.URL.RawQuery
        }
        log.Print(req.URL)
    }
    proxy := &httputil.ReverseProxy{Director: director}
    return func(c *gin.Context) {
        proxy.ServeHTTP(c.Writer, c.Request)
    }
}
