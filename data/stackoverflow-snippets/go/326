type Max struct{ IntHeap }

func (h Max) Less(i, j int) bool {
    return h.IntHeap[i] > h.IntHeap[j]
}

type Min struct{ IntHeap }

func (h Min) Less(i, j int) bool {
    return h.IntHeap[i] < h.IntHeap[j]
}

type IntHeap []int

func (h IntHeap) Len() int { return len(h) }

func (h IntHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] }

func (h *IntHeap) Peek() interface{} { return (*h)[0] }

func (h *IntHeap) Push(x interface{}) {
    *h = append(*h, x.(int))
}

func (h *IntHeap) Pop() interface{} {
    length := len(*h)
    res := (*h)[length-1]
    *h = (*h)[0 : length-1]
    return res
}

// Now these can be initialized like
//     Min{IntHeap{1, 2, 3}}
//     Max{IntHeap{1, 2, 3}}
