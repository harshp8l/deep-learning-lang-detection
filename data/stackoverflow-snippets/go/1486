package main

import (
    "fmt"
    "github.com/google/gopacket"
    "github.com/google/gopacket/pcap"
    "github.com/google/gopacket/layers"
    "log"
)

var (
    pcapFile string = "Network_Join_Nokia_Mobile.pcap"
    handle   *pcap.Handle
    err      error
)

func main() {
    // Open file instead of device
    handle, err = pcap.OpenOffline(pcapFile)
    if err != nil { log.Fatal(err) }
    defer handle.Close()

    // Loop through packets in file
    packetSource := gopacket.NewPacketSource(handle, handle.LinkType())
    for packet := range packetSource.Packets() {
        fmt.Println(packet.Metadata().CaptureInfo.Timestamp)
        dot11 := packet.Layer(layers.LayerTypeDot11)
        if nil != dot11 {
                dot11, _ := dot11.(*layers.Dot11)
                // the flags are empty in many of the packets of this example capture file
                fmt.Printf("BSSID: %v Flags: %+v\n", dot11.Address3, dot11.Flags)
        }
        dot11info := packet.Layer(layers.LayerTypeDot11InformationElement)
        // some wlan frames contain these with the SSID, usually beacons, probes and association requests
        if nil != dot11info {
                dot11info, _ := dot11info.(*layers.Dot11InformationElement)
                if dot11info.ID == layers.Dot11InformationElementIDSSID {
                        fmt.Printf("SSID: %q\n", dot11info.Info)
                }
        }
        fmt.Printf("\n")
    }
}
