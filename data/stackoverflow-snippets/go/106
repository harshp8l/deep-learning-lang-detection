package main

import (
    ""fmt""
    ""time""
)

func main() {

    fmt.Println(""Start"");
    counter := 0

    printChannel := make( chan int)
    done := make(chan struct{} )

    go func(done <-chan struct{}, printChannel chan<- int  ){
        timer := time.NewTicker(time.Second)
        bDone := false;
        for !bDone {
            select {
            case <-timer.C:
                counter++
                if counter%2 == 0 {
                    printChannel <- counter
                }
            case <-done:
                bDone=true
            }
        }
    }(done, printChannel)

    go func(done <-chan struct{}, printChannel <-chan int ){
        bDone:=false
        for !bDone{
            select {
            case n := <-printChannel:
                fmt.Print(n, "" "");
            case <-done:
                bDone=true
            }
        }
    }(done,printChannel)


    //whatever logic to stop
    go func() {
        <- time.After(21*time.Second)
        done <- struct{}{}
    }()

    <-done

    fmt.Println(""\nEnd"");

}
