package main

import (
    "fmt"

    "math/rand"

    "time"
)

func main() {
    slice := generateSlice(4)
    fmt.Println(BubleSort(copySlice(slice)))
    fmt.Println(InsertionSort(copySlice(slice)))
}

func copySlice(src []int) []int {
    dest := make([]int, len(src))
    copy(dest, src)
    return dest
}
func generateSlice(size int) []int {
    slice := make([]int, size, size)
    rand.Seed(time.Now().UnixNano())
    for i := 0; i < size; i++ {
        slice[i] = rand.Intn(10)
    }
    return slice
}

func BubleSort(slice []int) []int {
    fmt.Println("unsorted Buble", slice)
    for i := 1; i <= len(slice); {
        for j := 0; j < len(slice)-i; {
            if slice[j] > slice[j+1] {
                slice[j], slice[j+1] = slice[j+1], slice[j]
            }
            j++
        }
        i++
    }
    return slice
}

func InsertionSort(slice []int) []int {
    fmt.Println("unsorted Insertion", slice)
    for i := 1; i <= len(slice)-1; {
        // Check j and j-1 and swap the smaller number to left in each itteartion to reach the first 2 elements of the slice
        for j := i; j >= 1; {
            if slice[j] < slice[j-1] {
                slice[j], slice[j-1] = slice[j-1], slice[j]
            }
            j--
        }
        i++
    }
    return slice
}
