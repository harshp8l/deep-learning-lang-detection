func main() {
    timer := time.NewTimer(nextDelay())
    for {
        <-timer.C
        timer.Reset(nextDelay())
        time.Sleep(time.Minute * 59) // the task, or you could do more tricks with channels
    }
}

func nextDelay() time.Duration {
    now := time.Now()
    return truncateHour(now).Add(time.Hour).Sub(now)
}

func truncateHour(t time.Time) time.Time {
    t = t.Truncate(time.Minute * 30)
    if t.Minute() > 0 {
        t = t.Add(time.Minute * -1).Truncate(time.Minute * 30)
    }
    return t
}
