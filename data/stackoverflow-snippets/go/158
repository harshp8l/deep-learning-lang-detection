package models

import (
    ""project/lib/database""
    ""time""
)

type QRetailerKeys interface {
    Insert() error
    Find() error
}

type RetailerKey struct {
    ID                  int        `json:""id""`
    RetailerID          int        `json:""retailer_id""`
    Retailer            Retailer   `json:""retailer""`
    Key                 string     `json:""key""`
    Enabled             bool       `json:""enabled"" gorm:""DEFAULT:true""`
    CreatedAt           *time.Time `json:""created_at""`
    UpdatedAt           *time.Time `json:""updated_at""`
}

// RetailerKeys returns a slice of all keys in table
func RetailerKeys() ([]*RetailerKey, error) {
    var keys []*RetailerKey
    if err := database.Manager.Find(&keys).Error; err != nil {
        return nil, err
    }
    return keys, nil
}

func (r *RetailerKey) Find() error {
    ...
}

// Create a new key
func (r *RetailerKey) Create() error {
    return database.Manager.Create(&r).Error
}
