package main

import (
    ""fmt""

    ""github.com/yvasiyarov/php_session_decoder/php_serialize""
)

func main() {
    // this string is generated from php code
    str := `a:3:{s:4:""name"";s:3:""tom"";s:3:""age"";s:2:""23"";s:7:""friends"";a:2:{i:0;a:1:{s:4:""name"";s:5:""jerry"";}i:1;a:1:{s:4:""name"";s:4:""jack"";}}}`

    decoder := php_serialize.NewUnSerializer(str)

    result, err := decoder.Decode()
    if err != nil {
        panic(err)
    }
    fmt.Println(result)

    // simple assert
    t := result.(php_serialize.PhpArray)
    // use php_seriale build in function to get string
    strVal := php_serialize.PhpValueString(t[""name""])
    fmt.Println(strVal)

    // type switch in case of different valid types
    switch t := result.(type) {
    default:
        fmt.Printf(""unexpected type %T\n"", t) // %T prints whatever type t has
    case php_serialize.PhpArray:
        fmt.Println(t)
        fmt.Println(t[""name""])
        fmt.Println(t[""age""])

        // should be done recursively...
        switch f := t[""friends""].(type) {
        default:
            fmt.Printf(""unexpected type %T\n"", f) // %T prints whatever type t has
        case php_serialize.PhpArray:
            fmt.Println(f)
            fmt.Println(f[0])
            fmt.Println(f[1])
        }
    }
}
