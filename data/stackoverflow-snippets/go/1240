package main

import (
    "container/heap"
    "fmt"
)

//Recursive data structure may looks something like
type Group struct {
    Score   int
    Left    *Group
    Right   *Group
    Country string
}

//You can use slice to hold them organized in tree
type GrHeap []Group

//To implement your logic you can use stdlib/container/heap Heap interface
//you must implement Heap interface for your slice
func (h GrHeap) Len() int           { return len(h) }
func (h GrHeap) Less(i, j int) bool { return h[i].Score < h[j].Score }
func (h GrHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *GrHeap) Push(x interface{}) {
    // Push and Pop use pointer receivers because they modify the slice's length,
    // not just its contents.
    *h = append(*h, x.(Group))
}

func (h *GrHeap) Pop() interface{} {
    old := *h
    n := len(old)
    x := old[n-1]
    *h = old[0 : n-1]
    return x
}

func main() {
    //you most likely already have a map
    //anyway it will be handy to keep it for convenient access to individual country
    score := map[string]int{
        "Canada":  7,
        "US":      2,
        "Germany": 3,
        "Korea":   4,
    }
    //here we allocate heap
    gr := make(GrHeap, 0)
    //populate it from map
    for k, v := range score {
        g := Group{v, nil, nil, k}
        gr = append(gr, g)
    }
    //and initialize
    heap.Init(&gr)
    //and here we use heap magic to implement your logic
    for len(gr) > 2 {
        l := heap.Pop(&gr).(Group)
        r := heap.Pop(&gr).(Group)
        ng := Group{l.Score + r.Score, &l, &r, ""}
        heap.Push(&gr, ng)
    }
    fmt.Println(gr)
    fmt.Println(gr[1].Left)
    fmt.Println(gr[1].Right.Left)
//and you can see it works https://play.golang.org/p/gugJxJb7rr
}
