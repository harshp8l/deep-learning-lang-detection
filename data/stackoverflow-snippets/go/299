package main

import (
    ""crypto/tls""
    ""log""
    ""net/http""
    ""os/user""
    ""strconv""
    ""syscall""
)

import (
    //#include <unistd.h>
    //#include <errno.h>
    ""C""
)

func main() {
    cert, err := tls.LoadX509KeyPair(""cert.pem"", ""key.pem"")
    if err != nil {
        log.Fatalln(""Can't load certificates!"", err)
    }
    var tlsconf tls.Config
    tlsconf.Certificates = make([]tls.Certificate, 1)
    tlsconf.Certificates[0] = cert
    listener, err := tls.Listen(""tcp4"", ""127.0.0.1:445"", &tlsconf)
    if err != nil {
        log.Fatalln(""Error opening port:"", err)
    }
    if syscall.Getuid() == 0 {
        log.Println(""Running as root, downgrading to user www-data"")
        user, err := user.Lookup(""www-data"")
        if err != nil {
            log.Fatalln(""User not found or other error:"", err)
        }
        // TODO: Write error handling for int from string parsing
        uid, _ := strconv.ParseInt(user.Uid, 10, 32)
        gid, _ := strconv.ParseInt(user.Gid, 10, 32)
        cerr, errno := C.setgid(C.__gid_t(gid))
        if cerr != 0 {
            log.Fatalln(""Unable to set GID due to error:"", errno)
        }
        cerr, errno = C.setuid(C.__uid_t(uid))
        if cerr != 0 {
            log.Fatalln(""Unable to set UID due to error:"", errno)
        }
    }
    http.HandleFunc(""/"", func(w http.ResponseWriter, req *http.Request) {
        w.Write([]byte(""Hello, world!""))
    })
    err = http.Serve(listener, nil)
    log.Fatalln(err)
}
