struct MyResource {
  ContextCancel context.CancelFunc
  // NOTE: we no longer keep `window` etc. for interim variables
  //       that our caller doesn't really want and we only kept
  //       so we could close them --
  //       ContextCloser will take care of it!
  Tab *tab;
}

func NewMyResource(ctx context.Content) (*MyResource, error) {
  var err error
  ctx, ctxCancel := context.WithCancel(ctx)

  // This ensures resources are closed if this function fails
  defer func() {
    if err != nil {
        ctxCancel()
    }
  }()

  // We need to create a window in order to create a tab,
  // but we don't need to return it
  window, err := CreateWindow()
  if err != nil {
    return nil, err
  }
  ContextCloser(ctx, window)

  tab, err := CreateTab()
  if err != nil {
    return nil, err
  }
  ContextCloser(ctx, tab)

  return &MyResource{ContextCancel: ctxCancel, Tab: tab}, nil
}
