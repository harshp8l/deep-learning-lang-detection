package main

import (
    ""fmt""
)

var str = [...]string{
    ""world"",
    ""night"",
}

type Dependency interface {
    Get(val string) string
}

type dependency struct {
    i int
}

func (d *dependency) Get(fn func(int) string) string {
    d.i++
    d.i = d.i % len(str)

    return ""hello "" + fn(d.i)
}

func main() {
    d := dependency{}
    myfn := func(idx int) string { return str[idx] }
    fmt.Println(d.Get(myfn))
    fmt.Println(d.Get(myfn))
    fmt.Println(d.Get(myfn))

    m := mock{}
    fmt.Println(m.Get(myfn))
}

type mock struct {
}

func (m *mock) Get(fn func(int) string) string {
    i := 0
    j := (i + 1) % len(str)
    k := (j + 1) % len(str)

    return ""mocked "" + fn(i) + fn(j) + fn(k)
}
