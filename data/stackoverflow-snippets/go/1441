import (
    "fmt"
    "strings"
    "sync"
    "testing"

    "github.com/stretchr/testify/assert"
)

type elem struct {
    index int
    value interface{}
}

func feed(elems []interface{}) <-chan elem {
    result := make(chan elem)
    go func() {
        for k, v := range elems {
            e := elem{
                index: k,
                value: v,
            }
            result <- e
        }
        close(result)
    }()
    return result
}

func mapf(
    input <-chan elem,
    mapFunc func(elem) elem) <-chan elem {
    result := make(chan elem)
    go func() {
        for e := range input {
            eres := mapFunc(e)
            result <- eres
        }
        close(result)
    }()
    return result
}

// is blocking
func reducef(
    input <-chan elem,
    reduceFunc func([]interface{}) interface{}) interface{} {
    buffer := make(map[int]interface{})
    l := 0
    for v := range input {
        buffer[v.index] = v.value
        if v.index > l {
            l = v.index
        }
    }
    data := make([]interface{}, l+1)
    for k, v := range buffer {
        data[k] = v
    }

    return reduceFunc(data)
}

func fanOutIn(
    elemFeed <-chan elem,
    mapFunc func(elem) elem, mapCount int,
    reduceFunc func([]interface{}) interface{}) interface{} {
    MR := make(chan elem)
    wg := &sync.WaitGroup{}
    for i := 0; i < mapCount; i++ {
        mapResult := mapf(elemFeed, mapFunc)

        wg.Add(1)
        go func() {
            defer wg.Done()
            for v := range mapResult {
                MR <- v
            }
        }()
    }
    go func() {
        wg.Wait()
        close(MR)
    }()
    return reducef(MR, reduceFunc)
}

func Test01(t *testing.T) {
    elemFeed := feed([]interface{}{1, 2, 3})
    finalResult := fanOutIn(
        elemFeed,
        func(e elem) elem {
            return elem{
                index: e.index,
                value: fmt.Sprintf("[%v]", e.value),
            }
        },
        3,
        func(sl []interface{}) interface{} {
            strRes := make([]string, len(sl))
            for k, v := range sl {
                strRes[k] = v.(string)
            }
            return strings.Join(strRes, ":")
        })
    assert.Equal(t, "[1]:[2]:[3]", finalResult)
}
