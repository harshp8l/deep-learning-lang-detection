package main

import (
    ""fmt""
    ""sync""
    ""testing""
)

type fakeable interface {
    Hello()
}

type fakeFarmService struct {
    mu      sync.Mutex
    counter int
}

func (f *fakeFarmService) Hello() {
    f.mu.Lock()
    f.counter++
    f.mu.Unlock()
}

func helloCaller(callee fakeable) {
    callee.Hello()
}

func TestCallingTheHello(t *testing.T) {
    fakeSvc := &fakeFarmService{}
    helloCaller(fakeSvc)
    helloCaller(fakeSvc)

    // we expect that Hello method of fakeable was called 2 times
    fakeSvc.mu.Lock()
    defer fakeSvc.mu.Unlock()
    if c := fakeSvc.counter; c != 2 {
        t.Errorf(""unexpected call count, want 2, got %d"", c)
    }
}

func main() {
    TestCallingTheHello(&testing.T{})
}
