func fibonacciN(n int) uint64 {
    f := uint64(0)
    a, b := uint64(0), uint64(1)
    for i := 0; i < n; i++ {
        f, a, b = a, b, a+b
        if a > b {
            break
        }
    }
    return f
}

func Fibonacci(a, b string, n int) string {
    if n < 0 {
        n = 0
    }
    switch n {
    case 0:
        return """"
    case 1:
        return a
    case 2:
        return b
    }
    f := make([]byte, len(a)*int(fibonacciN(n-1))+len(b)*int(fibonacciN(n)))
    ab := a + b
    copy(f[len(f)-len(ab):], ab)
    for i := 4; i <= n; i++ {
        end := len(f) - (len(a)*int(fibonacciN(i-3)) + len(b)*int(fibonacciN(i-2)))
        start := len(f) - (len(a)*int(fibonacciN(i-1)) + len(b)*int(fibonacciN(i)))
        copy(f[start:end], f[end:])
    }
    return string(f)
}
