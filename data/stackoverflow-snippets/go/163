package main

import (
  "fmt"
  "log"
  "crypto/sha1"
  "reflect"
  "github.com/gocql/gocql"
)

func main() {
  cluster := gocql.NewCluster("127.0.0.1")
  cluster.Keyspace = "browser"
  cluster.Consistency = gocql.Quorum
  //cluster.ProtoVersion = 4
  //cluster.Authenticator = gocql.PasswordAuthenticator{
  //  Username: "cassandra",
  //  Password: "cassandra",
  //}

  session, _ := cluster.CreateSession()
  defer session.Close()

  text := "text before hashed"
  data := []byte(text)
  hash_value := sha1.Sum(data)
  hexa_string := fmt.Sprintf("0x%x", hash_value)

  fmt.Println("hash_value: ", hash_value)
  fmt.Println(" / string(hash_value): ", string(hash_value[:]))
  fmt.Println(" / hexa(hash_value): ", hexa_string)
  fmt.Println(reflect.TypeOf(hexa_string))

  // *** select  ***
  var column1 int
  //returned_hash := sha1.Sum(data)
  //var returned_hash *[20]uint8
  var returned_hash []byte

  if err := session.Query(`SELECT hash_value, column1 FROM sample WHERE hash_value=? LIMIT 1`,
  hash_value[:]).Consistency(gocql.One).Scan(&returned_hash, &column1); err != nil {
  //if err := session.Query(`SELECT hash_value, column1 FROM sample WHERE hash_value=0xd03dde1610d6df87a90619412ceda6e5320528dd`).Consistency(gocql.One).Scan(&returned_hash, &column1); err != nil {
      log.Fatal(err)
  }
  fmt.Printf("Returned: %#x %d \n", returned_hash, column1)

}
