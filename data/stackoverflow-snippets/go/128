package main

import (
    "fmt"
    "io/ioutil"
    "log"
    "net/http"
)

const newsTargetURL = "http://www.example.com/bd/news/home"

func main() {
    mux := http.NewServeMux()

    mux.Handle("/", http.HandlerFunc(GetNews))

    srv := &http.Server{
        Addr:    ":2222",
        Handler: mux,
    }
    // output error and quit if ListenAndServe fails
    log.Fatal(srv.ListenAndServe())
}

func GetNews(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodGet {
        http.Error(w, "only get allowed", http.StatusMethodNotAllowed)
        return
    }

    // build proxy url
    urlstr := fmt.Sprintf("%s?%s", newsTargetURL, r.URL.RawQuery)

    // request the proxy url
    resp, err := http.Get(urlstr)
    if err != nil {
        http.Error(w, fmt.Sprintf("error creating request to %s", urlstr), http.StatusInternalServerError)
        return
    }
    // make sure body gets closed when this function exits
    defer resp.Body.Close()

    // read entire response body
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        http.Error(w, "error reading response body", http.StatusInternalServerError)
        return
    }

    // write status code and body from proxy request into the answer
    w.WriteHeader(resp.StatusCode)
    w.Write(body)
}
