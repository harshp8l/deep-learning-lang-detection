func (m *Model) FindAll(result interface{}, c *Condition) error {
  stmt := PrepairStmt(m, c)
  rows, err := m.db.Query(stmt.selectParse(), c.arguments...)
  if err != nil {
    return err
  }
  defer rows.Close()

  // resultv is the result slice
  resultv := reflect.ValueOf(result).Elem()

  // rowt is the struct type
  rowt := resultv.Type().Elem()

  // allocate a value for the row
  rowv := reflect.New(rowt).Elem()

  // collect values for scan
  var values []interface{}
  for _, e := range m.columns {
      values = append(values, rowv.FieldByName(e.name).Addr().Interface())
  }

  for rows.Next() {

    err = rows.Scan(values...)
    if err != nil {
      return err
    }

    // Append struct to result slice. Because the struct
    // is copied in append, we can reuse the struct in 
    // this loop. 
    resultv.Set(reflect.Append(resultv, rowv))
  }
  return nil
}
