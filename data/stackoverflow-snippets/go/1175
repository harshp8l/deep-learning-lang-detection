package main

import (
    ""fmt""
    ""sort""
)

type Item struct {
    X    int
    Y    int
    otherProp    int
}

func (i Item) String() string {
    return fmt.Sprintf(""X: %d, Y: %d, otherProp: %d\n"", i.X, i.Y, i.otherProp)
}

// ByX implements sort.Interface for []Item based on
// the X field.
type ByX []Item

func (o ByX) Len() int           { return len(o) }
func (o ByX) Swap(i, j int)      { o[i], o[j] = o[j], o[i] }
func (o ByX) Less(i, j int) bool { 
    if o[i].X == o[j].X {
        return o[i].Y < o[j].Y
    } else {
        return o[i].X < o[j].X
    }
}

func main() {
    items := []Item{
        {1,2,3},
        {5,2,3},
        {3,2,3},
        {9,2,3},
        {1,1,3},
        {1,0,3},
    }

    fmt.Println(items)
    sort.Sort(ByX(items))
    fmt.Println(items)

}
