package main

import (
    "fmt"
    "os"
    "path/filepath"
    "sort"
    "strings"
    "time"
)

func isVideo(path string) bool {
    videos := []string{".mp4", ".m4v", ".h264"}
    ext := strings.ToLower(filepath.Ext(path))
    for _, video := range videos {
        if ext == video {
            return true
        }
    }
    return false
}

type modTimeInfo struct {
    path    string
    modTime time.Time
}

func walkModTime(root string) ([]modTimeInfo, error) {
    var infos []modTimeInfo
    err := filepath.Walk(
        root,
        func(path string, info os.FileInfo, err error) error {
            if err != nil {
                return err
            }
            if info.Mode().IsRegular() {
                path = filepath.Clean(path)
                if !isVideo(path) {
                    return nil
                }
                sep := string(filepath.Separator)
                dir := sep + `Videos` + sep
                path = strings.Replace(path, dir, sep, 1)
                infos = append(infos, modTimeInfo{
                    path:    path,
                    modTime: info.ModTime()},
                )
            }
            return nil
        },
    )
    if err != nil {
        return nil, err
    }
    return infos, nil
}

func sortModTime(infos []modTimeInfo) {
    sort.SliceStable(
        infos,
        func(i, j int) bool {
            return infos[i].modTime.Before(infos[j].modTime)
        },
    )
}

func fmtAge(d time.Duration) string {
    d = d.Round(time.Minute)
    h := d / time.Hour
    d -= h * time.Hour
    m := d / time.Minute
    return fmt.Sprintf("%02d:%02d", h, m)
}

func main() {
    root := `/home/peter/Videos` // Testing ...
    infos, err := walkModTime(root)
    if err != nil {
        fmt.Println(err)
        return
    }
    sortModTime(infos)
    now := time.Now()
    for _, info := range infos {
        age := fmtAge(now.Sub(info.modTime))
        fmt.Println("Age (H:M):", age, "File:", info.path)
    }
}
