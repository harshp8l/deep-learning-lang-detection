package main

import ""fmt""

type Foo struct {
    Id string
}

func (s *Foo) Fill(m map[string]string) {
    // If you want to build a general Fill you can build a base struct for Foo, Bar, etc. that works with reflect. 
    // Note that it will be slower than implementing the function here! Ask me if you want one I built recently.

    s.Id = m[""id""]
}

func (s *Foo) GetRow() interface{} {
    return nil
}

type Bar struct {
    Id string
}

func (s *Bar) Fill(m map[string]string) {
    s.Id = m[""id""]
}

func (s *Bar) GetRow() interface{} {
    return nil
}

type DataRow interface {
    Fill(m map[string]string)
    GetRow() interface{}
}

type Changeset struct {
    Table   string
    Type    string
    OldData map[string]string
    NewData map[string]string
}

type ChangesetTyped struct {
    Table   string
    Type    string
    OldData DataRow
    NewData DataRow
}

func doMap(c Changeset) ChangesetTyped {
    ct := ChangesetTyped{
        Table:   c.Table,
        Type:    c.Type,
        OldData: parseRow(c.Table, c.OldData),
    }

    if c.Type == ""UPDATE"" {
        ct.NewData = parseRow(c.Table, c.NewData)
    }

    return ct
}

func parseRow(table string, data map[string]string) (row DataRow) {
    if table == ""foo"" {
        row = &Foo{}
    } else if table == ""bar"" {
        row = &Bar{}
    }

    row.Fill(data)
    return
}

func main() {
    i := Changeset{
        Table:   ""foo"",
        Type:    ""INSERT"",
        NewData: map[string]string{""id"": ""1""},
    }

    u1 := Changeset{
        Table:   ""foo"",
        Type:    ""UPDATE"",
        OldData: map[string]string{""id"": ""20""},
        NewData: map[string]string{""id"": ""21""},
    }

    u2 := Changeset{
        Table:   ""bar"",
        Type:    ""UPDATE"",
        OldData: map[string]string{""id"": ""30""},
        NewData: map[string]string{""id"": ""31""},
    }

    m1 := doMap(i)
    m2 := doMap(u1)
    m3 := doMap(u2)

    fmt.Println(m1, m1.OldData)
    fmt.Println(m2, m2.OldData, m2.NewData)
    fmt.Println(m3, m3.OldData, m3.NewData)
}
