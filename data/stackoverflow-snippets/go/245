package main

import (
    ""encoding/json""
    ""fmt""
    ""reflect""
)

type MyInterface interface {
    Say() string
}

var MyInterfaceMap map[string]MyInterface

type MyStruct struct {
    Message string
}

func (myStruct *MyStruct) Say() string {
    return myStruct.Message
}

func main() {
    data := []byte(`{""greet"":{""Message"":""Hello""}}`)
    myStructMap := make(map[string]MyStruct)
    err := json.Unmarshal(data, &myStructMap)
    if err != nil {
        panic(err)
    }

    MyInterfaceMap = make(map[string]MyInterface)
    for k, v := range myStructMap {
        MyInterfaceMap[k] = &v
    }
    fmt.Println(reflect.TypeOf(MyInterfaceMap))
    fmt.Println(MyInterfaceMap)
}
