class _Defer {
    std::function<void()> __callback;
  public:
    _Defer(_Defer &&);
    ~_Defer();

    template <typename T>
        _Defer(T &&);
};

_Defer::_Defer(_Defer &&__that)
        : __callback{std::forward<std::function<void()>>(__that.__callback)} {
}

template <typename T>
_Defer::_Defer(T &&__callback)
        : __callback{
            static_cast<std::function<void()>>(std::forward<T>(__callback))
        } {
    static_assert(std::is_convertible<T, std::function<void()>>::value,
        "Cannot be convert to std::function<void()>.");
}

_Defer::~_Defer() {
    this->__callback();
}
