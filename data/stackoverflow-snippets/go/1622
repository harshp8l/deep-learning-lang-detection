package main

import(
""bufio""
""fmt""
""math""
""net/http""
""os""
""launchpad.net/goamz/aws""
""launchpad.net/goamz/s3""
)

func check(err error) {
    if err != nil {
     panic(err)
    } 
}

func main() {

fmt.Println(""Test"")

auth := aws.Auth{
    AccessKey: ""xxxxxxxxxxx"", // change this to yours
    SecretKey: ""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"",
}

client := s3.New(auth, aws.USWest2)

b := s3.Bucket{
    S3:   client,
    Name: ""some-bucket"",
}

fileToBeUploaded := ""testfile""
file, err := os.Open(fileToBeUploaded)
check(err)
defer file.Close()

fileInfo, _ := file.Stat()
fileSize := fileInfo.Size()
bytes := make([]byte, fileSize)

// read into buffer
buffer := bufio.NewReader(file)
_, err = buffer.Read(bytes)
check(err)
filetype := http.DetectContentType(bytes)

// set up for multipart upload
multi, err := b.InitMulti(""/""+fileToBeUploaded, filetype, s3.ACL(""bucket-owner-read""))
check(err)

const fileChunk = 5242880 // 5MB
totalPartsNum := uint64(math.Ceil(float64(fileSize) / float64(fileChunk)))
parts := []s3.Part{}

fmt.Println(""Uploading..."")

HeaderPart := strings.NewReader(string(bytes))

for i := uint64(0); i < totalPartsNum; i++ {

    partSize := int(math.Min(fileChunk, float64(fileSize-int64(i*fileChunk))))

    partBuffer := make([]byte, partSize)

    n , errx := io.ReadFull(HeaderPart, partBuffer)

    check(errx)

    part, err := multi.PutPart(int(i)+1, strings.NewReader(string(partBuffer))) // write to S3 bucket part by part

    check(err)

    fmt.Printf(""Processing %d part of %d and uploaded %d bytes.\n "", int(i), int(totalPartsNum), int(n))
    parts = append(parts, part)
}

err = multi.Complete(parts)
check(err)

fmt.Println(""\n\nPutPart upload completed"")
}
