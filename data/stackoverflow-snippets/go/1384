func genToPackages(e interface{}, n int) interface{} {
    t := reflect.TypeOf(e)
    if t.Kind() != reflect.Slice {
        log.Println("e has to be a slice")
    }
    v := reflect.ValueOf(e)

    packets := int(math.Ceil(float64(v.Len()) / float64(n)))
    p := reflect.MakeSlice(reflect.SliceOf(t), packets, packets)
    for i := 0; i < packets; i++ {
        s := reflect.MakeSlice(t, n, n)
        start := i * n
        for j := 0; j < n; j++ {
            s.Index(j).Set(v.Index(j+start))
        }

        p.Index(i).Set(s)
    }

    return p.Interface()
}
