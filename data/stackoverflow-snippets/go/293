package main

import (
    "encoding/json"
    "fmt"
    "reflect"
)

type UserCommand struct {
    User string
    Info string
}

type ProductCommand struct {
    Name     string
    Quantity int
}

func parseData(rawData []json.RawMessage, class interface{}) []interface{} {
    var parsed []interface{}
    for _, elem := range rawData {
        // Create a pointer to a new zero value of the same type as `class`.
        command := reflect.New(reflect.TypeOf(class))
        // Pass a pointer to the new value to `json.Unmarshal`.
        json.Unmarshal(elem, command.Interface())
        // Insert the pointed-to new value into the output slice.
        parsed = append(parsed, command.Elem().Interface())
    }
    return parsed
}

func main() {
    data := []json.RawMessage{
        json.RawMessage(`{"User":"u1","Info":"i1"}`),
        json.RawMessage(`{"User":"u2","Info":"i2"}`),
    }
    parsed := parseData(data, UserCommand{})
    fmt.Printf("%#v\n", parsed)

    data = []json.RawMessage{
        json.RawMessage(`{"Name":"n1","Quantity":1}`),
        json.RawMessage(`{"Name":"n2","Quantity":2}`),
    }
    parsed = parseData(data, ProductCommand{})
    fmt.Printf("%#v\n", parsed)
}
