type payload struct {
    WhateverElse interface{}
    Error        error
}

func TestSite(t *testing.T) {
    ctx := context.Background()
    ctx, cancel := context.WithCancel(ctx)
    defer cancel()
    // I'm using the Bone router in this example but can be replaced with most routers
    myRouter := bone.New()
    myRouter.GetFunc("/foo/:bar", routes.WipeCache)
    myRouter.NotFoundFunc(routes.NotFound)
    n := negroni.New()
    n.UseHandler(wrappers.DefaultHeaders(myRouter))
    // start an instance of the server on port 8080
    // to run different tests in different functions, change the port
    srv := &http.Server{Addr: ":8080", Handler: n}
    on := make(chan struct{}, 1)
    go func(on chan struct{}) {
        on <- struct{}{}
        log.Fatal(srv.ListenAndServe())
    }(on)
    // shutdown the server when i'm done
    srv.Shutdown(ctx)
    // the channel on is not really needed, but I like to have it to make sure srv.ListenAndServe() has had enough time to warm up before I make a requests. So i block just a tiny bit.
    <-on

    // create the client requests to test the server
    client := &http.Client{
        Timeout: 1 * time.Second,
    }

    // Test logic
    req, err := http.NewRequest("GET", "http://localhost:8080/foo/bar", nil)
    if err != nil {
        t.Errorf("An error occurred. %v", err)
    }
    resp, err := client.Do(req)
    if err != nil {
        t.Errorf("An error occurred. %v", err)
    }
    defer resp.Body.Close()
    ctx.Done()

    if status := resp.StatusCode; status != http.StatusOK {
        t.Errorf("Status code differs. Expected %d .\n Got %d instead", http.StatusOK, status)
    }
    var data payload
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        t.Errorf("An error occurred. %v", err)
    }
    json.Unmarshal(body, &data)

    if data.Error != nil {
        t.Errorf("An error occurred. %v", err)
    }
}
