package main

import "fmt"

type Node struct {
    neighbors []*Edge
    visited   bool
    name      string
}

type Edge struct {
    neighbor *Node
}

type Graph struct {
    nodes []*Node
}

func (g *Graph) addNode(node *Node) {
    g.nodes = append(g.nodes, node)
}

func (n *Node) addEdge(neighbor *Node) {
    edge := &Edge{
        neighbor: neighbor,
    }
    n.neighbors = append(n.neighbors, edge)
}

func (g Graph) String() {
    for _, node := range g.nodes {
        //fmt.Printf("nodename: %v", node.name)
        fmt.Printf("number of neighbors: %d\n", len(node.neighbors))
        if len(node.neighbors) > 0 {
            fmt.Printf("node: %v, edges: ", node.name)
            for _, e := range node.neighbors {
                fmt.Printf("%q", e.neighbor.name)
            }
            fmt.Println()
        }
    }
}

func main() {
    graph := &Graph{}
    n1 := &Node{name: "abc"}
    n2 := &Node{name: "def"}
    graph.addNode(n1)
    graph.addNode(n2)
    n1.addEdge(n2)

    graph.String()
}
