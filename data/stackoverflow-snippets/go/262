package main

import (
    ""fmt""
    ""sort""
)

type Log struct {
    Id       []string
    Name     []string
    Priority int // value could be 1, 2, 3
    Message  string
}

type Entry struct {
    key   string
    value *Log
}

type byPriority []Entry

func (d byPriority) Len() int {
    return len(d)
}
func (d byPriority) Less(i, j int) bool {
    return d[i].value.Priority < d[j].value.Priority
}
func (d byPriority) Swap(i, j int) {
    d[i], d[j] = d[j], d[i]
}

func printSorted(detail map[string]*Log) {
    // Copy entries into a slice.
    slice := make(byPriority, 0, len(detail))
    for key, value := range detail {
        slice = append(slice, Entry{key, value})
    }

    // Sort the slice.
    sort.Sort(slice)

    // Iterate and print the entries in sorted order.
    for _, entry := range slice {
        fmt.Printf(""%s : %v\n"", entry.key, entry.value)
    }
}

func main() {
    detail := map[string]*Log{
        ""Z"": &Log{[]string{""ba60""}, []string{""XYZ""}, 3, ""I am the boss""},
        ""B"": &Log{[]string{""ca50""}, []string{""ABC""}, 2, ""I am the Junior""},
        ""U"": &Log{[]string{""zc20""}, []string{""PQR""}, 1, ""I am the Newbie""},
    }

    printSorted(detail)
}
