package main

import (
    ""fmt""
    ""sync""
)

type SafeCounter struct {
    lock      sync.Mutex
    count     int
    enabled   bool
    NextValue func(int) int
}

const maxCount = 10

func (c *SafeCounter) Count() int {
    return c.count
}

func (c *SafeCounter) Increment() {
    c.lock.Lock()
    if c.enabled {
        c.count = c.NextValue(c.count)
    }
    c.lock.Unlock()
}

func (c *SafeCounter) SetEnabled(enabled bool) {
    c.lock.Lock()
    c.enabled = enabled
    if !enabled {
        c.count = 0
    }
    c.lock.Unlock()
}

func main() {
    var counter SafeCounter
    counter.SetEnabled(true)
    counter.NextValue = func(value int) int {
        if counter.Count() > maxCount {
            // Safe counter doesn't expect this here!
            // The program will panic in SetEnabled
            counter.SetEnabled(false)
        }
        return value + 1
    }
    for i := 0; i < 100; i++ {
        doAction()
        counter.Increment()
    }
    fmt.Println(counter.Count())
}

func doAction() {
    // some action
}
