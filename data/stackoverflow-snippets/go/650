package main

import (
    "fmt"
    "io"
    "log"
    "net/http"
    "os"
    "sync"
)

func main() {

    var urls []string   
    // var smallImage = "https://s3.amazonaws.com/golangplayground/116kb.jpeg" //116kb
    var largeImage = "https://s3.amazonaws.com/golangplayground/SampleJPGImage_500kbmb.jpg" //500kb
    for i := 0; i < 150; i++ {
        urls = append(urls, largeImage)
    }

    var inc = 0;
    for x:=0; x < len(urls)/5; x++ {
        var wg sync.WaitGroup       
        for y:=0; y<5; y++ {
            wg.Add(1)           
            go saveResourceFromURLToDisk(urls[x*y], "./foo", &wg, inc)
            inc += 1
        }
        wg.Wait()                                   
    }

    fmt.Println("done.")
}

func saveResourceFromURLToDisk(url string, writeTo string, wg *sync.WaitGroup, inc int) error {
    defer wg.Done()

    response, err := http.Get(url)
    if err != nil {
        log.Fatal(err)
        return err
    }
    defer response.Body.Close()

    localPath := fmt.Sprintf("%s/%d", writeTo, inc)
    file, err := os.Create(localPath)
    if err != nil {
        log.Fatal(err)
        return err
    }
    defer file.Close()

    _, err = io.Copy(file, response.Body)
    if err != nil {
        log.Fatal(err)
        return err
    }

    fmt.Println(localPath)
    return nil
}
