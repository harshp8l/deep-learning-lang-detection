func mainReturn() interface{} {
    bigqueryService, err := getBigqueryService() ; if(err != nil) {return ""ERROR""}
    err2 := getProjects(bigqueryService)         ; if(err2 != nil) {return ""ERROR""}
    return ""OK""
}

func getProjects(bigqueryService *bigquery.Service)(error) {
    var buf bytes.Buffer
    var pagetoken string = """"
    ind := 0
    for {
        call := bigqueryService.Projects.List()
        if len(pagetoken) > 0 {call = call.PageToken(pagetoken)}

        list, err := call.Do() ; if err != nil {return err}

        if len(pagetoken) == 0 {
            xFprintf(&buf, ""TotalItems: %v\n"", list.TotalItems)
        }

        for _, project := range list.Projects {
            xFprintf(&buf, ""========= Projects %v ==============\n"", ind)
            xFprintf(&buf, ""Id: %v\n"", project.Id)
            xFprintf(&buf, ""Kind: %v\n"", project.Kind)
            project := project.Id
            del := strings.LastIndex(project, ""."")
            if del != -1 {project = project[del+1:]}
            ind++;
        }

        pagetoken = list.NextPageToken ; if len(pagetoken) == 0 {break}
    }

    xPrintln(buf.String())
    return nil
}
