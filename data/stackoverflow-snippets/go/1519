package main

import (
    "fmt"
    "net/url"
    "reflect"
    "time"
)

type Media struct {
    ID                         uint
    Key                        string
    RecordKey                  string
    RecordID                   string
    SystemMediaKey             string
    MediaObjectID              string
    ChangedByID                string
    ChangedByKey               string
    MediaCategory              string
    MimeType                   string
    ShortDescription           string
    LongDescription            string
    EntryTimestamp             time.Time
    ModificationTimestamp      time.Time
    DeletedAtTimestamp         *time.Time
    MediaModificationTimestamp time.Time
    MediaURL                   string
    MediaHTML                  string
    Order                      int
    Group                      string
    Width                      int
    Height                     int
    ImageSize                  string
    ResourceName               string
    ClassName                  string
    Permission                 *string
    MediaStatus                string
}

func main() {

    testUrl := "www.example.com/test?MimeType=themimetype&Key=thekey&Permission=admin"

    u, err := url.Parse(testUrl)
    if err != nil {
        fmt.Println(err)
        return
    }

    params := u.Query()

    media := &Media{}

    val := reflect.ValueOf(media)

    for i := 0; i < val.Elem().NumField(); i++ {
        // get the reflect.StructField so we can get the Name
        f := val.Elem().Type().Field(i)

        // check if URL.Values contains the field
        if v := params.Get(f.Name); v != "" {
            // get the reflect.Value associated with the Field
            field := val.Elem().FieldByName(f.Name)

            kind := field.Kind()

            // you must switch for each reflect.Kind (associated with the type in your struct)
            // so you know which Set... method to call
            switch kind {
            case reflect.String:
                field.SetString(v)
            case reflect.Ptr:
                // pointers are a special case that must be handled manually unfortunately.
                // because they default to nil, calling Elem() won't reveal the underlying type
                // so you must simply string match the struct values that are pointers.
                switch f.Name {
                case "Permission":
                    newVal := reflect.New(reflect.TypeOf(v))
                    newVal.Elem().SetString(v)
                    field.Set(newVal.Elem().Addr())
                case "DeletedAtTimestamp":
                }
            }

        }
    }

    fmt.Printf("%#v\n", media)
    fmt.Println(*media.Permission)
}
