type NamePrinter interface {
    print()
}

type NamePrinterWithoutGreeting struct {
    name string
}

func (p *NamePrinterWithoutGreeting) print() {
    fmt.Println(p.name)
}

type NamePrinterWithGreeting struct {
    name string
}

func (p *NamePrinterWithGreeting) print() {
    fmt.Println(""Hello, "", p.name)
}

type MyInt int

func (i MyInt) print() {
    fmt.Printf(""Hello, %d\n"", i)
}

type MyFunc func() string

func (f MyFunc) print() {
    fmt.Println(""Hello,"", f())
}
func main() {
    var a NamePrinter = &NamePrinterWithoutGreeting{""joe""}
    var b NamePrinter = &NamePrinterWithGreeting{""joe""}
    var i NamePrinter = MyInt(2345)
    var f NamePrinter = MyFunc(func() string { return ""funk"" })
    a.print()
    b.print()
    i.print()
    f.print()
}
