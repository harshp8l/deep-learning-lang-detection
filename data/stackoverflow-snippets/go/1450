package main

import (
    ""fmt""
    ""sync""
    ""time""
)

// OnceAtATime protects function from being executed simultaneously.
// Example:
//    func myFunc() { time.Sleep(10*time.Second) }
//    func main() {
//        once := OnceAtATime{}
//        once.Do(myFunc)
//        once.Do(myFunc) // not executed
//    }
type OnceAtATime struct {
    m        sync.Mutex
    executed bool
}

func (o *OnceAtATime) Do(f func()) {
    o.m.Lock()
    if o.executed {
        o.m.Unlock()
        return
    }
    o.executed = true
    o.m.Unlock()
    f()
    o.m.Lock()
    o.executed = false
    o.m.Unlock()
}

// Proof of concept
func f(m int, done chan<- struct{}) {
    for i := 0; i < 10; i++ {
        fmt.Printf(""%d: %d\n"", m, i)
        time.Sleep(250 * time.Millisecond)
    }
    close(done)
}

func main() {
    done := make(chan struct{})
    once := OnceAtATime{}

    go once.Do(func() { f(1, done) })
    go once.Do(func() { f(2, done) })
    <-done
    done = make(chan struct{})
    go once.Do(func() { f(3, done) })
    <-done

}
