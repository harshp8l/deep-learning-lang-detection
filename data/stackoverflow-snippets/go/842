package main

import (
    ""bytes""
    ""golang.org/x/crypto/ssh""
    ""io/ioutil""
    ""log""
)

func main() {
    authorizedKeysBytes, _ := ioutil.ReadFile(""/home/wooh/.ssh/signed-cert.pub"")
    pcert, _, _, _, err := ssh.ParseAuthorizedKey(authorizedKeysBytes)

    privkeyBytes, _ := ioutil.ReadFile(""/home/wooh/.ssh/id_rsa"")
    upkey, err := ssh.ParseRawPrivateKey(privkeyBytes)

    if err != nil {
        log.Printf(""Failed to load authorized_keys, err: %v"", err)
    }

    usigner, err := ssh.NewSignerFromKey(upkey)
    if err != nil {
        log.Printf(""Failed to create new signer, err: %v"", err)
    }
    log.Printf(""signer: %v"", usigner)

    ucertSigner, err := ssh.NewCertSigner(pcert.(*ssh.Certificate), usigner)

    if err != nil {
        log.Printf(""Failed to create new signer, err: %v"", err)
    }

    sshConfig := &ssh.ClientConfig{
        User:            ""wooh"",
        Auth:            []ssh.AuthMethod{ssh.PublicKeys(ucertSigner)},
        HostKeyCallback: ssh.InsecureIgnoreHostKey(),
    }

    client, err := ssh.Dial(""tcp"", ""127.0.0.1:22"", sshConfig)

    if err != nil {
        log.Fatalf(""Failed to dial, err: %v"", err)
    }

    session, err := client.NewSession()
    if err != nil {
        log.Fatal(""Failed to create session: "", err)
    }
    defer session.Close()

    var b bytes.Buffer
    session.Stdout = &b
    if err := session.Run(""/usr/bin/whoami""); err != nil {
        log.Fatal(""Failed to run: "" + err.Error())
    }
    log.Println(b.String())
}
