type ChildParentsData struct {
        Id      bson.ObjectId `json:""_id,omitempty"" bson:""_id,omitempty""`
        Trashed bool          `json:""trashed"" bson:""trashed""`
}
var tree []ChildParentsData

pipeline := []bson.M{
    {""$match"": bson.M{""fid"": bson.ObjectIdHex(""59ad187a6b9600120bd03a53"")}},
    {""$unwind"": ""$ch""},
    {""$match"": bson.M{""ch.trashed"": false}},
    {""$replaceRoot"": bson.M{""newRoot"": ""$ch""}}}

err = Connection.Session.DB(""cctv_storage"").C(""tree"").Pipe(pipeline).All(&tree)

if err != nil {
    fmt.Printf(""error: %v"", err)
    os.Exit(0)
}
fmt.Printf(""doc: %v"", tree)
