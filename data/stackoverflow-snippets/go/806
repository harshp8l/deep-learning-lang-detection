func main() {
        cli, err := client.NewEnvClient()
        if err != nil {
                panic(err)
        }
        defer cli.Close()

        ctx := context.Background()

        _, err = cli.ImagePull(ctx, ""alpine"", types.ImagePullOptions{})
        if err != nil {
                panic(err)

        }

        containerConfig := &container.Config{
                Image: ""alpine"",
                Cmd:   []string{""sleep"", ""1h""},
        }

        // mounted file
        h := container.HostConfig{
                Binds: []string{""/etc/secret.txt:/etc/secret.txt""},
        }

        resp, err := cli.ContainerCreate(ctx, containerConfig, &h, nil, """")
        if err != nil {
                panic(err)
        }

        rc, _, err := cli.CopyFromContainer(context.Background(), resp.ID, ""/etc/secret.txt"")
        if err != nil {
                fmt.Println(err.Error())
        }

        tr := tar.NewReader(rc)
        var b []byte
        for {
                hdr, err := tr.Next()
                if err == io.EOF {
                        break
                }
                if err != nil {
                        break
                }
                if hdr.Name == ""secret.txt"" {
                        b, err = ioutil.ReadAll(tr)
                        break
                }
                fmt.Println(""Name:"", hdr.Name)
                if err != nil {
                        break
                }
        }
        if err != nil {
                fmt.Println(err.Error())
        }
        rc.Close()
        fmt.Printf(""%q (len=%d)\n"", b, len(string(b)))
}
