package main

import (
    ""context""
    ""fmt""
    ""time""
)

func interruptable_call(sleep time.Duration) <-chan time.Time {
    fmt.Println(""sleeping for "", sleep*time.Second)
    time.Sleep(sleep * time.Second)
    return time.After(0 * time.Second)
}

func A(ctx context.Context) int {
    for {
        select {
        case <-ctx.Done():
            fmt.Println(""func done"")
            return 1
        case <-interruptable_call(2):
            fmt.Println(""blocking"")
        case <-interruptable_call(3):
            fmt.Println(""blocking"")
        case <-interruptable_call(4):
            fmt.Println(""blocking"")
        case <-interruptable_call(5):
            fmt.Println(""blocking"")
        }
    }
    return 0
}

func main() {
    ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
    defer cancel()
    fmt.Println(""go A"")
    go A(ctx)
    fmt.Println(""go A done"")
    select {
    case <-ctx.Done():
        fmt.Println(""main done"")
        break
    }
}
