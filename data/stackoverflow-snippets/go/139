res := []interface{}{
    1,
    "row2",
    struct { str string } { str: "what the heck???" },
}
// one way of reflecting
for i, v := range res {
    if r, ok := v.(int); ok {
        fmt.Printf("%d: You have an int: %d\n", i, r)
    } else if r, ok := v.(string); ok {
        fmt.Printf("%d: You have a string: %q\n", i, r)
    } else {
        fmt.Printf("%d: Have no idea what this type is: %T\n", i, v)
    }
}
// a cleaner way of reflecting (in my opinion)
for i, v := range res {
    switch r := v.(type) {
    case int:
        fmt.Printf("%d: You have an int: %d\n", i, r)
    case string:
        fmt.Printf("%d: You have a string: %q\n", i, r)
    default:
        fmt.Printf("%d: Have no idea what this type is: %T\n", i, v)
    }
} 
