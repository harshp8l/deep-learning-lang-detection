package main

import "fmt"
import "reflect"

type myinteface interface {
    DoSomething(int) string
}

type myfunc func(myinteface)

type impl struct{}

func (im *impl) DoSomething(int) string {
    return "fsdfsd"
}

//Does the function passed as `i` take a type that implements the `myinteface` type as first parameter
func do(i interface{}) {
    functionType := reflect.TypeOf(i)
    if functionType.Kind() != reflect.Func {
        fmt.Printf("(%s) is not a function", functionType)
    }
    ourInterfaceType := reflect.TypeOf((*myinteface)(nil)).Elem()
    if functionType.In(0).Implements(ourInterfaceType) {
        fmt.Printf("(%s)'s first paramter implements the `myinteface` interface\n", functionType)
    } else {
        fmt.Printf("(%s)'s first paramter does not implement the `myinteface` interface\n", functionType)
    }
}

func test(im *impl) {}
func test2(im impl) {}

func main() {
    do(test)
    do(test2)
}
