package main

import (
    "encoding/json"
    "errors"
    "fmt"
    "log"
)

type Timestamp struct {
    Zero []string
    One  []float32
    Two  []float32
}

func (t *Timestamp) UnmarshalJSON(b []byte) error {
    var arr [][3]interface{}
    err := json.Unmarshal(b, &arr)
    if err != nil {
        return nil
    }
    t.Zero = nil
    t.One = nil
    t.Two = nil
    for _, v := range arr {
        if len(v) != 3 {
            return errors.New("invalid json")
        }
        if s, ok := v[0].(string); ok {
            t.Zero = append(t.Zero, s)
        }
        if f, ok := v[1].(float64); ok {
            t.One = append(t.One, float32(f))
        }
        if f, ok := v[2].(float64); ok {
            t.Two = append(t.Two, float32(f))
        }
    }
    return nil
}

func (t *Timestamp) MarshalJSON() ([]byte, error) {
    var arr [][3]interface{}
    var max int
    if max < len(t.Zero) {
        max = len(t.Zero)
    }
    if max < len(t.One) {
        max = len(t.One)
    }
    if max < len(t.Two) {
        max = len(t.Two)
    }
    for i := 0; i < max; i++ {
        var v [3]interface{}
        if i < len(t.Zero) {
            v[0] = t.Zero[i]
        }
        if i < len(t.One) {
            v[1] = t.One[i]
        }
        if i < len(t.Two) {
            v[2] = t.Two[i]
        }
        arr = append(arr, v)
    }
    return json.Marshal(arr)
}

const j = `[["my",257.14,257.24],["txt", 121.11, 65.555]]`

func main() {
    var ts Timestamp
    err := json.Unmarshal([]byte(j), &ts)
    if err != nil {
        log.Fatal(err)
    }
    b, err := json.Marshal(&ts)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(string(b))
}
