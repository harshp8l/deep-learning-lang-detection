package main 

import (
    "encoding/binary"
    "fmt"
    "net"
    "os"
    "syscall"
    "unsafe"
)

var (
    kernel32, _     = syscall.LoadLibrary("kernel32")
    libIphlpapi, _  = syscall.LoadLibrary("iphlpapi")
    pGetUDPTable, _ = syscall.GetProcAddress(libIphlpapi, "GetUdpTable")
)

func GetUdpTable() ([]net.UDPAddr, error) {
    var dwSize uint32
    r1, _, e1 := syscall.Syscall(
        pGetUDPTable,
        3,
        uintptr(0),
        uintptr(unsafe.Pointer(&dwSize)),
        0,
    )
    const retErrInsufficientBuffer = 122
    if r1 != retErrInsufficientBuffer {
        err := fmt.Errorf("GetUdpTable() failed with return values", r1, e1)
        return nil, err
    }
    buf := make([]byte, dwSize)
    r1, _, e1 = syscall.Syscall(
        pGetUDPTable,
        3,
        uintptr(unsafe.Pointer(&buf[0])),
        uintptr(unsafe.Pointer(&dwSize)),
        0,
    )
    if r1 != 0 {
        err := fmt.Errorf("GetUdpTable() failed with return values", r1, e1)
        return nil, err
    }

    // MIB_UDPROW structure
    // https://msdn.microsoft.com/en-us/library/windows/desktop/aa366926.aspx
    type MIB_UDPROW struct {
        dwLocalAddr uint32
        dwLocalPort uint32 // network byte order
    }

    // MIB_UDPTABLE structure
    // https://msdn.microsoft.com/en-us/library/windows/desktop/aa366930.aspx
    const ANY_SIZE = (1 << 30) / unsafe.Sizeof(MIB_UDPROW{})
    type MIB_UDPTABLE struct {
        dwNumEntries uint32
        table        [ANY_SIZE]MIB_UDPROW
    }

    p_MIB_UDPTABLE := (*MIB_UDPTABLE)(unsafe.Pointer(&buf[0]))
    table := p_MIB_UDPTABLE.table[:p_MIB_UDPTABLE.dwNumEntries]
    udps := make([]net.UDPAddr, len(table))
    for i, row := range table {
        var udp net.UDPAddr
        udp.IP = make([]byte, 4)
        binary.LittleEndian.PutUint32(udp.IP, row.dwLocalAddr)
        udp.Port = int(uint16(row.dwLocalPort>>8 | row.dwLocalPort<<8))
        udps[i] = udp
    }
    return udps, nil
}

func main() {
    udpTable, err := GetUdpTable()
    if err != nil {
        fmt.Fprintln(os.Stderr, err)
        return
    }
    fmt.Println(len(udpTable))
    for _, udpAddr := range udpTable {
        fmt.Println(udpAddr.IP, udpAddr.Port)
    }
}
