replaceNilWithNegativeOne(obj interface{}) (err error) {
    v := reflect.ValueOf(obj).Elem()
    t := v.Type()
    for i := 0; i < t.NumField(); i++ {
        if grib, ok := t.Field(i).Tag.Lookup("grib"); ok {
            if strings.Contains(grib, "foo") {
                fv := v.Field(i)
                if fv.Kind() != reflect.Ptr {
                    // do some stuff
                    break
                }
                if fv.IsNil() {
                    iv := int32(-1)
                    fv.Set(reflect.ValueOf(&iv))
                    continue
                }
            }
        }
    }
    return nil
}
