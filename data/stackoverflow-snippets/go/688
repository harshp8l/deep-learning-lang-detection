package hello

import (
    "bytes"
    "fmt"
    "html/template"
    "reflect"
    "testing"
)

func TestData(t *testing.T) {
    tpl, err := template.New("ok").Parse("{{.MyFace.Ok}}")
    if err != nil {
        panic(err)
    }
    buf := bytes.NewBuffer(nil)
    myTyp := reflect.StructOf([]reflect.StructField{
        {Name: "MyFace", Type: reflect.TypeOf((*MyFace)(nil)).Elem(), Index: []int{0}, Anonymous: true},
    })
    fmt.Println(myTyp)
    myVal := reflect.New(myTyp)
    myVal.Elem().Field(0).Set(reflect.New(reflect.TypeOf(testFace{})).Elem())
    err = tpl.Execute(buf, myVal.Elem()) // unexpected fault address
    //err = tpl.Execute(buf, &testDat{MyFace: MyFace(&testFace{})}) // works as expected
    if err != nil {
        panic(err)
    }
    fmt.Println(buf.String())
}

type testData struct {
    MyFace
}
type testFace struct {
    i int
}

func (testFace) Ok() string {
    return "All right"
}

type MyFace interface {
    Ok() string
}
