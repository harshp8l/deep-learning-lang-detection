package main

import (
    "html/template"
    "io/ioutil"
    "net/http"
    "path/filepath"
    "strings"
)

var tPath = "./temps/"
var dPath = "./data/"

var templateDirs = []string{"temps", "data"}
var templates *template.Template

func getTemplates() (templates *template.Template, err error) {
    var allFiles []string
    for _, dir := range templateDirs {
        files2, _ := ioutil.ReadDir(dir)
        for _, file := range files2 {
            filename := file.Name()
            if strings.HasSuffix(filename, ".html") {
                filePath := filepath.Join(dir, filename)
                allFiles = append(allFiles, filePath)
            }
        }
    }

    templates, err = template.New("").ParseFiles(allFiles...)
    return
}

func init() {
    templates, _ = getTemplates()
}

func rootHandler(wr http.ResponseWriter, req *http.Request) {
    title := "home"

    data := map[string]interface{}{
        "title":  title,
        "header": "My Header",
        "footer": "My Footer",
    }

    err := templates.ExecuteTemplate(wr, "homeHTML", data)

    if err != nil {
        http.Error(wr, err.Error(), http.StatusInternalServerError)
    }
}

func main() {
    http.HandleFunc("/", rootHandler)
    http.ListenAndServe(":8080", nil)
}
