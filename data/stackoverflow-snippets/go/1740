func mwLogging(next MiddlewareFunc) MiddlewareFunc {
    return func(c *Context) {
        c.Ctx.Trace("h.http.req.start", "Request start",
            log.String("method", c.Method),
            log.String("path", c.Path),
            log.String("user_agent", c.Req.Header.Get("User-Agent")),
        )

        next(c)

        c.Ctx.Trace("h.http.req.end", "Request end",
            log.Int("status", c.Res.Code()),
            log.Duration("duration", time.Since(c.StartTime)),
        )
    }
}

func mwAuth(next MiddlewareFunc) MiddlewareFunc {
    return func(c *http.Context) {
        // Just an example
        session, err := Auth(c.Req.Header.Get("Authorization"))
        if err != nil {
            c.Ctx.Warning("http.auth.error", "Authentication failed", log.Error(err))
            c.Res.WriteHeader(http.StatusUnauthorized)
            return
        }

        // You could store the session in context here                
        context.WithValue(ctx, "session", session)
        next(c)
    }
}
