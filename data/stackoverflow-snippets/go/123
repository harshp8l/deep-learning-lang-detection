package sandbox

import (
    ""encoding/json""
    ""errors""
    ""reflect""
    ""strings""
    ""testing""
)

type Person struct {
    Name string
    City string
}

func (p *Person) UnmarshalJSON(data []byte) error {
    var m map[string]interface{}
    err := json.Unmarshal(data, &m)
    if err != nil {
        return err
    }

    v := reflect.ValueOf(p).Elem()
    t := v.Type()

    var missing []string
    for i := 0; i < t.NumField(); i++ {
        field := t.Field(i)
        val, ok := m[field.Name]
        delete(m, field.Name)
        if !ok {
            missing = append(missing, field.Name)
            continue
        }

        switch field.Type.Kind() {
        // TODO: if the field is an integer you need to transform the val from float
        default:
            v.Field(i).Set(reflect.ValueOf(val))
        }
    }

    if len(missing) > 0 {
        return errors.New(""missing fields: "" + strings.Join(missing, "", ""))
    }

    if len(m) > 0 {
        extra := make([]string, 0, len(m))
        for field := range m {
            extra = append(extra, field)
        }
        // TODO: consider sorting the output to get deterministic errors:
        // sort.Strings(extra)
        return errors.New(""unknown fields: "" + strings.Join(extra, "", ""))
    }

    return nil
}

func TestJSONDecoder(t *testing.T) {
    cases := map[string]struct {
        in       string
        err      string
        expected Person
    }{
        ""Empty object"": {
            in:       `{}`,
            err:      ""missing fields: Name, City"",
            expected: Person{},
        },
        ""Name missing"": {
            in:       `{""City"": ""Berlin""}`,
            err:      ""missing fields: Name"",
            expected: Person{City: ""Berlin""},
        },
        ""Age missing"": {
            in:       `{""Name"": ""Friedrich""}`,
            err:      ""missing fields: City"",
            expected: Person{Name: ""Friedrich""},
        },
        ""Unknown field"": {
            in:       `{""Name"": ""Friedrich"", ""City"": ""Berlin"", ""Test"": true}`,
            err:      ""unknown fields: Test"",
            expected: Person{Name: ""Friedrich"", City: ""Berlin""},
        },
        ""OK"": {
            in:       `{""Name"": ""Friedrich"", ""City"": ""Berlin""}`,
            expected: Person{Name: ""Friedrich"", City: ""Berlin""},
        },
    }

    for name, c := range cases {
        t.Run(name, func(t *testing.T) {
            var actual Person
            r := strings.NewReader(c.in)
            err := json.NewDecoder(r).Decode(&actual)
            switch {
            case err != nil && c.err == """":
                t.Errorf(""Expected no error but go %v"", err)
            case err == nil && c.err != """":
                t.Errorf(""Did not return expected error %v"", c.err)
            case err != nil && err.Error() != c.err:
                t.Errorf(""Expected error %q but got %v"", c.err, err)
            }

            if !reflect.DeepEqual(c.expected, actual) {
                t.Errorf(""\nWant: %+v\nGot:  %+v"", c.expected, actual)
            }
        })
    }
}
