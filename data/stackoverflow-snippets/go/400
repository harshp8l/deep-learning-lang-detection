package main

import (
    "encoding/json"
    "gopkg.in/mgo.v2"
    "log"
    // "gopkg.in/mgo.v2/bson"
)

var (
    mgoSession     *mgo.Session
)

type UserDAO struct{
    session   *mgo.Session
}

type User struct {
    Username string `json:"username"`
    Password string  `json:"password"`
    Email string `json:"email"`
}

func GetMongoSession() *mgo.Session {
    if mgoSession == nil {
        var err error
        mgoSession, err = mgo.Dial("localhost")
        mgoSession.SetMode(mgo.Monotonic, true)

        if err != nil {
            log.Fatal("Failed to start the Mongo session.")
        }
    }
    return mgoSession.Clone()
}

func (dao *UserDAO) CreateUser(u *User) (*User, error) {
    //return errors.New("Not implemented")

    // Get "users" collection

    session := GetMongoSession()
    // log.Println(session)

    c := session.DB("poll").C("user")

    defer session.Close()

    //u.Id = bson.NewObjectId()
    err :=  c.Insert(u)

    if err != nil { 
        return nil, err
    }

    return u, nil
}

func main(){
    // this data will come from postman in your case
    jsonStr := []byte(`{
            "username":"uname",
            "password":"pass",
            "email":"test@mail.com"
        }
    `)

    var user User
    err  := json.Unmarshal(jsonStr, &user)
    if err != nil{
        log.Println(err)
    }

    var dao *UserDAO

    dao.CreateUser(&user)
}
