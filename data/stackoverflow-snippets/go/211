package main

import (
    "bytes"
    "testing"
)

var benchN = 20

func fibonacciN(n int) uint64 {
    f := uint64(0)
    a, b := uint64(0), uint64(1)
    for i := 0; i < n; i++ {
        f, a, b = a, b, a+b
        if a > b {
            break
        }
    }
    return f
}

func FibonacciPeterSO(a, b string, n int) string {
    if n < 0 {
        n = 0
    }
    switch n {
    case 0:
        return ""
    case 1:
        return a
    case 2:
        return b
    }
    f := make([]byte, len(a)*int(fibonacciN(n-1))+len(b)*int(fibonacciN(n)))
    ab := a + b
    copy(f[len(f)-len(ab):], ab)
    for i := 4; i <= n; i++ {
        end := len(f) - (len(a)*int(fibonacciN(i-3)) + len(b)*int(fibonacciN(i-2)))
        start := len(f) - (len(a)*int(fibonacciN(i-1)) + len(b)*int(fibonacciN(i)))
        copy(f[start:end], f[end:])
    }
    return string(f)
}

func BenchmarkPeterSO(b *testing.B) {
    for i := 0; i < b.N; i++ {
        FibonacciPeterSO("a", "b", benchN)
    }
}

func FibonacciPlus(n int) string {
    FiboResult := ""
    prev_result := "a"
    next_result := "b"
    if n == 1 {
        FiboResult = "a"
    } else if n == 2 {
        FiboResult = "b"
    } else {
        for i := 3; i <= n; i++ {
            FiboResult = prev_result + next_result
            prev_result = next_result
            next_result = FiboResult
        }
    }
    return FiboResult
}

func BenchmarkPlus(b *testing.B) {
    for i := 0; i < b.N; i++ {
        FibonacciPlus(benchN)
    }
}

func FibonacciBuffer(n int) bytes.Buffer {
    var FiboResult bytes.Buffer
    var prev_result bytes.Buffer
    prev_result.WriteString("a")
    var next_result bytes.Buffer
    next_result.WriteString("b")
    if n == 1 {
        FiboResult.WriteString("a")
    } else if n == 2 {
        FiboResult.WriteString("b")
    } else {
        for i := 3; i <= n; i++ {
            FiboResult.Reset()
            FiboResult.WriteString(prev_result.String())
            FiboResult.WriteString(next_result.String())
            prev_result.Reset()
            prev_result.WriteString(next_result.String())
            next_result.Reset()
            next_result.WriteString(FiboResult.String())
        }
    }
    return FiboResult
}

func BenchmarkBuffer(b *testing.B) {
    for i := 0; i < b.N; i++ {
        FibonacciBuffer(benchN)
    }
}

var testN = benchN

func TestPeterSO(t *testing.T) {
    for n := 0; n <= testN; n++ {
        got := FibonacciPeterSO("a", "b", n)
        want := FibonacciPlus(n)
        if want != got {
            t.Errorf("want: %s got: %s", want, got)
        }
    }
}
