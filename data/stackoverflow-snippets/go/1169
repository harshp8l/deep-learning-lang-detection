package main

import (
    "fmt"
    "log"
    "net/http"
    "sync"
    "time"
)

func main() {

    addr := "127.0.0.1:2074"

    srv := http.Server{
        Addr: addr,
        Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            log.Println("hit ", r.URL.String())
            <-time.After(time.Second)
            log.Println("done ", r.URL.String())
        }),
    }
    fail(unblock(srv.ListenAndServe))

    jobs := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

    // case 1
    // it creates 10 goroutines,
    // that triggers 10 // concurrent get queries
    {
        wg := sync.WaitGroup{}
        wg.Add(len(jobs))
        log.Printf("starting %v jobs\n", len(jobs))
        for _, job := range jobs {
            go func(job int) {
                defer wg.Done()
                http.Get(fmt.Sprintf("http://%v/job/%v", addr, job))
            }(job)
        }
        wg.Wait()
        log.Printf("done %v jobs\n", len(jobs))
    }

    log.Println()
    log.Println("=================")
    log.Println()

    // case 2
    // it creates 3 goroutines,
    // that triggers 3 // concurrent get queries
    {
        wg := sync.WaitGroup{}
        wg.Add(len(jobs))
        in := make(chan string)
        limit := make(chan bool, 3)
        log.Printf("starting %v jobs\n", len(jobs))
        go func() {
            for url := range in {
                limit <- true
                go func(url string) {
                    defer wg.Done()
                    http.Get(url)
                    <-limit
                }(url)
            }
        }()
        for _, job := range jobs {
            in <- fmt.Sprintf("http://%v/job/%v", addr, job)
        }
        wg.Wait()
        log.Printf("done %v jobs\n", len(jobs))
    }

    log.Println()
    log.Println("=================")
    log.Println()

    // case 2: rewrite
    // it creates 6 goroutines,
    // that triggers 6 // concurrent get queries
    {
        wait, add := parallel(6)
        log.Printf("starting %v jobs\n", len(jobs))
        for _, job := range jobs {
            url := fmt.Sprintf("http://%v/job/%v", addr, job)
            add(func() {
                http.Get(url)
            })
        }
        wait()
        log.Printf("done %v jobs\n", len(jobs))
    }
}

func parallel(c int) (func(), func(block func())) {
    wg := sync.WaitGroup{}
    in := make(chan func())
    limit := make(chan bool, c)
    go func() {
        for block := range in {
            limit <- true
            go func(block func()) {
                defer wg.Done()
                block()
                <-limit
            }(block)
        }
    }()
    return wg.Wait, func(block func()) {
        wg.Add(1)
        in <- block
    }
}

func unblock(block func() error) error {
    w := make(chan error)
    go func() { w <- block() }()
    select {
    case err := <-w:
        return err
    case <-time.After(time.Millisecond):
    }
    return nil
}

func fail(err error) {
    if err != nil {
        panic(err)
    }
}
