package main

import (
    ""bufio""
    ""fmt""
    ""os""
)

const maxASCII = 0x7F

var letters = [maxASCII + 1]bool{
    'a': true, 'b': true, 'c': true, 'd': true, 'e': true, 'f': true, 'g': true,
    'h': true, 'i': true, 'j': true, 'k': true, 'l': true, 'm': true, 'n': true,
    'o': true, 'p': true, 'q': true, 'r': true, 's': true, 't': true, 'u': true,
    'v': true, 'w': true, 'x': true, 'y': true, 'z': true,
}

func isLetter(r rune) bool {
    return (r >= 0 && int(r) < len(letters)) && letters[r|0x20]
}

var vowels = [maxASCII + 1]bool{
    'a': true, 'e': true, 'i': true, 'o': true, 'u': true,
}

func isVowel(r rune) bool {
    return (r >= 0 && int(r) < len(vowels)) && vowels[r|0x20]
}

func isConsonant(r rune) bool {
    return isLetter(r) && !isVowel(r)
}

var numbers = [maxASCII + 1]bool{
    '0': true, '1': true, '2': true, '3': true, '4': true,
    '5': true, '6': true, '7': true, '8': true, '9': true,
}

func isNumber(r rune) bool {
    return (r >= 0 && int(r) < len(numbers)) && numbers[r]
}

func isOddNumber(r rune) bool {
    return isNumber(r) && (r-'0')&1 == 1
}

func isEvenNumber(r rune) bool {
    return isNumber(r) && (r-'0')&1 == 0
}

func main() {
    var classes = []struct {
        name string
        test func(rune) bool
    }{
        {""is a letter"", isLetter},
        {""is a consonant"", isConsonant},
        {""is a vowel"", isVowel},
        {""is a number"", isNumber},
        {""is an odd number"", isOddNumber},
        {""is an even number"", isEvenNumber},
    }

    enter := ""Enter a line:""
    fmt.Println(enter)
    s := bufio.NewScanner(os.Stdin)
    for s.Scan() {
        line := s.Text()
        if len(line) == 0 {
            break
        }
        for _, r := range line {
            for _, class := range classes {
                if class.test(r) {
                    fmt.Printf(""%q %s\n"", r, class.name)
                }
            }
        }
        fmt.Println(enter)
    }
    if err := s.Err(); err != nil {
        fmt.Fprintln(os.Stderr, err)
        return
    }
}
