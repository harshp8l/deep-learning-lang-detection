package main

import (
    "fmt"
    "time"
    "sync"
)

var mu = sync.RWMutex{}

func initializeAndMonitor() *map[string]string {
    map1 := make(map[string]string)
    map1["a"] = "map1-a"
    go func() {
        mu.Lock()
        defer mu.Unlock()
        time.Sleep(5 * time.Second)
        map2 := make(map[string]string)
        map2["a"] = "map2-a"
        map1 = map2
    }()
    return &map1
}


func main() {
    map1 := initializeAndMonitor()
    for count := 0; count < 100; count = count + 1 {
        mu.RLock()
        fmt.Println((*map1)["a"])
        mu.RUnlock()
        time.Sleep(1 * time.Second)
    }
}
