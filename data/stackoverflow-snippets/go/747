package main

import (
    "fmt"
    "math/rand"
    "strconv"
    "testing"
)

func shufflePreventCollisionSlaxor(ordered []int) []int {
    randomized := rand.Perm(len(ordered))
    for i, o := range ordered {
        if o == randomized[i] {
            shufflePreventCollisionSlaxor(ordered)
        }
    }
    return randomized
}

var r *rand.Rand

func isNoCollision(a, b []int) bool {
    if len(a) == len(b) {
        for i, ai := range a {
            if ai == b[i] {
                return false
            }
        }
        return true
    }
    return false
}

func shufflePreventCollisionPeterSO(ordered []int) []int {
    const guard = 4 * 1024 // deterministic, finite time
    for n := 1; n <= guard; n++ {
        randomized := r.Perm(len(ordered))
        if isNoCollision(ordered, randomized) {
            return randomized
        }
    }
    return nil
}

const testSeed = int64(60309766)

func testTime(t *testing.T, ordered, randomized []int, shuffle func([]int) []int) {
    shuffled := shuffle(ordered)
    want := fmt.Sprintf("%v", randomized)
    got := fmt.Sprintf("%v", shuffled)
    if want != got {
        t.Errorf("Error:\n  from: %v\n  want: %s\n  got:  %s\n", ordered, want, got)
    }
}

func testTimeSlaxor(t *testing.T, n int) {
    rand.Seed(testSeed)
    ordered := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}
    randomized := []int{3, 1, 17, 15, 10, 16, 14, 19, 7, 6, 11, 2, 0, 12, 8, 18, 13, 4, 9, 5}
    testTime(t, ordered, randomized, shufflePreventCollisionSlaxor)
    for i := 1; i < n; i++ {
        shufflePreventCollisionSlaxor(ordered)
    }
}

func TestTimeSlaxor(t *testing.T) {
    for k := 1; k <= 3; k++ {
        n := 1000 * k
        t.Run(strconv.Itoa(k)+"K", func(t *testing.T) { testTimeSlaxor(t, n) })
    }
}

func testTimePeterSo(t *testing.T, n int) {
    r = rand.New(rand.NewSource(testSeed))
    ordered := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}
    randomized := []int{10, 7, 15, 14, 8, 6, 18, 17, 19, 11, 5, 16, 2, 12, 1, 13, 3, 0, 9, 4}
    testTime(t, ordered, randomized, shufflePreventCollisionPeterSO)
    for i := 1; i < n; i++ {
        shufflePreventCollisionPeterSO(ordered)
    }
}

func TestTimePeterSO(t *testing.T) {
    for k := 1; k <= 3; k++ {
        n := 1000 * k
        t.Run(strconv.Itoa(k)+"K", func(t *testing.T) { testTimePeterSo(t, n) })
    }
    for m := 1; m <= 3; m++ {
        n := 1000 * 1000 * m
        t.Run(strconv.Itoa(m)+"M", func(t *testing.T) { testTimePeterSo(t, n) })
    }
}

func benchTime(b *testing.B, ordered, randomized []int, shuffle func([]int) []int) {
    shuffled := shuffle(ordered)
    want := fmt.Sprintf("%v", randomized)
    got := fmt.Sprintf("%v", shuffled)
    if want != got {
        b.Errorf("Error:\n  from: %v\n  want: %s\n  got:  %s\n", ordered, want, got)
    }
}


func BenchmarkTimePeterSO(b *testing.B) {
    b.ReportAllocs()
    r = rand.New(rand.NewSource(testSeed))
    ordered := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}
    randomized := []int{10, 7, 15, 14, 8, 6, 18, 17, 19, 11, 5, 16, 2, 12, 1, 13, 3, 0, 9, 4}
    benchTime(b, ordered, randomized, shufflePreventCollisionPeterSO)
    r = rand.New(rand.NewSource(testSeed))
    b.ResetTimer()
    for i := 0; i < b.N; i++ {
        shufflePreventCollisionPeterSO(ordered)
    }
}


func BenchmarkTimeSlaxor(b *testing.B) {
    b.ReportAllocs()
    r = rand.New(rand.NewSource(testSeed))
    ordered := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}
    randomized := []int{10, 7, 15, 14, 8, 6, 18, 17, 19, 11, 5, 16, 2, 12, 1, 13, 3, 0, 9, 4}
    benchTime(b, ordered, randomized, shufflePreventCollisionPeterSO)
    r = rand.New(rand.NewSource(testSeed))
    b.ResetTimer()
    for i := 0; i < b.N; i++ {
        shufflePreventCollisionSlaxor(ordered)
    }
}
