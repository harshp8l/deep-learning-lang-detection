package main

import (
    "bytes"
    "fmt"
    "io"
    "log"
    "path/filepath"
)

func main() {
    var tree yaml.MapSlice
    if err := yaml.Unmarshal(input, &tree); err != nil {
        log.Fatal(err)
    }

    var buf bytes.Buffer
    if err := render(&buf, tree, ""); err != nil {
        log.Fatal(err)
    }
}

func render(w io.Writer, tree yaml.MapSlice, prefix string) error {
    for _, branch := range tree {
        key, ok := branch.Key.(string)
        if !ok {
            return fmt.Errorf("unsupported key type: %T", branch.Key)
        }

        prefix := filepath.Join(prefix, key)

        switch x := branch.Value.(type) {
        default:
            return fmt.Errorf("unsupported value type: %T", branch.Value)

        case yaml.MapSlice:
            // recurse
            if err := render(w, x, prefix); err != nil {
                return err
            }
            continue

        // scalar values
        case string:
        case int:
        case float64:
        // ...
        }

        // print scalar
        if _, err := fmt.Fprintf(w, "%s = %v\n", prefix, branch.Value); err != nil {
            return err
        }
    }

    return nil
}
