package main

import ""fmt""

type vertex struct {
    x int
    y int
}

func main() {
    var v vertex
    fmt.Println(v.setVertex(1, 2))
    fmt.Println(v)
/*  v = v.setVertex(1,2)
    // we are assigning the returned variable address to v.
    fmt.Println(v)
*/

}


// With a value receiver, the setVertex method operates on a copy of the 
// original vertex value. (This is the same behavior as for any other
// function argument.) 
// This methods has a value as a reciver, so it gets the copy not the 
// original vertex.

func (v vertex) setVertex(x, y int) vertex {
// Here it is similar to creating a new variable with name 'v',
// Go is lexically scoped using blocks, so this variable exists only 
// in this block, while it is returned we are printing it but we didn't
// store it in another variable.
    v.x = x
    v.y = y
    return v
}

// If you want to change any variable or struct, we need to pass its 
// address, else only copy of that variable is received by the called
// function.
