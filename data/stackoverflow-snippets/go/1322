package main

import (
    ""encoding/json""
    ""fmt""
    ""reflect""
    ""unsafe""
)

type Employee struct {
    Firstname string `json:""firstName""`
}

func deserialize(jsonData string) interface{} {
    var obj interface{}

    if err := json.Unmarshal([]byte(jsonData), &obj); err != nil {
        panic(err)
    }

    return obj
}

func NewEmployee(objData map[string]interface{}) *Employee {
    s := (*Employee)(nil)
    t := reflect.TypeOf(s).Elem()
    employeePtr := reflect.New(t)
    employee := (*Employee)(unsafe.Pointer(employeePtr.Pointer()))
    employee.Firstname = objData[""firstName""].(string)

    return employee
}

func main() {
    jsonData := ""{\""firstName\"": \""John\""}""

    obj := deserialize(jsonData)

    objData := obj.(map[string]interface{})
    employee := NewEmployee(objData)

    fmt.Printf(""%s\n"", employee.Firstname)
}
